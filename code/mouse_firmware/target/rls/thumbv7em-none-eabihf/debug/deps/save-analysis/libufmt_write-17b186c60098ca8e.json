{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/ufmt-write-0.1.0","program":"/home/s7rul/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","ufmt_write","--edition=2018","/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/ufmt-write-0.1.0/src/lib.rs","--json=diagnostic-rendered-ansi,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","codegen-units=1","-C","debuginfo=2","-C","metadata=17b186c60098ca8e","-C","extra-filename=-17b186c60098ca8e","--out-dir","/home/s7rul/Documents/KiCad/inbyggda system/e7020e-project/code/mouse_firmware/target/rls/thumbv7em-none-eabihf/debug/deps","--target","thumbv7em-none-eabihf","-L","dependency=/home/s7rul/Documents/KiCad/inbyggda system/e7020e-project/code/mouse_firmware/target/rls/thumbv7em-none-eabihf/debug/deps","-L","dependency=/home/s7rul/Documents/KiCad/inbyggda system/e7020e-project/code/mouse_firmware/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/s7rul/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/s7rul/Documents/KiCad/inbyggda system/e7020e-project/code/mouse_firmware/target/rls/thumbv7em-none-eabihf/debug/deps/libufmt_write-17b186c60098ca8e.rmeta"},"prelude":{"crate_id":{"name":"ufmt_write","disambiguator":[500194231799560660,0]},"crate_root":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/ufmt-write-0.1.0/src","external_crates":[{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/ufmt-write-0.1.0/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[11850898037736144901,0]}},{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/ufmt-write-0.1.0/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[4266445326248464732,0]}},{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/ufmt-write-0.1.0/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[10236682895667522671,0]}}],"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/ufmt-write-0.1.0/src/lib.rs","byte_start":0,"byte_end":1579,"line_start":1,"line_end":48,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/ufmt-write-0.1.0/src/lib.rs","byte_start":0,"byte_end":1579,"line_start":1,"line_end":48,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/ufmt-write-0.1.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":6}],"decl_id":null,"docs":" `μfmt`'s `uWrite` trait\n","sig":null,"attributes":[{"value":"/ `μfmt`'s `uWrite` trait","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/ufmt-write-0.1.0/src/lib.rs","byte_start":0,"byte_end":28,"line_start":1,"line_end":1,"column_start":1,"column_end":28}},{"value":"no_std","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/ufmt-write-0.1.0/src/lib.rs","byte_start":64,"byte_end":70,"line_start":3,"line_end":3,"column_start":35,"column_end":41}},{"value":"deny(missing_docs)","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/ufmt-write-0.1.0/src/lib.rs","byte_start":73,"byte_end":95,"line_start":4,"line_end":4,"column_start":1,"column_end":23}},{"value":"deny(rust_2018_compatibility)","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/ufmt-write-0.1.0/src/lib.rs","byte_start":96,"byte_end":129,"line_start":5,"line_end":5,"column_start":1,"column_end":34}},{"value":"deny(rust_2018_idioms)","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/ufmt-write-0.1.0/src/lib.rs","byte_start":130,"byte_end":156,"line_start":6,"line_end":6,"column_start":1,"column_end":27}},{"value":"deny(warnings)","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/ufmt-write-0.1.0/src/lib.rs","byte_start":157,"byte_end":175,"line_start":7,"line_end":7,"column_start":1,"column_end":19}}]},{"kind":"Trait","id":{"krate":0,"index":6},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/ufmt-write-0.1.0/src/lib.rs","byte_start":453,"byte_end":459,"line_start":19,"line_end":19,"column_start":11,"column_end":17},"name":"uWrite","qualname":"::uWrite","value":"uWrite","parent":null,"children":[{"krate":0,"index":7},{"krate":0,"index":8},{"krate":0,"index":9}],"decl_id":null,"docs":" A collection of methods that are required / used to format a message into a stream.\n","sig":null,"attributes":[{"value":"/ A collection of methods that are required / used to format a message into a stream.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/ufmt-write-0.1.0/src/lib.rs","byte_start":324,"byte_end":411,"line_start":17,"line_end":17,"column_start":1,"column_end":88}},{"value":"allow(non_camel_case_types)","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/ufmt-write-0.1.0/src/lib.rs","byte_start":412,"byte_end":442,"line_start":18,"line_end":18,"column_start":1,"column_end":31}}]},{"kind":"Type","id":{"krate":0,"index":7},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/ufmt-write-0.1.0/src/lib.rs","byte_start":515,"byte_end":520,"line_start":21,"line_end":21,"column_start":10,"column_end":15},"name":"Error","qualname":"::uWrite::Error","value":"type Error;","parent":{"krate":0,"index":6},"children":[],"decl_id":null,"docs":" The error associated to this writer\n","sig":null,"attributes":[{"value":"/ The error associated to this writer","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/ufmt-write-0.1.0/src/lib.rs","byte_start":466,"byte_end":505,"line_start":20,"line_end":20,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":8},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/ufmt-write-0.1.0/src/lib.rs","byte_start":807,"byte_end":816,"line_start":27,"line_end":27,"column_start":8,"column_end":17},"name":"write_str","qualname":"::uWrite::write_str","value":"pub fn write_str(&mut Self, &str) -> Result<(), Self::Error>","parent":{"krate":0,"index":6},"children":[],"decl_id":null,"docs":" Writes a string slice into this writer, returning whether the write succeeded.","sig":null,"attributes":[{"value":"/ Writes a string slice into this writer, returning whether the write succeeded.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/ufmt-write-0.1.0/src/lib.rs","byte_start":527,"byte_end":609,"line_start":23,"line_end":23,"column_start":5,"column_end":87}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/ufmt-write-0.1.0/src/lib.rs","byte_start":614,"byte_end":617,"line_start":24,"line_end":24,"column_start":5,"column_end":8}},{"value":"/ This method can only succeed if the entire string slice was successfully written, and this","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/ufmt-write-0.1.0/src/lib.rs","byte_start":622,"byte_end":716,"line_start":25,"line_end":25,"column_start":5,"column_end":99}},{"value":"/ method will not return until all data has been written or an error occurs.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/ufmt-write-0.1.0/src/lib.rs","byte_start":721,"byte_end":799,"line_start":26,"line_end":26,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":9},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/ufmt-write-0.1.0/src/lib.rs","byte_start":1211,"byte_end":1221,"line_start":34,"line_end":34,"column_start":8,"column_end":18},"name":"write_char","qualname":"::uWrite::write_char","value":"pub fn write_char(&mut Self, char) -> Result<(), Self::Error>","parent":{"krate":0,"index":6},"children":[],"decl_id":null,"docs":" Writes a [`char`] into this writer, returning whether the write succeeded.","sig":null,"attributes":[{"value":"/ Writes a [`char`] into this writer, returning whether the write succeeded.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/ufmt-write-0.1.0/src/lib.rs","byte_start":870,"byte_end":948,"line_start":29,"line_end":29,"column_start":5,"column_end":83}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/ufmt-write-0.1.0/src/lib.rs","byte_start":953,"byte_end":956,"line_start":30,"line_end":30,"column_start":5,"column_end":8}},{"value":"/ A single [`char`] may be encoded as more than one byte. This method can only succeed if the","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/ufmt-write-0.1.0/src/lib.rs","byte_start":961,"byte_end":1056,"line_start":31,"line_end":31,"column_start":5,"column_end":100}},{"value":"/ entire byte sequence was successfully written, and this method will not return until all","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/ufmt-write-0.1.0/src/lib.rs","byte_start":1061,"byte_end":1153,"line_start":32,"line_end":32,"column_start":5,"column_end":97}},{"value":"/ data has been written or an error occurs.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/ufmt-write-0.1.0/src/lib.rs","byte_start":1158,"byte_end":1203,"line_start":33,"line_end":33,"column_start":5,"column_end":50}}]}],"impls":[],"refs":[],"macro_refs":[],"relations":[]}