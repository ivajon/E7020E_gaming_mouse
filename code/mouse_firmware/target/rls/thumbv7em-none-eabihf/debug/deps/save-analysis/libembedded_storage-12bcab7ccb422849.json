{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0","program":"/home/s7rul/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","embedded_storage","--edition=2018","/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/lib.rs","--json=diagnostic-rendered-ansi,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","codegen-units=1","-C","debuginfo=2","-C","metadata=12bcab7ccb422849","-C","extra-filename=-12bcab7ccb422849","--out-dir","/home/s7rul/Documents/KiCad/inbyggda system/e7020e-project/code/mouse_firmware/target/rls/thumbv7em-none-eabihf/debug/deps","--target","thumbv7em-none-eabihf","-L","dependency=/home/s7rul/Documents/KiCad/inbyggda system/e7020e-project/code/mouse_firmware/target/rls/thumbv7em-none-eabihf/debug/deps","-L","dependency=/home/s7rul/Documents/KiCad/inbyggda system/e7020e-project/code/mouse_firmware/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/s7rul/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/s7rul/Documents/KiCad/inbyggda system/e7020e-project/code/mouse_firmware/target/rls/thumbv7em-none-eabihf/debug/deps/libembedded_storage-12bcab7ccb422849.rmeta"},"prelude":{"crate_id":{"name":"embedded_storage","disambiguator":[2650119357169489412,0]},"crate_root":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src","external_crates":[{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[11850898037736144901,0]}},{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[4266445326248464732,0]}},{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[10236682895667522671,0]}}],"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/lib.rs","byte_start":0,"byte_end":1649,"line_start":1,"line_end":47,"column_start":1,"column_end":2}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/lib.rs","byte_start":0,"byte_end":1649,"line_start":1,"line_end":47,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":33},{"krate":0,"index":109},{"krate":0,"index":111},{"krate":0,"index":115}],"decl_id":null,"docs":" # embedded-storage - A Storage Abstraction Layer for Embedded Systems","sig":null,"attributes":[{"value":"/ # embedded-storage - A Storage Abstraction Layer for Embedded Systems","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/lib.rs","byte_start":0,"byte_end":73,"line_start":1,"line_end":1,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/lib.rs","byte_start":74,"byte_end":77,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Storage traits to allow on and off board storage devices to read and write","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/lib.rs","byte_start":78,"byte_end":156,"line_start":3,"line_end":3,"column_start":1,"column_end":79}},{"value":"/ data.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/lib.rs","byte_start":157,"byte_end":166,"line_start":4,"line_end":4,"column_start":1,"column_end":10}},{"value":"no_std","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/lib.rs","byte_start":234,"byte_end":244,"line_start":7,"line_end":7,"column_start":1,"column_end":11}},{"value":"deny(missing_docs)","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/lib.rs","byte_start":245,"byte_end":267,"line_start":8,"line_end":8,"column_start":1,"column_end":23}},{"value":"deny(unsafe_code)","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/lib.rs","byte_start":268,"byte_end":289,"line_start":9,"line_end":9,"column_start":1,"column_end":22}}]},{"kind":"Mod","id":{"krate":0,"index":4},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/iter.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"iter","qualname":"::iter","value":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/iter.rs","parent":null,"children":[{"krate":0,"index":5},{"krate":0,"index":8},{"krate":0,"index":15},{"krate":0,"index":20},{"krate":0,"index":28}],"decl_id":null,"docs":" Currently contains [`OverlapIterator`]\n","sig":null,"attributes":[{"value":"/ Currently contains [`OverlapIterator`]","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/lib.rs","byte_start":291,"byte_end":333,"line_start":11,"line_end":11,"column_start":1,"column_end":43}}]},{"kind":"Struct","id":{"krate":0,"index":8},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/iter.rs","byte_start":1774,"byte_end":1789,"line_start":5,"line_end":5,"column_start":12,"column_end":27},"name":"OverlapIterator","qualname":"::iter::OverlapIterator","value":"OverlapIterator {  }","parent":null,"children":[{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14}],"decl_id":null,"docs":" Iterator producing block-region pairs, where each memory block maps to each\n region.\n","sig":null,"attributes":[{"value":"/ Iterator producing block-region pairs, where each memory block maps to each","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/iter.rs","byte_start":1671,"byte_end":1750,"line_start":3,"line_end":3,"column_start":1,"column_end":80}},{"value":"/ region.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/iter.rs","byte_start":1751,"byte_end":1762,"line_start":4,"line_end":4,"column_start":1,"column_end":12}}]},{"kind":"Trait","id":{"krate":0,"index":15},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/iter.rs","byte_start":2008,"byte_end":2026,"line_start":16,"line_end":16,"column_start":11,"column_end":29},"name":"IterableByOverlaps","qualname":"::iter::IterableByOverlaps","value":"IterableByOverlaps<'a, R, I>","parent":null,"children":[{"krate":0,"index":19}],"decl_id":null,"docs":" Trait allowing us to automatically add an `overlaps` function to all iterators over [`Region`]\n","sig":null,"attributes":[{"value":"/ Trait allowing us to automatically add an `overlaps` function to all iterators over [`Region`]","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/iter.rs","byte_start":1899,"byte_end":1997,"line_start":15,"line_end":15,"column_start":1,"column_end":99}}]},{"kind":"Method","id":{"krate":0,"index":19},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/iter.rs","byte_start":2188,"byte_end":2196,"line_start":22,"line_end":22,"column_start":5,"column_end":13},"name":"overlaps","qualname":"::iter::IterableByOverlaps::overlaps","value":"pub fn overlaps(Self, &'a [u8], u32) -> OverlapIterator<, R, I>","parent":{"krate":0,"index":15},"children":[],"decl_id":null,"docs":" Obtain an [`OverlapIterator`] over a subslice of `memory` that overlaps with the region in `self`\n","sig":null,"attributes":[{"value":"/ Obtain an [`OverlapIterator`] over a subslice of `memory` that overlaps with the region in `self`","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/iter.rs","byte_start":2082,"byte_end":2183,"line_start":21,"line_end":21,"column_start":2,"column_end":103}}]},{"kind":"Mod","id":{"krate":0,"index":33},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"nor_flash","qualname":"::nor_flash","value":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","parent":null,"children":[{"krate":0,"index":34},{"krate":0,"index":35},{"krate":0,"index":38},{"krate":0,"index":41},{"krate":0,"index":44},{"krate":0,"index":47},{"krate":0,"index":52},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":61},{"krate":0,"index":64},{"krate":0,"index":66},{"krate":0,"index":71},{"krate":0,"index":75},{"krate":0,"index":81},{"krate":0,"index":87},{"krate":0,"index":92},{"krate":0,"index":96},{"krate":0,"index":102}],"decl_id":null,"docs":" Technology specific traits for NOR Flashes\n","sig":null,"attributes":[{"value":"/ Technology specific traits for NOR Flashes","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/lib.rs","byte_start":348,"byte_end":394,"line_start":13,"line_end":13,"column_start":1,"column_end":47}}]},{"kind":"Trait","id":{"krate":0,"index":47},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":3435,"byte_end":3447,"line_start":4,"line_end":4,"column_start":11,"column_end":23},"name":"ReadNorFlash","qualname":"::nor_flash::ReadNorFlash","value":"ReadNorFlash","parent":null,"children":[{"krate":0,"index":48},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51}],"decl_id":null,"docs":" Read only NOR flash trait.\n","sig":null,"attributes":[{"value":"/ Read only NOR flash trait.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":3394,"byte_end":3424,"line_start":3,"line_end":3,"column_start":1,"column_end":31}}]},{"kind":"Type","id":{"krate":0,"index":48},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":3494,"byte_end":3499,"line_start":6,"line_end":6,"column_start":7,"column_end":12},"name":"Error","qualname":"::nor_flash::ReadNorFlash::Error","value":"type Error;","parent":{"krate":0,"index":47},"children":[],"decl_id":null,"docs":" An enumeration of storage errors\n","sig":null,"attributes":[{"value":"/ An enumeration of storage errors","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":3451,"byte_end":3487,"line_start":5,"line_end":5,"column_start":2,"column_end":38}}]},{"kind":"Const","id":{"krate":0,"index":49},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":3574,"byte_end":3583,"line_start":9,"line_end":9,"column_start":8,"column_end":17},"name":"READ_SIZE","qualname":"::nor_flash::ReadNorFlash::READ_SIZE","value":"usize","parent":{"krate":0,"index":47},"children":[],"decl_id":null,"docs":" The minumum number of bytes the storage peripheral can read\n","sig":null,"attributes":[{"value":"/ The minumum number of bytes the storage peripheral can read","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":3503,"byte_end":3566,"line_start":8,"line_end":8,"column_start":2,"column_end":65}}]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":3859,"byte_end":3863,"line_start":16,"line_end":16,"column_start":5,"column_end":9},"name":"read","qualname":"::nor_flash::ReadNorFlash::read","value":"pub fn read(&mut Self, u32, &mut [u8]) -> Result<(), Self::Error>","parent":{"krate":0,"index":47},"children":[],"decl_id":null,"docs":" Read a slice of data from the storage peripheral, starting the read\n operation at the given address offset, and reading `bytes.len()` bytes.","sig":null,"attributes":[{"value":"/ Read a slice of data from the storage peripheral, starting the read","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":3594,"byte_end":3665,"line_start":11,"line_end":11,"column_start":2,"column_end":73}},{"value":"/ operation at the given address offset, and reading `bytes.len()` bytes.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":3667,"byte_end":3742,"line_start":12,"line_end":12,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":3744,"byte_end":3747,"line_start":13,"line_end":13,"column_start":2,"column_end":5}},{"value":"/ This should throw an error in case `bytes.len()` will be larger than","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":3749,"byte_end":3821,"line_start":14,"line_end":14,"column_start":2,"column_end":74}},{"value":"/ the peripheral end address.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":3823,"byte_end":3854,"line_start":15,"line_end":15,"column_start":2,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":3985,"byte_end":3993,"line_start":19,"line_end":19,"column_start":5,"column_end":13},"name":"capacity","qualname":"::nor_flash::ReadNorFlash::capacity","value":"pub fn capacity(&Self) -> usize","parent":{"krate":0,"index":47},"children":[],"decl_id":null,"docs":" The capacity of the peripheral in bytes.\n","sig":null,"attributes":[{"value":"/ The capacity of the peripheral in bytes.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":3936,"byte_end":3980,"line_start":18,"line_end":18,"column_start":2,"column_end":46}}]},{"kind":"Trait","id":{"krate":0,"index":52},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":4045,"byte_end":4053,"line_start":23,"line_end":23,"column_start":11,"column_end":19},"name":"NorFlash","qualname":"::nor_flash::NorFlash","value":"NorFlash: ReadNorFlash","parent":null,"children":[{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56}],"decl_id":null,"docs":" NOR flash trait.\n","sig":null,"attributes":[{"value":"/ NOR flash trait.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":4014,"byte_end":4034,"line_start":22,"line_end":22,"column_start":1,"column_end":21}}]},{"kind":"Const","id":{"krate":0,"index":53},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":4143,"byte_end":4153,"line_start":25,"line_end":25,"column_start":8,"column_end":18},"name":"WRITE_SIZE","qualname":"::nor_flash::NorFlash::WRITE_SIZE","value":"usize","parent":{"krate":0,"index":52},"children":[],"decl_id":null,"docs":" The minumum number of bytes the storage peripheral can write\n","sig":null,"attributes":[{"value":"/ The minumum number of bytes the storage peripheral can write","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":4071,"byte_end":4135,"line_start":24,"line_end":24,"column_start":2,"column_end":66}}]},{"kind":"Const","id":{"krate":0,"index":54},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":4236,"byte_end":4246,"line_start":28,"line_end":28,"column_start":8,"column_end":18},"name":"ERASE_SIZE","qualname":"::nor_flash::NorFlash::ERASE_SIZE","value":"usize","parent":{"krate":0,"index":52},"children":[],"decl_id":null,"docs":" The minumum number of bytes the storage peripheral can erase\n","sig":null,"attributes":[{"value":"/ The minumum number of bytes the storage peripheral can erase","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":4164,"byte_end":4228,"line_start":27,"line_end":27,"column_start":2,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":4640,"byte_end":4645,"line_start":37,"line_end":37,"column_start":5,"column_end":10},"name":"erase","qualname":"::nor_flash::NorFlash::erase","value":"pub fn erase(&mut Self, u32, u32) -> Result<(), Self::Error>","parent":{"krate":0,"index":52},"children":[],"decl_id":null,"docs":" Erase the given storage range, clearing all data within `[from..to]`.\n The given range will contain all 1s afterwards.","sig":null,"attributes":[{"value":"/ Erase the given storage range, clearing all data within `[from..to]`.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":4257,"byte_end":4330,"line_start":30,"line_end":30,"column_start":2,"column_end":75}},{"value":"/ The given range will contain all 1s afterwards.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":4332,"byte_end":4383,"line_start":31,"line_end":31,"column_start":2,"column_end":53}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":4385,"byte_end":4388,"line_start":32,"line_end":32,"column_start":2,"column_end":5}},{"value":"/ This should return an error if the range is not aligned to a proper","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":4390,"byte_end":4461,"line_start":33,"line_end":33,"column_start":2,"column_end":73}},{"value":"/ erase resolution","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":4463,"byte_end":4483,"line_start":34,"line_end":34,"column_start":2,"column_end":22}},{"value":"/ If power is lost during erase, contents of the page are undefined.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":4485,"byte_end":4555,"line_start":35,"line_end":35,"column_start":2,"column_end":72}},{"value":"/ `from` and `to` must both be multiples of `ERASE_SIZE` and `from` <= `to`.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":4557,"byte_end":4635,"line_start":36,"line_end":36,"column_start":2,"column_end":80}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":4984,"byte_end":4989,"line_start":43,"line_end":43,"column_start":5,"column_end":10},"name":"write","qualname":"::nor_flash::NorFlash::write","value":"pub fn write(&mut Self, u32, &[u8]) -> Result<(), Self::Error>","parent":{"krate":0,"index":52},"children":[],"decl_id":null,"docs":" If power is lost during write, the contents of the written words are undefined,\n but the rest of the page is guaranteed to be unchanged.\n It is not allowed to write to the same word twice.\n `offset` and `bytes.len()` must both be multiples of `WRITE_SIZE`.\n","sig":null,"attributes":[{"value":"/ If power is lost during write, the contents of the written words are undefined,","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":4707,"byte_end":4790,"line_start":39,"line_end":39,"column_start":2,"column_end":85}},{"value":"/ but the rest of the page is guaranteed to be unchanged.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":4792,"byte_end":4851,"line_start":40,"line_end":40,"column_start":2,"column_end":61}},{"value":"/ It is not allowed to write to the same word twice.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":4853,"byte_end":4907,"line_start":41,"line_end":41,"column_start":2,"column_end":56}},{"value":"/ `offset` and `bytes.len()` must both be multiples of `WRITE_SIZE`.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":4909,"byte_end":4979,"line_start":42,"line_end":42,"column_start":2,"column_end":72}}]},{"kind":"Trait","id":{"krate":0,"index":57},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":5639,"byte_end":5657,"line_start":56,"line_end":56,"column_start":11,"column_end":29},"name":"MultiwriteNorFlash","qualname":"::nor_flash::MultiwriteNorFlash","value":"MultiwriteNorFlash: NorFlash","parent":null,"children":[],"decl_id":null,"docs":" Marker trait for NorFlash relaxing the restrictions on `write`.","sig":null,"attributes":[{"value":"/ Marker trait for NorFlash relaxing the restrictions on `write`.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":5059,"byte_end":5126,"line_start":46,"line_end":46,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":5127,"byte_end":5130,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/ Writes to the same word twice are now allowed. The result is the logical AND of the","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":5131,"byte_end":5218,"line_start":48,"line_end":48,"column_start":1,"column_end":88}},{"value":"/ previous data and the written data. That is, it is only possible to change 1 bits to 0 bits.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":5219,"byte_end":5315,"line_start":49,"line_end":49,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":5316,"byte_end":5319,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ If power is lost during write:","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":5320,"byte_end":5354,"line_start":51,"line_end":51,"column_start":1,"column_end":35}},{"value":"/ - Bits that were 1 on flash and are written to 1 are guaranteed to stay as 1","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":5355,"byte_end":5435,"line_start":52,"line_end":52,"column_start":1,"column_end":81}},{"value":"/ - Bits that were 1 on flash and are written to 0 are undefined","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":5436,"byte_end":5502,"line_start":53,"line_end":53,"column_start":1,"column_end":67}},{"value":"/ - Bits that were 0 on flash are guaranteed to stay as 0","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":5503,"byte_end":5562,"line_start":54,"line_end":54,"column_start":1,"column_end":60}},{"value":"/ - Rest of the bits in the page are guaranteed to be unchanged","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":5563,"byte_end":5628,"line_start":55,"line_end":55,"column_start":1,"column_end":66}}]},{"kind":"Struct","id":{"krate":0,"index":66},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":6139,"byte_end":6157,"line_start":85,"line_end":85,"column_start":12,"column_end":30},"name":"RmwNorFlashStorage","qualname":"::nor_flash::RmwNorFlashStorage","value":"RmwNorFlashStorage {  }","parent":null,"children":[{"krate":0,"index":69},{"krate":0,"index":70}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":6124,"byte_end":6127,"line_start":84,"line_end":84,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":74},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":6475,"byte_end":6478,"line_start":98,"line_end":98,"column_start":9,"column_end":12},"name":"new","qualname":"<RmwNorFlashStorage>::new","value":"pub fn new(S, &'a mut [u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Instantiate a new generic `Storage` from a `NorFlash` peripheral","sig":null,"attributes":[{"value":"/ Instantiate a new generic `Storage` from a `NorFlash` peripheral","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":6273,"byte_end":6341,"line_start":94,"line_end":94,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":6343,"byte_end":6346,"line_start":95,"line_end":95,"column_start":2,"column_end":5}},{"value":"/ **NOTE** This will panic if the provided merge buffer,","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":6348,"byte_end":6406,"line_start":96,"line_end":96,"column_start":2,"column_end":60}},{"value":"/ is smaller than the erase size of the flash peripheral","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":6408,"byte_end":6466,"line_start":97,"line_end":97,"column_start":2,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":87},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":8103,"byte_end":8131,"line_start":160,"line_end":160,"column_start":12,"column_end":40},"name":"RmwMultiwriteNorFlashStorage","qualname":"::nor_flash::RmwMultiwriteNorFlashStorage","value":"RmwMultiwriteNorFlashStorage {  }","parent":null,"children":[{"krate":0,"index":90},{"krate":0,"index":91}],"decl_id":null,"docs":"\n","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":8088,"byte_end":8091,"line_start":159,"line_end":159,"column_start":1,"column_end":4}}]},{"kind":"Method","id":{"krate":0,"index":95},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":8469,"byte_end":8472,"line_start":173,"line_end":173,"column_start":9,"column_end":12},"name":"new","qualname":"<RmwMultiwriteNorFlashStorage>::new","value":"pub fn new(S, &'a mut [u8]) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Instantiate a new generic `Storage` from a `NorFlash` peripheral","sig":null,"attributes":[{"value":"/ Instantiate a new generic `Storage` from a `NorFlash` peripheral","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":8267,"byte_end":8335,"line_start":169,"line_end":169,"column_start":2,"column_end":70}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":8337,"byte_end":8340,"line_start":170,"line_end":170,"column_start":2,"column_end":5}},{"value":"/ **NOTE** This will panic if the provided merge buffer,","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":8342,"byte_end":8400,"line_start":171,"line_end":171,"column_start":2,"column_end":60}},{"value":"/ is smaller than the erase size of the flash peripheral","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":8402,"byte_end":8460,"line_start":172,"line_end":172,"column_start":2,"column_end":60}}]},{"kind":"Trait","id":{"krate":0,"index":109},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/lib.rs","byte_start":498,"byte_end":504,"line_start":17,"line_end":17,"column_start":11,"column_end":17},"name":"Region","qualname":"::Region","value":"Region","parent":null,"children":[{"krate":0,"index":110}],"decl_id":null,"docs":" A region denotes a contiguous piece of memory between two addresses.\n","sig":null,"attributes":[{"value":"/ A region denotes a contiguous piece of memory between two addresses.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/lib.rs","byte_start":415,"byte_end":487,"line_start":16,"line_end":16,"column_start":1,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/lib.rs","byte_start":572,"byte_end":580,"line_start":19,"line_end":19,"column_start":5,"column_end":13},"name":"contains","qualname":"::Region::contains","value":"pub fn contains(&Self, u32) -> bool","parent":{"krate":0,"index":109},"children":[],"decl_id":null,"docs":" Check if `address` is contained in the region of `Self`\n","sig":null,"attributes":[{"value":"/ Check if `address` is contained in the region of `Self`","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/lib.rs","byte_start":508,"byte_end":567,"line_start":18,"line_end":18,"column_start":2,"column_end":61}}]},{"kind":"Trait","id":{"krate":0,"index":111},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/lib.rs","byte_start":664,"byte_end":675,"line_start":23,"line_end":23,"column_start":11,"column_end":22},"name":"ReadStorage","qualname":"::ReadStorage","value":"ReadStorage","parent":null,"children":[{"krate":0,"index":112},{"krate":0,"index":113},{"krate":0,"index":114}],"decl_id":null,"docs":" Transparent read only storage trait\n","sig":null,"attributes":[{"value":"/ Transparent read only storage trait","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/lib.rs","byte_start":614,"byte_end":653,"line_start":22,"line_end":22,"column_start":1,"column_end":40}}]},{"kind":"Type","id":{"krate":0,"index":112},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/lib.rs","byte_start":722,"byte_end":727,"line_start":25,"line_end":25,"column_start":7,"column_end":12},"name":"Error","qualname":"::ReadStorage::Error","value":"type Error;","parent":{"krate":0,"index":111},"children":[],"decl_id":null,"docs":" An enumeration of storage errors\n","sig":null,"attributes":[{"value":"/ An enumeration of storage errors","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/lib.rs","byte_start":679,"byte_end":715,"line_start":24,"line_end":24,"column_start":2,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":113},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/lib.rs","byte_start":996,"byte_end":1000,"line_start":32,"line_end":32,"column_start":5,"column_end":9},"name":"read","qualname":"::ReadStorage::read","value":"pub fn read(&mut Self, u32, &mut [u8]) -> Result<(), Self::Error>","parent":{"krate":0,"index":111},"children":[],"decl_id":null,"docs":" Read a slice of data from the storage peripheral, starting the read\n operation at the given address offset, and reading `bytes.len()` bytes.","sig":null,"attributes":[{"value":"/ Read a slice of data from the storage peripheral, starting the read","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/lib.rs","byte_start":731,"byte_end":802,"line_start":27,"line_end":27,"column_start":2,"column_end":73}},{"value":"/ operation at the given address offset, and reading `bytes.len()` bytes.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/lib.rs","byte_start":804,"byte_end":879,"line_start":28,"line_end":28,"column_start":2,"column_end":77}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/lib.rs","byte_start":881,"byte_end":884,"line_start":29,"line_end":29,"column_start":2,"column_end":5}},{"value":"/ This should throw an error in case `bytes.len()` will be larger than","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/lib.rs","byte_start":886,"byte_end":958,"line_start":30,"line_end":30,"column_start":2,"column_end":74}},{"value":"/ `self.capacity() - offset`.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/lib.rs","byte_start":960,"byte_end":991,"line_start":31,"line_end":31,"column_start":2,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/lib.rs","byte_start":1130,"byte_end":1138,"line_start":35,"line_end":35,"column_start":5,"column_end":13},"name":"capacity","qualname":"::ReadStorage::capacity","value":"pub fn capacity(&Self) -> usize","parent":{"krate":0,"index":111},"children":[],"decl_id":null,"docs":" The capacity of the storage peripheral in bytes.\n","sig":null,"attributes":[{"value":"/ The capacity of the storage peripheral in bytes.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/lib.rs","byte_start":1073,"byte_end":1125,"line_start":34,"line_end":34,"column_start":2,"column_end":54}}]},{"kind":"Trait","id":{"krate":0,"index":115},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/lib.rs","byte_start":1210,"byte_end":1217,"line_start":39,"line_end":39,"column_start":11,"column_end":18},"name":"Storage","qualname":"::Storage","value":"Storage: ReadStorage","parent":null,"children":[{"krate":0,"index":116}],"decl_id":null,"docs":" Transparent read/write storage trait\n","sig":null,"attributes":[{"value":"/ Transparent read/write storage trait","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/lib.rs","byte_start":1159,"byte_end":1199,"line_start":38,"line_end":38,"column_start":1,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/lib.rs","byte_start":1576,"byte_end":1581,"line_start":46,"line_end":46,"column_start":5,"column_end":10},"name":"write","qualname":"::Storage::write","value":"pub fn write(&mut Self, u32, &[u8]) -> Result<(), Self::Error>","parent":{"krate":0,"index":115},"children":[],"decl_id":null,"docs":" Write a slice of data to the storage peripheral, starting the write\n operation at the given address offset (between 0 and `self.capacity()`).","sig":null,"attributes":[{"value":"/ Write a slice of data to the storage peripheral, starting the write","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/lib.rs","byte_start":1234,"byte_end":1305,"line_start":40,"line_end":40,"column_start":2,"column_end":73}},{"value":"/ operation at the given address offset (between 0 and `self.capacity()`).","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/lib.rs","byte_start":1307,"byte_end":1383,"line_start":41,"line_end":41,"column_start":2,"column_end":78}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/lib.rs","byte_start":1385,"byte_end":1388,"line_start":42,"line_end":42,"column_start":2,"column_end":5}},{"value":"/ **NOTE:**","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/lib.rs","byte_start":1390,"byte_end":1403,"line_start":43,"line_end":43,"column_start":2,"column_end":15}},{"value":"/ This function will automatically erase any pages necessary to write the given data,","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/lib.rs","byte_start":1405,"byte_end":1492,"line_start":44,"line_end":44,"column_start":2,"column_end":89}},{"value":"/ and might as such do RMW operations at an undesirable performance impact.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/lib.rs","byte_start":1494,"byte_end":1571,"line_start":45,"line_end":45,"column_start":2,"column_end":79}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/iter.rs","byte_start":2297,"byte_end":2312,"line_start":25,"line_end":25,"column_start":29,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":24},{"krate":0,"index":25}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/iter.rs","byte_start":3119,"byte_end":3120,"line_start":52,"line_end":52,"column_start":49,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":32}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Inherent","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":5729,"byte_end":5733,"line_start":63,"line_end":63,"column_start":6,"column_end":10},"value":"","parent":null,"children":[{"krate":0,"index":62},{"krate":0,"index":63}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":5953,"byte_end":5957,"line_start":77,"line_end":77,"column_start":17,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":65}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":6224,"byte_end":6242,"line_start":90,"line_end":90,"column_start":13,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":74}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":6705,"byte_end":6723,"line_start":110,"line_end":110,"column_start":29,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":7030,"byte_end":7048,"line_start":126,"line_end":126,"column_start":25,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":84}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":8198,"byte_end":8226,"line_start":165,"line_end":165,"column_start":13,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":95}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":8699,"byte_end":8727,"line_start":185,"line_end":185,"column_start":29,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":9034,"byte_end":9062,"line_start":201,"line_end":201,"column_start":25,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":105}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/lib.rs","byte_start":342,"byte_end":346,"line_start":12,"line_end":12,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":4}},{"kind":"Mod","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/lib.rs","byte_start":403,"byte_end":412,"line_start":14,"line_end":14,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":33}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/iter.rs","byte_start":2297,"byte_end":2312,"line_start":25,"line_end":25,"column_start":29,"column_end":44},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":8},"to":{"krate":1,"index":7829}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/iter.rs","byte_start":3119,"byte_end":3120,"line_start":52,"line_end":52,"column_start":49,"column_end":50},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":31},"to":{"krate":0,"index":15}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":4055,"byte_end":4067,"line_start":23,"line_end":23,"column_start":21,"column_end":33},"kind":"SuperTrait","from":{"krate":0,"index":47},"to":{"krate":0,"index":52}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":5659,"byte_end":5667,"line_start":56,"line_end":56,"column_start":31,"column_end":39},"kind":"SuperTrait","from":{"krate":0,"index":52},"to":{"krate":0,"index":57}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":5729,"byte_end":5733,"line_start":63,"line_end":63,"column_start":6,"column_end":10},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":58},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":5953,"byte_end":5957,"line_start":77,"line_end":77,"column_start":17,"column_end":21},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":58},"to":{"krate":0,"index":109}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":6224,"byte_end":6242,"line_start":90,"line_end":90,"column_start":13,"column_end":31},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":66},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":6705,"byte_end":6723,"line_start":110,"line_end":110,"column_start":29,"column_end":47},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":66},"to":{"krate":0,"index":111}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":7030,"byte_end":7048,"line_start":126,"line_end":126,"column_start":25,"column_end":43},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":66},"to":{"krate":0,"index":115}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":8198,"byte_end":8226,"line_start":165,"line_end":165,"column_start":13,"column_end":41},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":87},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":8699,"byte_end":8727,"line_start":185,"line_end":185,"column_start":29,"column_end":57},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":87},"to":{"krate":0,"index":111}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/nor_flash.rs","byte_start":9034,"byte_end":9062,"line_start":201,"line_end":201,"column_start":25,"column_end":53},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":87},"to":{"krate":0,"index":115}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/embedded-storage-0.2.0/src/lib.rs","byte_start":1219,"byte_end":1230,"line_start":39,"line_end":39,"column_start":20,"column_end":31},"kind":"SuperTrait","from":{"krate":0,"index":111},"to":{"krate":0,"index":115}}]}