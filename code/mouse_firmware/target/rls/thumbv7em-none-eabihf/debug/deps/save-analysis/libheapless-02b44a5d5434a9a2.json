{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10","program":"/home/s7rul/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","heapless","--edition=2018","/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","--json=diagnostic-rendered-ansi,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","codegen-units=1","-C","debuginfo=2","--cfg","feature=\"atomic-polyfill\"","--cfg","feature=\"cas\"","--cfg","feature=\"default\"","-C","metadata=02b44a5d5434a9a2","-C","extra-filename=-02b44a5d5434a9a2","--out-dir","/home/s7rul/Documents/KiCad/inbyggda system/e7020e-project/code/mouse_firmware/target/rls/thumbv7em-none-eabihf/debug/deps","--target","thumbv7em-none-eabihf","-L","dependency=/home/s7rul/Documents/KiCad/inbyggda system/e7020e-project/code/mouse_firmware/target/rls/thumbv7em-none-eabihf/debug/deps","-L","dependency=/home/s7rul/Documents/KiCad/inbyggda system/e7020e-project/code/mouse_firmware/target/rls/debug/deps","--extern","hash32=/home/s7rul/Documents/KiCad/inbyggda system/e7020e-project/code/mouse_firmware/target/rls/thumbv7em-none-eabihf/debug/deps/libhash32-be370851abcbd268.rmeta","--extern","stable_deref_trait=/home/s7rul/Documents/KiCad/inbyggda system/e7020e-project/code/mouse_firmware/target/rls/thumbv7em-none-eabihf/debug/deps/libstable_deref_trait-394935f4c29531d2.rmeta","--cap-lints","allow","--cfg","armv7m","--cfg","has_cas","--cfg","has_atomics","--error-format=json","--sysroot","/home/s7rul/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/s7rul/Documents/KiCad/inbyggda system/e7020e-project/code/mouse_firmware/target/rls/thumbv7em-none-eabihf/debug/deps/libheapless-02b44a5d5434a9a2.rmeta"},"prelude":{"crate_id":{"name":"heapless","disambiguator":[8816045231714244969,0]},"crate_root":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src","external_crates":[{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[11850898037736144901,0]}},{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[4266445326248464732,0]}},{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","num":3,"id":{"name":"rustc_std_workspace_core","disambiguator":[10236682895667522671,0]}},{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","num":4,"id":{"name":"hash32","disambiguator":[10279002970035885114,0]}},{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","num":5,"id":{"name":"byteorder","disambiguator":[17067121789010249786,0]}},{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","num":6,"id":{"name":"stable_deref_trait","disambiguator":[17122422275466883217,0]}}],"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":0,"byte_end":4173,"line_start":1,"line_end":115,"column_start":1,"column_end":12}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":1301},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":3402,"byte_end":3412,"line_start":77,"line_end":77,"column_start":22,"column_end":32},"alias_span":null,"name":"BinaryHeap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":69},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":3429,"byte_end":3434,"line_start":78,"line_end":78,"column_start":16,"column_end":21},"alias_span":null,"name":"Deque","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":213},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":3454,"byte_end":3467,"line_start":79,"line_end":79,"column_start":19,"column_end":32},"alias_span":null,"name":"HistoryBuffer","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2245},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":3469,"byte_end":3482,"line_start":79,"line_end":79,"column_start":34,"column_end":47},"alias_span":null,"name":"OldestOrdered","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2272},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":3504,"byte_end":3510,"line_start":80,"line_end":80,"column_start":20,"column_end":26},"alias_span":null,"name":"Bucket","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":324},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":3512,"byte_end":3523,"line_start":80,"line_end":80,"column_start":28,"column_end":39},"alias_span":null,"name":"FnvIndexMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":376},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":3525,"byte_end":3533,"line_start":80,"line_end":80,"column_start":41,"column_end":49},"alias_span":null,"name":"IndexMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2282},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":3535,"byte_end":3538,"line_start":80,"line_end":80,"column_start":51,"column_end":54},"alias_span":null,"name":"Pos","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":580},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":3560,"byte_end":3571,"line_start":81,"line_end":81,"column_start":20,"column_end":31},"alias_span":null,"name":"FnvIndexSet","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":583},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":3573,"byte_end":3581,"line_start":81,"line_end":81,"column_start":33,"column_end":41},"alias_span":null,"name":"IndexSet","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":753},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":3604,"byte_end":3613,"line_start":82,"line_end":82,"column_start":21,"column_end":30},"alias_span":null,"name":"LinearMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1623},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":3683,"byte_end":3686,"line_start":84,"line_end":84,"column_start":31,"column_end":34},"alias_span":null,"name":"Arc","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":925},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":3704,"byte_end":3710,"line_start":85,"line_end":85,"column_start":17,"column_end":23},"alias_span":null,"name":"String","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1053},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":3725,"byte_end":3728,"line_start":86,"line_end":86,"column_start":14,"column_end":17},"alias_span":null,"name":"Vec","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1769},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":187097,"byte_end":187101,"line_start":247,"line_end":247,"column_start":16,"column_end":20},"alias_span":null,"name":"Node","value":"","parent":{"krate":0,"index":1471}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":0,"byte_end":4173,"line_start":1,"line_end":115,"column_start":1,"column_end":12},"name":"","qualname":"::","value":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":4},{"krate":0,"index":7},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":18},{"krate":0,"index":21},{"krate":0,"index":24},{"krate":0,"index":27},{"krate":0,"index":30},{"krate":0,"index":31},{"krate":0,"index":34},{"krate":0,"index":37},{"krate":0,"index":40},{"krate":0,"index":43},{"krate":0,"index":46},{"krate":0,"index":49},{"krate":0,"index":197},{"krate":0,"index":282},{"krate":0,"index":549},{"krate":0,"index":730},{"krate":0,"index":899},{"krate":0,"index":1021},{"krate":0,"index":1255},{"krate":0,"index":1405},{"krate":0,"index":1471},{"krate":0,"index":1855},{"krate":0,"index":2007},{"krate":0,"index":2188}],"decl_id":null,"docs":" `static` friendly data structures that don't require dynamic memory allocation","sig":null,"attributes":[{"value":"/ `static` friendly data structures that don't require dynamic memory allocation","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":0,"byte_end":82,"line_start":1,"line_end":1,"column_start":1,"column_end":83}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":83,"byte_end":86,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ The core principle behind `heapless` is that its data structures are backed by a *static* memory","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":87,"byte_end":187,"line_start":3,"line_end":3,"column_start":1,"column_end":101}},{"value":"/ allocation. For example, you can think of `heapless::Vec` as an alternative version of","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":188,"byte_end":278,"line_start":4,"line_end":4,"column_start":1,"column_end":91}},{"value":"/ `std::Vec` with fixed capacity and that can't be re-allocated on the fly (e.g. via `push`).","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":279,"byte_end":374,"line_start":5,"line_end":5,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":375,"byte_end":378,"line_start":6,"line_end":6,"column_start":1,"column_end":4}},{"value":"/ All `heapless` data structures store their memory allocation *inline* and specify their capacity","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":379,"byte_end":479,"line_start":7,"line_end":7,"column_start":1,"column_end":101}},{"value":"/ via their type parameter `N`. This means that you can instantiate a `heapless` data structure on","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":480,"byte_end":580,"line_start":8,"line_end":8,"column_start":1,"column_end":101}},{"value":"/ the stack, in a `static` variable, or even in the heap.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":581,"byte_end":640,"line_start":9,"line_end":9,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":641,"byte_end":644,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":645,"byte_end":652,"line_start":11,"line_end":11,"column_start":1,"column_end":8}},{"value":"/ use heapless::Vec; // fixed capacity `std::Vec`","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":653,"byte_end":704,"line_start":12,"line_end":12,"column_start":1,"column_end":52}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":705,"byte_end":708,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ // on the stack","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":709,"byte_end":728,"line_start":14,"line_end":14,"column_start":1,"column_end":20}},{"value":"/ let mut xs: Vec<u8, 8> = Vec::new(); // can hold up to 8 elements","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":729,"byte_end":798,"line_start":15,"line_end":15,"column_start":1,"column_end":70}},{"value":"/ xs.push(42).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":799,"byte_end":824,"line_start":16,"line_end":16,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(xs.pop(), Some(42));","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":825,"byte_end":860,"line_start":17,"line_end":17,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":861,"byte_end":864,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ // in a `static` variable","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":865,"byte_end":894,"line_start":19,"line_end":19,"column_start":1,"column_end":30}},{"value":"/ static mut XS: Vec<u8, 8> = Vec::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":895,"byte_end":938,"line_start":20,"line_end":20,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":939,"byte_end":942,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ let xs = unsafe { &mut XS };","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":943,"byte_end":975,"line_start":22,"line_end":22,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":976,"byte_end":979,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ xs.push(42);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":980,"byte_end":996,"line_start":24,"line_end":24,"column_start":1,"column_end":17}},{"value":"/ assert_eq!(xs.pop(), Some(42));","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":997,"byte_end":1032,"line_start":25,"line_end":25,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":1033,"byte_end":1036,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ // in the heap (though kind of pointless because no reallocation)","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":1037,"byte_end":1106,"line_start":27,"line_end":27,"column_start":1,"column_end":70}},{"value":"/ let mut ys: Box<Vec<u8, 8>> = Box::new(Vec::new());","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":1107,"byte_end":1162,"line_start":28,"line_end":28,"column_start":1,"column_end":56}},{"value":"/ ys.push(42).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":1163,"byte_end":1188,"line_start":29,"line_end":29,"column_start":1,"column_end":26}},{"value":"/ assert_eq!(ys.pop(), Some(42));","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":1189,"byte_end":1224,"line_start":30,"line_end":30,"column_start":1,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":1225,"byte_end":1232,"line_start":31,"line_end":31,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":1233,"byte_end":1236,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ Because they have fixed capacity `heapless` data structures don't implicitly reallocate. This","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":1237,"byte_end":1334,"line_start":33,"line_end":33,"column_start":1,"column_end":98}},{"value":"/ means that operations like `heapless::Vec.push` are *truly* constant time rather than amortized","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":1335,"byte_end":1434,"line_start":34,"line_end":34,"column_start":1,"column_end":100}},{"value":"/ constant time with potentially unbounded (depends on the allocator) worst case execution time","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":1435,"byte_end":1532,"line_start":35,"line_end":35,"column_start":1,"column_end":98}},{"value":"/ (which is bad / unacceptable for hard real time applications).","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":1533,"byte_end":1599,"line_start":36,"line_end":36,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":1600,"byte_end":1603,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/ `heapless` data structures don't use a memory allocator which means no risk of an uncatchable","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":1604,"byte_end":1701,"line_start":38,"line_end":38,"column_start":1,"column_end":98}},{"value":"/ Out Of Memory (OOM) condition while performing operations on them. It's certainly possible to","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":1702,"byte_end":1799,"line_start":39,"line_end":39,"column_start":1,"column_end":98}},{"value":"/ run out of capacity while growing `heapless` data structures, but the API lets you handle this","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":1800,"byte_end":1898,"line_start":40,"line_end":40,"column_start":1,"column_end":99}},{"value":"/ possibility by returning a `Result` on operations that may exhaust the capacity of the data","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":1899,"byte_end":1994,"line_start":41,"line_end":41,"column_start":1,"column_end":96}},{"value":"/ structure.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":1995,"byte_end":2009,"line_start":42,"line_end":42,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":2010,"byte_end":2013,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/ List of currently implemented data structures:","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":2014,"byte_end":2064,"line_start":44,"line_end":44,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":2065,"byte_end":2068,"line_start":45,"line_end":45,"column_start":1,"column_end":4}},{"value":"/ - [`Arc`](pool/singleton/arc/struct.Arc.html) -- Thread-safe reference-counting pointer backed by a memory pool","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":2069,"byte_end":2184,"line_start":46,"line_end":46,"column_start":1,"column_end":116}},{"value":"/ - [`BinaryHeap`](binary_heap/struct.BinaryHeap.html) -- priority queue","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":2185,"byte_end":2259,"line_start":47,"line_end":47,"column_start":1,"column_end":75}},{"value":"/ - [`IndexMap`](struct.IndexMap.html) -- hash table","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":2260,"byte_end":2314,"line_start":48,"line_end":48,"column_start":1,"column_end":55}},{"value":"/ - [`IndexSet`](struct.IndexSet.html) -- hash set","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":2315,"byte_end":2367,"line_start":49,"line_end":49,"column_start":1,"column_end":53}},{"value":"/ - [`LinearMap`](struct.LinearMap.html)","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":2368,"byte_end":2410,"line_start":50,"line_end":50,"column_start":1,"column_end":43}},{"value":"/ - [`Pool`](pool/struct.Pool.html) -- lock-free memory pool","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":2411,"byte_end":2473,"line_start":51,"line_end":51,"column_start":1,"column_end":63}},{"value":"/ - [`String`](struct.String.html)","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":2474,"byte_end":2510,"line_start":52,"line_end":52,"column_start":1,"column_end":37}},{"value":"/ - [`Vec`](struct.Vec.html)","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":2511,"byte_end":2541,"line_start":53,"line_end":53,"column_start":1,"column_end":31}},{"value":"/ - [`mpmc::Q*`](mpmc/index.html) -- multiple producer multiple consumer lock-free queue","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":2542,"byte_end":2632,"line_start":54,"line_end":54,"column_start":1,"column_end":91}},{"value":"/ - [`spsc::Queue`](spsc/struct.Queue.html) -- single producer single consumer lock-free queue","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":2633,"byte_end":2729,"line_start":55,"line_end":55,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":2730,"byte_end":2733,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ # Optional Features","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":2734,"byte_end":2757,"line_start":57,"line_end":57,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":2758,"byte_end":2761,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ The `heapless` crate provides the following optional Cargo features:","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":2762,"byte_end":2834,"line_start":59,"line_end":59,"column_start":1,"column_end":73}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":2835,"byte_end":2838,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ - `ufmt-impl`: Implement [`ufmt_write::uWrite`] for `String<N>` and `Vec<u8, N>`","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":2839,"byte_end":2923,"line_start":61,"line_end":61,"column_start":1,"column_end":85}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":2924,"byte_end":2927,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ [`ufmt_write::uWrite`]: https://docs.rs/ufmt-write/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":2928,"byte_end":2983,"line_start":63,"line_end":63,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":2984,"byte_end":2987,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ # Minimum Supported Rust Version (MSRV)","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":2988,"byte_end":3031,"line_start":65,"line_end":65,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":3032,"byte_end":3035,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ This crate is guaranteed to compile on stable Rust 1.51 and up with its default set of features.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":3036,"byte_end":3136,"line_start":67,"line_end":67,"column_start":1,"column_end":101}},{"value":"/ It *might* compile on older versions but that may change in any new patch release.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":3137,"byte_end":3223,"line_start":68,"line_end":68,"column_start":1,"column_end":87}},{"value":"no_std","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":3248,"byte_end":3254,"line_start":70,"line_end":70,"column_start":24,"column_end":30}},{"value":"deny(missing_docs)","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":3257,"byte_end":3279,"line_start":71,"line_end":71,"column_start":1,"column_end":23}},{"value":"deny(rust_2018_compatibility)","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":3280,"byte_end":3313,"line_start":72,"line_end":72,"column_start":1,"column_end":34}},{"value":"deny(rust_2018_idioms)","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":3314,"byte_end":3340,"line_start":73,"line_end":73,"column_start":1,"column_end":27}},{"value":"deny(warnings)","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":3341,"byte_end":3359,"line_start":74,"line_end":74,"column_start":1,"column_end":19}},{"value":"deny(const_err)","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":3360,"byte_end":3379,"line_start":75,"line_end":75,"column_start":1,"column_end":20}}]},{"kind":"Struct","id":{"krate":0,"index":69},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":5278,"byte_end":5283,"line_start":41,"line_end":41,"column_start":12,"column_end":17},"name":"Deque","qualname":"::deque::Deque","value":"Deque {  }","parent":null,"children":[{"krate":0,"index":72},{"krate":0,"index":74},{"krate":0,"index":75},{"krate":0,"index":76}],"decl_id":null,"docs":" A fixed capacity double-ended queue.","sig":null,"attributes":[{"value":"/ A fixed capacity double-ended queue.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":4305,"byte_end":4345,"line_start":7,"line_end":7,"column_start":1,"column_end":41}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":4346,"byte_end":4349,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":4350,"byte_end":4364,"line_start":9,"line_end":9,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":4365,"byte_end":4368,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":4369,"byte_end":4376,"line_start":11,"line_end":11,"column_start":1,"column_end":8}},{"value":"/ use heapless::Deque;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":4377,"byte_end":4401,"line_start":12,"line_end":12,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":4402,"byte_end":4405,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ // A deque with a fixed capacity of 8 elements allocated on the stack","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":4406,"byte_end":4479,"line_start":14,"line_end":14,"column_start":1,"column_end":74}},{"value":"/ let mut deque = Deque::<_, 8>::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":4480,"byte_end":4521,"line_start":15,"line_end":15,"column_start":1,"column_end":42}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":4522,"byte_end":4525,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ // You can use it as a good old FIFO queue.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":4526,"byte_end":4573,"line_start":17,"line_end":17,"column_start":1,"column_end":48}},{"value":"/ deque.push_back(1);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":4574,"byte_end":4597,"line_start":18,"line_end":18,"column_start":1,"column_end":24}},{"value":"/ deque.push_back(2);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":4598,"byte_end":4621,"line_start":19,"line_end":19,"column_start":1,"column_end":24}},{"value":"/ assert_eq!(deque.len(), 2);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":4622,"byte_end":4653,"line_start":20,"line_end":20,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":4654,"byte_end":4657,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(deque.pop_front(), Some(1));","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":4658,"byte_end":4701,"line_start":22,"line_end":22,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(deque.pop_front(), Some(2));","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":4702,"byte_end":4745,"line_start":23,"line_end":23,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(deque.len(), 0);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":4746,"byte_end":4777,"line_start":24,"line_end":24,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":4778,"byte_end":4781,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ // Deque is double-ended, you can push and pop from the front and back.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":4782,"byte_end":4857,"line_start":26,"line_end":26,"column_start":1,"column_end":76}},{"value":"/ deque.push_back(1);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":4858,"byte_end":4881,"line_start":27,"line_end":27,"column_start":1,"column_end":24}},{"value":"/ deque.push_front(2);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":4882,"byte_end":4906,"line_start":28,"line_end":28,"column_start":1,"column_end":25}},{"value":"/ deque.push_back(3);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":4907,"byte_end":4930,"line_start":29,"line_end":29,"column_start":1,"column_end":24}},{"value":"/ deque.push_front(4);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":4931,"byte_end":4955,"line_start":30,"line_end":30,"column_start":1,"column_end":25}},{"value":"/ assert_eq!(deque.pop_front(), Some(4));","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":4956,"byte_end":4999,"line_start":31,"line_end":31,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(deque.pop_front(), Some(2));","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":5000,"byte_end":5043,"line_start":32,"line_end":32,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(deque.pop_front(), Some(1));","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":5044,"byte_end":5087,"line_start":33,"line_end":33,"column_start":1,"column_end":44}},{"value":"/ assert_eq!(deque.pop_front(), Some(3));","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":5088,"byte_end":5131,"line_start":34,"line_end":34,"column_start":1,"column_end":44}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":5132,"byte_end":5135,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ // You can iterate it, yielding all the elements front-to-back.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":5136,"byte_end":5203,"line_start":36,"line_end":36,"column_start":1,"column_end":68}},{"value":"/ for x in &deque {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":5204,"byte_end":5225,"line_start":37,"line_end":37,"column_start":1,"column_end":22}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":5226,"byte_end":5252,"line_start":38,"line_end":38,"column_start":1,"column_end":27}},{"value":"/ }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":5253,"byte_end":5258,"line_start":39,"line_end":39,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":5259,"byte_end":5266,"line_start":40,"line_end":40,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":6096,"byte_end":6099,"line_start":70,"line_end":70,"column_start":18,"column_end":21},"name":"new","qualname":"<Deque<T, N>>::new","value":"pub const fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new, empty deque with a fixed capacity of `N`","sig":null,"attributes":[{"value":"/ Constructs a new, empty deque with a fixed capacity of `N`","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":5717,"byte_end":5779,"line_start":57,"line_end":57,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":5784,"byte_end":5787,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":5792,"byte_end":5806,"line_start":59,"line_end":59,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":5811,"byte_end":5814,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":5819,"byte_end":5826,"line_start":61,"line_end":61,"column_start":5,"column_end":12}},{"value":"/ use heapless::Deque;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":5831,"byte_end":5855,"line_start":62,"line_end":62,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":5860,"byte_end":5863,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ // allocate the deque on the stack","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":5868,"byte_end":5906,"line_start":64,"line_end":64,"column_start":5,"column_end":43}},{"value":"/ let mut x: Deque<u8, 16> = Deque::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":5911,"byte_end":5955,"line_start":65,"line_end":65,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":5960,"byte_end":5963,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ // allocate the deque in a static variable","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":5968,"byte_end":6014,"line_start":67,"line_end":67,"column_start":5,"column_end":51}},{"value":"/ static mut X: Deque<u8, 16> = Deque::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":6019,"byte_end":6066,"line_start":68,"line_end":68,"column_start":5,"column_end":52}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":6071,"byte_end":6078,"line_start":69,"line_end":69,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":6666,"byte_end":6674,"line_start":99,"line_end":99,"column_start":18,"column_end":26},"name":"capacity","qualname":"<Deque<T, N>>::capacity","value":"pub const fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the maximum number of elements the deque can hold.\n","sig":null,"attributes":[{"value":"/ Returns the maximum number of elements the deque can hold.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":6586,"byte_end":6648,"line_start":98,"line_end":98,"column_start":5,"column_end":67}}]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":6790,"byte_end":6793,"line_start":104,"line_end":104,"column_start":18,"column_end":21},"name":"len","qualname":"<Deque<T, N>>::len","value":"pub const fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements currently in the deque.\n","sig":null,"attributes":[{"value":"/ Returns the number of elements currently in the deque.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":6714,"byte_end":6772,"line_start":103,"line_end":103,"column_start":5,"column_end":63}}]},{"kind":"Method","id":{"krate":0,"index":87},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":7058,"byte_end":7063,"line_start":115,"line_end":115,"column_start":12,"column_end":17},"name":"clear","qualname":"<Deque<T, N>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Clears the deque, removing all values.\n","sig":null,"attributes":[{"value":"/ Clears the deque, removing all values.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":7004,"byte_end":7046,"line_start":114,"line_end":114,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":89},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":7739,"byte_end":7747,"line_start":134,"line_end":134,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Deque<T, N>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the deque is empty.\n","sig":null,"attributes":[{"value":"/ Returns whether the deque is empty.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":7688,"byte_end":7727,"line_start":133,"line_end":133,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":90},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":7903,"byte_end":7910,"line_start":139,"line_end":139,"column_start":12,"column_end":19},"name":"is_full","qualname":"<Deque<T, N>>::is_full","value":"pub fn is_full(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the deque is full (i.e. if `len() == capacity()`.\n","sig":null,"attributes":[{"value":"/ Returns whether the deque is full (i.e. if `len() == capacity()`.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":7822,"byte_end":7891,"line_start":138,"line_end":138,"column_start":5,"column_end":74}}]},{"kind":"Method","id":{"krate":0,"index":91},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":8051,"byte_end":8060,"line_start":144,"line_end":144,"column_start":12,"column_end":21},"name":"as_slices","qualname":"<Deque<T, N>>::as_slices","value":"pub fn as_slices(&Self) -> (&[T], &[T])","parent":null,"children":[],"decl_id":null,"docs":" Returns a pair of slices which contain, in order, the contents of the `Deque`.\n","sig":null,"attributes":[{"value":"/ Returns a pair of slices which contain, in order, the contents of the `Deque`.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":7957,"byte_end":8039,"line_start":143,"line_end":143,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":92},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":8990,"byte_end":9003,"line_start":170,"line_end":170,"column_start":12,"column_end":25},"name":"as_mut_slices","qualname":"<Deque<T, N>>::as_mut_slices","value":"pub fn as_mut_slices(&mut Self) -> (&mut [T], &mut [T])","parent":null,"children":[],"decl_id":null,"docs":" Returns a pair of mutable slices which contain, in order, the contents of the `Deque`.\n","sig":null,"attributes":[{"value":"/ Returns a pair of mutable slices which contain, in order, the contents of the `Deque`.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":8888,"byte_end":8978,"line_start":169,"line_end":169,"column_start":5,"column_end":95}}]},{"kind":"Method","id":{"krate":0,"index":93},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":9875,"byte_end":9880,"line_start":195,"line_end":195,"column_start":12,"column_end":17},"name":"front","qualname":"<Deque<T, N>>::front","value":"pub fn front(&Self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Provides a reference to the front element, or None if the `Deque` is empty.\n","sig":null,"attributes":[{"value":"/ Provides a reference to the front element, or None if the `Deque` is empty.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":9784,"byte_end":9863,"line_start":194,"line_end":194,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":94},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":10165,"byte_end":10174,"line_start":204,"line_end":204,"column_start":12,"column_end":21},"name":"front_mut","qualname":"<Deque<T, N>>::front_mut","value":"pub fn front_mut(&mut Self) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Provides a mutable reference to the front element, or None if the `Deque` is empty.\n","sig":null,"attributes":[{"value":"/ Provides a mutable reference to the front element, or None if the `Deque` is empty.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":10066,"byte_end":10153,"line_start":203,"line_end":203,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":95},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":10470,"byte_end":10474,"line_start":213,"line_end":213,"column_start":12,"column_end":16},"name":"back","qualname":"<Deque<T, N>>::back","value":"pub fn back(&Self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Provides a reference to the back element, or None if the `Deque` is empty.\n","sig":null,"attributes":[{"value":"/ Provides a reference to the back element, or None if the `Deque` is empty.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":10380,"byte_end":10458,"line_start":212,"line_end":212,"column_start":5,"column_end":83}}]},{"kind":"Method","id":{"krate":0,"index":96},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":10805,"byte_end":10813,"line_start":223,"line_end":223,"column_start":12,"column_end":20},"name":"back_mut","qualname":"<Deque<T, N>>::back_mut","value":"pub fn back_mut(&mut Self) -> Option<&mut T>","parent":null,"children":[],"decl_id":null,"docs":" Provides a mutable reference to the back element, or None if the `Deque` is empty.\n","sig":null,"attributes":[{"value":"/ Provides a mutable reference to the back element, or None if the `Deque` is empty.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":10707,"byte_end":10793,"line_start":222,"line_end":222,"column_start":5,"column_end":91}}]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":11166,"byte_end":11175,"line_start":233,"line_end":233,"column_start":12,"column_end":21},"name":"pop_front","qualname":"<Deque<T, N>>::pop_front","value":"pub fn pop_front(&mut Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes the item from the front of the deque and returns it, or `None` if it's empty\n","sig":null,"attributes":[{"value":"/ Removes the item from the front of the deque and returns it, or `None` if it's empty","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":11066,"byte_end":11154,"line_start":232,"line_end":232,"column_start":5,"column_end":93}}]},{"kind":"Method","id":{"krate":0,"index":98},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":11441,"byte_end":11449,"line_start":242,"line_end":242,"column_start":12,"column_end":20},"name":"pop_back","qualname":"<Deque<T, N>>::pop_back","value":"pub fn pop_back(&mut Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes the item from the back of the deque and returns it, or `None` if it's empty\n","sig":null,"attributes":[{"value":"/ Removes the item from the back of the deque and returns it, or `None` if it's empty","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":11342,"byte_end":11429,"line_start":241,"line_end":241,"column_start":5,"column_end":92}}]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":11735,"byte_end":11745,"line_start":253,"line_end":253,"column_start":12,"column_end":22},"name":"push_front","qualname":"<Deque<T, N>>::push_front","value":"pub fn push_front(&mut Self, T) -> Result<(), T>","parent":null,"children":[],"decl_id":null,"docs":" Appends an `item` to the front of the deque","sig":null,"attributes":[{"value":"/ Appends an `item` to the front of the deque","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":11615,"byte_end":11662,"line_start":250,"line_end":250,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":11667,"byte_end":11670,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ Returns back the `item` if the deque is full","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":11675,"byte_end":11723,"line_start":252,"line_end":252,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":100},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":12066,"byte_end":12075,"line_start":265,"line_end":265,"column_start":12,"column_end":21},"name":"push_back","qualname":"<Deque<T, N>>::push_back","value":"pub fn push_back(&mut Self, T) -> Result<(), T>","parent":null,"children":[],"decl_id":null,"docs":" Appends an `item` to the back of the deque","sig":null,"attributes":[{"value":"/ Appends an `item` to the back of the deque","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":11947,"byte_end":11993,"line_start":262,"line_end":262,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":11998,"byte_end":12001,"line_start":263,"line_end":263,"column_start":5,"column_end":8}},{"value":"/ Returns back the `item` if the deque is full","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":12006,"byte_end":12054,"line_start":264,"line_end":264,"column_start":5,"column_end":53}}]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":13269,"byte_end":13289,"line_start":306,"line_end":306,"column_start":19,"column_end":39},"name":"push_front_unchecked","qualname":"<Deque<T, N>>::push_front_unchecked","value":"pub unsafe fn push_front_unchecked(&mut Self, T)","parent":null,"children":[],"decl_id":null,"docs":" Appends an `item` to the front of the deque","sig":null,"attributes":[{"value":"/ Appends an `item` to the front of the deque","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":13126,"byte_end":13173,"line_start":301,"line_end":301,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":13178,"byte_end":13181,"line_start":302,"line_end":302,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":13186,"byte_end":13198,"line_start":303,"line_end":303,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":13203,"byte_end":13206,"line_start":304,"line_end":304,"column_start":5,"column_end":8}},{"value":"/ This assumes the deque is not full.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":13211,"byte_end":13250,"line_start":305,"line_end":305,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":104},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":13912,"byte_end":13931,"line_start":324,"line_end":324,"column_start":19,"column_end":38},"name":"push_back_unchecked","qualname":"<Deque<T, N>>::push_back_unchecked","value":"pub unsafe fn push_back_unchecked(&mut Self, T)","parent":null,"children":[],"decl_id":null,"docs":" Appends an `item` to the back of the deque","sig":null,"attributes":[{"value":"/ Appends an `item` to the back of the deque","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":13770,"byte_end":13816,"line_start":319,"line_end":319,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":13821,"byte_end":13824,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":13829,"byte_end":13841,"line_start":321,"line_end":321,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":13846,"byte_end":13849,"line_start":322,"line_end":322,"column_start":5,"column_end":8}},{"value":"/ This assumes the deque is not full.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":13854,"byte_end":13893,"line_start":323,"line_end":323,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":105},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":14438,"byte_end":14442,"line_start":337,"line_end":337,"column_start":12,"column_end":16},"name":"iter","qualname":"<Deque<T, N>>::iter","value":"pub fn iter(&Self) -> Iter<, T, >","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over the deque.\n","sig":null,"attributes":[{"value":"/ Returns an iterator over the deque.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":14387,"byte_end":14426,"line_start":336,"line_end":336,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":14783,"byte_end":14791,"line_start":349,"line_end":349,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<Deque<T, N>>::iter_mut","value":"pub fn iter_mut(&mut Self) -> IterMut<, T, >","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator that allows modifying each value.\n","sig":null,"attributes":[{"value":"/ Returns an iterator that allows modifying each value.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":14714,"byte_end":14771,"line_start":348,"line_end":348,"column_start":5,"column_end":62}}]},{"kind":"Struct","id":{"krate":0,"index":2219},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":15837,"byte_end":15845,"line_start":388,"line_end":388,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::deque::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":2222}],"decl_id":null,"docs":" An iterator that moves out of a [`Deque`].","sig":null,"attributes":[{"value":"/ An iterator that moves out of a [`Deque`].","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":15692,"byte_end":15738,"line_start":383,"line_end":383,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":15739,"byte_end":15742,"line_start":384,"line_end":384,"column_start":1,"column_end":4}},{"value":"/ This struct is created by calling the `into_iter` method.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":15743,"byte_end":15804,"line_start":385,"line_end":385,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":15805,"byte_end":15808,"line_start":386,"line_end":386,"column_start":1,"column_end":4}}]},{"kind":"Struct","id":{"krate":0,"index":2229},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":16389,"byte_end":16393,"line_start":412,"line_end":412,"column_start":12,"column_end":16},"name":"Iter","qualname":"::deque::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":2233},{"krate":0,"index":2234},{"krate":0,"index":2235},{"krate":0,"index":2236},{"krate":0,"index":2237}],"decl_id":null,"docs":" An iterator over the elements of a [`Deque`].","sig":null,"attributes":[{"value":"/ An iterator over the elements of a [`Deque`].","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":16250,"byte_end":16299,"line_start":408,"line_end":408,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":16300,"byte_end":16303,"line_start":409,"line_end":409,"column_start":1,"column_end":4}},{"value":"/ This struct is created by calling the `iter` method.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":16304,"byte_end":16360,"line_start":410,"line_end":410,"column_start":1,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":150},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":17954,"byte_end":17961,"line_start":468,"line_end":468,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::deque::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":154},{"krate":0,"index":155},{"krate":0,"index":156},{"krate":0,"index":157},{"krate":0,"index":158}],"decl_id":null,"docs":" An iterator over the elements of a [`Deque`].","sig":null,"attributes":[{"value":"/ An iterator over the elements of a [`Deque`].","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":17832,"byte_end":17881,"line_start":465,"line_end":465,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":17882,"byte_end":17885,"line_start":466,"line_end":466,"column_start":1,"column_end":4}},{"value":"/ This struct is created by calling the `iter` method.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":17886,"byte_end":17942,"line_start":467,"line_end":467,"column_start":1,"column_end":57}}]},{"kind":"Struct","id":{"krate":0,"index":213},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":29333,"byte_end":29346,"line_start":37,"line_end":37,"column_start":12,"column_end":25},"name":"HistoryBuffer","qualname":"::histbuf::HistoryBuffer","value":"HistoryBuffer {  }","parent":null,"children":[{"krate":0,"index":216},{"krate":0,"index":218},{"krate":0,"index":219}],"decl_id":null,"docs":" A \"history buffer\", similar to a write-only ring buffer of fixed length.","sig":null,"attributes":[{"value":"/ A \"history buffer\", similar to a write-only ring buffer of fixed length.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":28320,"byte_end":28396,"line_start":7,"line_end":7,"column_start":1,"column_end":77}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":28397,"byte_end":28400,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ This buffer keeps a fixed number of elements.  On write, the oldest element","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":28401,"byte_end":28480,"line_start":9,"line_end":9,"column_start":1,"column_end":80}},{"value":"/ is overwritten. Thus, the buffer is useful to keep a history of values with","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":28481,"byte_end":28560,"line_start":10,"line_end":10,"column_start":1,"column_end":80}},{"value":"/ some desired depth, and for example calculate a rolling average.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":28561,"byte_end":28629,"line_start":11,"line_end":11,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":28630,"byte_end":28633,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":28634,"byte_end":28648,"line_start":13,"line_end":13,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":28649,"byte_end":28656,"line_start":14,"line_end":14,"column_start":1,"column_end":8}},{"value":"/ use heapless::HistoryBuffer;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":28657,"byte_end":28689,"line_start":15,"line_end":15,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":28690,"byte_end":28693,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ // Initialize a new buffer with 8 elements.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":28694,"byte_end":28741,"line_start":17,"line_end":17,"column_start":1,"column_end":48}},{"value":"/ let mut buf = HistoryBuffer::<_, 8>::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":28742,"byte_end":28789,"line_start":18,"line_end":18,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":28790,"byte_end":28793,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ // Starts with no data","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":28794,"byte_end":28820,"line_start":20,"line_end":20,"column_start":1,"column_end":27}},{"value":"/ assert_eq!(buf.recent(), None);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":28821,"byte_end":28856,"line_start":21,"line_end":21,"column_start":1,"column_end":36}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":28857,"byte_end":28860,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ buf.write(3);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":28861,"byte_end":28878,"line_start":23,"line_end":23,"column_start":1,"column_end":18}},{"value":"/ buf.write(5);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":28879,"byte_end":28896,"line_start":24,"line_end":24,"column_start":1,"column_end":18}},{"value":"/ buf.extend(&[4, 4]);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":28897,"byte_end":28921,"line_start":25,"line_end":25,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":28922,"byte_end":28925,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ // The most recent written element is a four.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":28926,"byte_end":28975,"line_start":27,"line_end":27,"column_start":1,"column_end":50}},{"value":"/ assert_eq!(buf.recent(), Some(&4));","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":28976,"byte_end":29015,"line_start":28,"line_end":28,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":29016,"byte_end":29019,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ // To access all elements in an unspecified order, use `as_slice()`.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":29020,"byte_end":29092,"line_start":30,"line_end":30,"column_start":1,"column_end":73}},{"value":"/ for el in buf.as_slice() { println!(\"{:?}\", el); }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":29093,"byte_end":29147,"line_start":31,"line_end":31,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":29148,"byte_end":29151,"line_start":32,"line_end":32,"column_start":1,"column_end":4}},{"value":"/ // Now we can prepare an average of all values, which comes out to 4.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":29152,"byte_end":29225,"line_start":33,"line_end":33,"column_start":1,"column_end":74}},{"value":"/ let avg = buf.as_slice().iter().sum::<usize>() / buf.len();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":29226,"byte_end":29289,"line_start":34,"line_end":34,"column_start":1,"column_end":64}},{"value":"/ assert_eq!(avg, 4);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":29290,"byte_end":29313,"line_start":35,"line_end":35,"column_start":1,"column_end":24}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":29314,"byte_end":29321,"line_start":36,"line_end":36,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":224},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":29947,"byte_end":29950,"line_start":60,"line_end":60,"column_start":18,"column_end":21},"name":"new","qualname":"<HistoryBuffer<T, N>>::new","value":"pub const fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new history buffer.","sig":null,"attributes":[{"value":"/ Constructs a new history buffer.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":29548,"byte_end":29584,"line_start":46,"line_end":46,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":29589,"byte_end":29592,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ The construction of a `HistoryBuffer` works in `const` contexts.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":29597,"byte_end":29665,"line_start":48,"line_end":48,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":29670,"byte_end":29673,"line_start":49,"line_end":49,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":29678,"byte_end":29692,"line_start":50,"line_end":50,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":29697,"byte_end":29700,"line_start":51,"line_end":51,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":29705,"byte_end":29712,"line_start":52,"line_end":52,"column_start":5,"column_end":12}},{"value":"/ use heapless::HistoryBuffer;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":29717,"byte_end":29749,"line_start":53,"line_end":53,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":29754,"byte_end":29757,"line_start":54,"line_end":54,"column_start":5,"column_end":8}},{"value":"/ // Allocate a 16-element buffer on the stack","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":29762,"byte_end":29810,"line_start":55,"line_end":55,"column_start":5,"column_end":53}},{"value":"/ let x: HistoryBuffer<u8, 16> = HistoryBuffer::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":29815,"byte_end":29871,"line_start":56,"line_end":56,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(x.len(), 0);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":29876,"byte_end":29903,"line_start":57,"line_end":57,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":29908,"byte_end":29915,"line_start":58,"line_end":58,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":29920,"byte_end":29929,"line_start":59,"line_end":59,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":226},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":30259,"byte_end":30264,"line_start":73,"line_end":73,"column_start":12,"column_end":17},"name":"clear","qualname":"<HistoryBuffer<T, N>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Clears the buffer, replacing every element with the default value of\n type `T`.\n","sig":null,"attributes":[{"value":"/ Clears the buffer, replacing every element with the default value of","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":30157,"byte_end":30229,"line_start":71,"line_end":71,"column_start":5,"column_end":77}},{"value":"/ type `T`.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":30234,"byte_end":30247,"line_start":72,"line_end":72,"column_start":5,"column_end":18}}]},{"kind":"Method","id":{"krate":0,"index":230},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":30799,"byte_end":30807,"line_start":95,"line_end":95,"column_start":12,"column_end":20},"name":"new_with","qualname":"<HistoryBuffer<T, N>>::new_with","value":"pub fn new_with(T) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new history buffer, where every element is the given value.","sig":null,"attributes":[{"value":"/ Constructs a new history buffer, where every element is the given value.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":30393,"byte_end":30469,"line_start":82,"line_end":82,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":30474,"byte_end":30477,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":30482,"byte_end":30496,"line_start":84,"line_end":84,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":30501,"byte_end":30504,"line_start":85,"line_end":85,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":30509,"byte_end":30516,"line_start":86,"line_end":86,"column_start":5,"column_end":12}},{"value":"/ use heapless::HistoryBuffer;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":30521,"byte_end":30553,"line_start":87,"line_end":87,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":30558,"byte_end":30561,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ // Allocate a 16-element buffer on the stack","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":30566,"byte_end":30614,"line_start":89,"line_end":89,"column_start":5,"column_end":53}},{"value":"/ let mut x: HistoryBuffer<u8, 16> = HistoryBuffer::new_with(4);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":30619,"byte_end":30685,"line_start":90,"line_end":90,"column_start":5,"column_end":71}},{"value":"/ // All elements are four","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":30690,"byte_end":30718,"line_start":91,"line_end":91,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(x.as_slice(), [4; 16]);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":30723,"byte_end":30761,"line_start":92,"line_end":92,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":30766,"byte_end":30773,"line_start":93,"line_end":93,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":30778,"byte_end":30787,"line_start":94,"line_end":94,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":232},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":31035,"byte_end":31045,"line_start":104,"line_end":104,"column_start":12,"column_end":22},"name":"clear_with","qualname":"<HistoryBuffer<T, N>>::clear_with","value":"pub fn clear_with(&mut Self, T)","parent":null,"children":[],"decl_id":null,"docs":" Clears the buffer, replacing every element with the given value.\n","sig":null,"attributes":[{"value":"/ Clears the buffer, replacing every element with the given value.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":30955,"byte_end":31023,"line_start":103,"line_end":103,"column_start":5,"column_end":73}}]},{"kind":"Method","id":{"krate":0,"index":236},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":31234,"byte_end":31237,"line_start":112,"line_end":112,"column_start":12,"column_end":15},"name":"len","qualname":"<HistoryBuffer<T, N>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the current fill level of the buffer.\n","sig":null,"attributes":[{"value":"/ Returns the current fill level of the buffer.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":31159,"byte_end":31208,"line_start":110,"line_end":110,"column_start":5,"column_end":54}},{"value":"inline","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":31213,"byte_end":31222,"line_start":111,"line_end":111,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":237},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":31485,"byte_end":31493,"line_start":123,"line_end":123,"column_start":12,"column_end":20},"name":"capacity","qualname":"<HistoryBuffer<T, N>>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the capacity of the buffer, which is the length of the\n underlying backing array.\n","sig":null,"attributes":[{"value":"/ Returns the capacity of the buffer, which is the length of the","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":31359,"byte_end":31425,"line_start":120,"line_end":120,"column_start":5,"column_end":71}},{"value":"/ underlying backing array.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":31430,"byte_end":31459,"line_start":121,"line_end":121,"column_start":5,"column_end":34}},{"value":"inline","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":31464,"byte_end":31473,"line_start":122,"line_end":122,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":238},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":31611,"byte_end":31616,"line_start":128,"line_end":128,"column_start":12,"column_end":17},"name":"write","qualname":"<HistoryBuffer<T, N>>::write","value":"pub fn write(&mut Self, T)","parent":null,"children":[],"decl_id":null,"docs":" Writes an element to the buffer, overwriting the oldest value.\n","sig":null,"attributes":[{"value":"/ Writes an element to the buffer, overwriting the oldest value.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":31533,"byte_end":31599,"line_start":127,"line_end":127,"column_start":5,"column_end":71}}]},{"kind":"Method","id":{"krate":0,"index":239},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":32216,"byte_end":32233,"line_start":146,"line_end":146,"column_start":12,"column_end":29},"name":"extend_from_slice","qualname":"<HistoryBuffer<T, N>>::extend_from_slice","value":"pub fn extend_from_slice(&mut Self, &[T]) where T: Clone","parent":null,"children":[],"decl_id":null,"docs":" Clones and writes all elements in a slice to the buffer.","sig":null,"attributes":[{"value":"/ Clones and writes all elements in a slice to the buffer.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":32019,"byte_end":32079,"line_start":142,"line_end":142,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":32084,"byte_end":32087,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ If the slice is longer than the buffer, only the last `self.len()`","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":32092,"byte_end":32162,"line_start":144,"line_end":144,"column_start":5,"column_end":75}},{"value":"/ elements will actually be stored.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":32167,"byte_end":32204,"line_start":145,"line_end":145,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":240},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":32703,"byte_end":32709,"line_start":167,"line_end":167,"column_start":12,"column_end":18},"name":"recent","qualname":"<HistoryBuffer<T, N>>::recent","value":"pub fn recent(&Self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the most recently written value.","sig":null,"attributes":[{"value":"/ Returns a reference to the most recently written value.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":32379,"byte_end":32438,"line_start":155,"line_end":155,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":32443,"byte_end":32446,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":32451,"byte_end":32465,"line_start":157,"line_end":157,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":32470,"byte_end":32473,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":32478,"byte_end":32485,"line_start":159,"line_end":159,"column_start":5,"column_end":12}},{"value":"/ use heapless::HistoryBuffer;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":32490,"byte_end":32522,"line_start":160,"line_end":160,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":32527,"byte_end":32530,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ let mut x: HistoryBuffer<u8, 16> = HistoryBuffer::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":32535,"byte_end":32595,"line_start":162,"line_end":162,"column_start":5,"column_end":65}},{"value":"/ x.write(4);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":32600,"byte_end":32615,"line_start":163,"line_end":163,"column_start":5,"column_end":20}},{"value":"/ x.write(10);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":32620,"byte_end":32636,"line_start":164,"line_end":164,"column_start":5,"column_end":21}},{"value":"/ assert_eq!(x.recent(), Some(&10));","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":32641,"byte_end":32679,"line_start":165,"line_end":165,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":32684,"byte_end":32691,"line_start":166,"line_end":166,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":241},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":33189,"byte_end":33197,"line_start":181,"line_end":181,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<HistoryBuffer<T, N>>::as_slice","value":"pub fn as_slice(&Self) -> &[T]","parent":null,"children":[],"decl_id":null,"docs":" Returns the array slice backing the buffer, without keeping track\n of the write position. Therefore, the element order is unspecified.\n","sig":null,"attributes":[{"value":"/ Returns the array slice backing the buffer, without keeping track","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":33032,"byte_end":33101,"line_start":179,"line_end":179,"column_start":5,"column_end":74}},{"value":"/ of the write position. Therefore, the element order is unspecified.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":33106,"byte_end":33177,"line_start":180,"line_end":180,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":242},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":33783,"byte_end":33797,"line_start":200,"line_end":200,"column_start":12,"column_end":26},"name":"oldest_ordered","qualname":"<HistoryBuffer<T, N>>::oldest_ordered","value":"pub fn oldest_ordered<'a>(&'a Self) -> OldestOrdered","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator for iterating over the buffer from oldest to newest.","sig":null,"attributes":[{"value":"/ Returns an iterator for iterating over the buffer from oldest to newest.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":33311,"byte_end":33387,"line_start":185,"line_end":185,"column_start":5,"column_end":81}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":33392,"byte_end":33395,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":33400,"byte_end":33414,"line_start":187,"line_end":187,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":33419,"byte_end":33422,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":33427,"byte_end":33434,"line_start":189,"line_end":189,"column_start":5,"column_end":12}},{"value":"/ use heapless::HistoryBuffer;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":33439,"byte_end":33471,"line_start":190,"line_end":190,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":33476,"byte_end":33479,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ let mut buffer: HistoryBuffer<u8, 6> = HistoryBuffer::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":33484,"byte_end":33548,"line_start":192,"line_end":192,"column_start":5,"column_end":69}},{"value":"/ buffer.extend([0, 0, 0, 1, 2, 3, 4, 5, 6]);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":33553,"byte_end":33600,"line_start":193,"line_end":193,"column_start":5,"column_end":52}},{"value":"/ let expected = [1, 2, 3, 4, 5, 6];","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":33605,"byte_end":33643,"line_start":194,"line_end":194,"column_start":5,"column_end":43}},{"value":"/ for (x, y) in buffer.oldest_ordered().zip(expected.iter()) {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":33648,"byte_end":33712,"line_start":195,"line_end":195,"column_start":5,"column_end":69}},{"value":"/     assert_eq!(x, y)","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":33717,"byte_end":33741,"line_start":196,"line_end":196,"column_start":5,"column_end":29}},{"value":"/ }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":33746,"byte_end":33751,"line_start":197,"line_end":197,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":33756,"byte_end":33759,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":33764,"byte_end":33771,"line_start":199,"line_end":199,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":2245},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":35681,"byte_end":35694,"line_start":284,"line_end":284,"column_start":12,"column_end":25},"name":"OldestOrdered","qualname":"::histbuf::OldestOrdered","value":"OldestOrdered {  }","parent":null,"children":[{"krate":0,"index":2249},{"krate":0,"index":2250},{"krate":0,"index":2251}],"decl_id":null,"docs":" An iterator on the underlying buffer ordered from oldest data to newest\n","sig":null,"attributes":[{"value":"/ An iterator on the underlying buffer ordered from oldest data to newest","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":35577,"byte_end":35652,"line_start":282,"line_end":282,"column_start":1,"column_end":76}}]},{"kind":"Type","id":{"krate":0,"index":324},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":41399,"byte_end":41410,"line_start":48,"line_end":48,"column_start":10,"column_end":21},"name":"FnvIndexMap","qualname":"::indexmap::FnvIndexMap","value":"IndexMap<K, V, BuildHasherDefault<FnvHasher>, >","parent":null,"children":[],"decl_id":null,"docs":" A [`heapless::IndexMap`](./struct.IndexMap.html) using the default FNV hasher","sig":null,"attributes":[{"value":"/ A [`heapless::IndexMap`](./struct.IndexMap.html) using the default FNV hasher","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":39739,"byte_end":39820,"line_start":7,"line_end":7,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":39821,"byte_end":39824,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ A list of all Methods and Traits available for `FnvIndexMap` can be found in","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":39825,"byte_end":39905,"line_start":9,"line_end":9,"column_start":1,"column_end":81}},{"value":"/ the [`heapless::IndexMap`](./struct.IndexMap.html) documentation.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":39906,"byte_end":39975,"line_start":10,"line_end":10,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":39976,"byte_end":39979,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":39980,"byte_end":39994,"line_start":12,"line_end":12,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":39995,"byte_end":40002,"line_start":13,"line_end":13,"column_start":1,"column_end":8}},{"value":"/ use heapless::FnvIndexMap;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":40003,"byte_end":40033,"line_start":14,"line_end":14,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":40034,"byte_end":40037,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ // A hash map with a capacity of 16 key-value pairs allocated on the stack","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":40038,"byte_end":40116,"line_start":16,"line_end":16,"column_start":1,"column_end":79}},{"value":"/ let mut book_reviews = FnvIndexMap::<_, _, 16>::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":40117,"byte_end":40175,"line_start":17,"line_end":17,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":40176,"byte_end":40179,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ // review some books.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":40180,"byte_end":40205,"line_start":19,"line_end":19,"column_start":1,"column_end":26}},{"value":"/ book_reviews.insert(\"Adventures of Huckleberry Finn\",    \"My favorite book.\").unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":40206,"byte_end":40297,"line_start":20,"line_end":20,"column_start":1,"column_end":92}},{"value":"/ book_reviews.insert(\"Grimms' Fairy Tales\",               \"Masterpiece.\").unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":40298,"byte_end":40384,"line_start":21,"line_end":21,"column_start":1,"column_end":87}},{"value":"/ book_reviews.insert(\"Pride and Prejudice\",               \"Very enjoyable.\").unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":40385,"byte_end":40474,"line_start":22,"line_end":22,"column_start":1,"column_end":90}},{"value":"/ book_reviews.insert(\"The Adventures of Sherlock Holmes\", \"Eye lyked it alot.\").unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":40475,"byte_end":40567,"line_start":23,"line_end":23,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":40568,"byte_end":40571,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ // check for a specific one.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":40572,"byte_end":40604,"line_start":25,"line_end":25,"column_start":1,"column_end":33}},{"value":"/ if !book_reviews.contains_key(\"Les Misérables\") {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":40605,"byte_end":40659,"line_start":26,"line_end":26,"column_start":1,"column_end":54}},{"value":"/     println!(\"We've got {} reviews, but Les Misérables ain't one.\",","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":40660,"byte_end":40732,"line_start":27,"line_end":27,"column_start":1,"column_end":72}},{"value":"/              book_reviews.len());","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":40733,"byte_end":40770,"line_start":28,"line_end":28,"column_start":1,"column_end":38}},{"value":"/ }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":40771,"byte_end":40776,"line_start":29,"line_end":29,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":40777,"byte_end":40780,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ // oops, this review has a lot of spelling mistakes, let's delete it.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":40781,"byte_end":40854,"line_start":31,"line_end":31,"column_start":1,"column_end":74}},{"value":"/ book_reviews.remove(\"The Adventures of Sherlock Holmes\");","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":40855,"byte_end":40916,"line_start":32,"line_end":32,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":40917,"byte_end":40920,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ // look up the values associated with some keys.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":40921,"byte_end":40973,"line_start":34,"line_end":34,"column_start":1,"column_end":53}},{"value":"/ let to_find = [\"Pride and Prejudice\", \"Alice's Adventure in Wonderland\"];","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":40974,"byte_end":41051,"line_start":35,"line_end":35,"column_start":1,"column_end":78}},{"value":"/ for book in &to_find {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":41052,"byte_end":41078,"line_start":36,"line_end":36,"column_start":1,"column_end":27}},{"value":"/     match book_reviews.get(book) {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":41079,"byte_end":41117,"line_start":37,"line_end":37,"column_start":1,"column_end":39}},{"value":"/         Some(review) => println!(\"{}: {}\", book, review),","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":41118,"byte_end":41179,"line_start":38,"line_end":38,"column_start":1,"column_end":62}},{"value":"/         None => println!(\"{} is unreviewed.\", book)","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":41180,"byte_end":41235,"line_start":39,"line_end":39,"column_start":1,"column_end":56}},{"value":"/     }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":41236,"byte_end":41245,"line_start":40,"line_end":40,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":41246,"byte_end":41251,"line_start":41,"line_end":41,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":41252,"byte_end":41255,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ // iterate over everything.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":41256,"byte_end":41287,"line_start":43,"line_end":43,"column_start":1,"column_end":32}},{"value":"/ for (book, review) in &book_reviews {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":41288,"byte_end":41329,"line_start":44,"line_end":44,"column_start":1,"column_end":42}},{"value":"/     println!(\"{}: \\\"{}\\\"\", book, review);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":41330,"byte_end":41375,"line_start":45,"line_end":45,"column_start":1,"column_end":46}},{"value":"/ }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":41376,"byte_end":41381,"line_start":46,"line_end":46,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":41382,"byte_end":41389,"line_start":47,"line_end":47,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":2272},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":41847,"byte_end":41853,"line_start":65,"line_end":65,"column_start":12,"column_end":18},"name":"Bucket","qualname":"::indexmap::Bucket","value":"Bucket {  }","parent":null,"children":[{"krate":0,"index":2275},{"krate":0,"index":2276},{"krate":0,"index":2277}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":2282},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":41972,"byte_end":41975,"line_start":73,"line_end":73,"column_start":12,"column_end":15},"name":"Pos","qualname":"::indexmap::Pos","value":"Pos {  }","parent":null,"children":[{"krate":0,"index":2283}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":376},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":51618,"byte_end":51626,"line_start":363,"line_end":363,"column_start":12,"column_end":20},"name":"IndexMap","qualname":"::indexmap::IndexMap","value":"IndexMap {  }","parent":null,"children":[{"krate":0,"index":381},{"krate":0,"index":382}],"decl_id":null,"docs":" Fixed capacity [`IndexMap`](https://docs.rs/indexmap/1/indexmap/map/struct.IndexMap.html)","sig":null,"attributes":[{"value":"/ Fixed capacity [`IndexMap`](https://docs.rs/indexmap/1/indexmap/map/struct.IndexMap.html)","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":49689,"byte_end":49782,"line_start":316,"line_end":316,"column_start":1,"column_end":94}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":49783,"byte_end":49786,"line_start":317,"line_end":317,"column_start":1,"column_end":4}},{"value":"/ Note that you cannot use `IndexMap` directly, since it is generic around the hashing algorithm","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":49787,"byte_end":49885,"line_start":318,"line_end":318,"column_start":1,"column_end":99}},{"value":"/ in use. Pick a concrete instantiation like [`FnvIndexMap`](./type.FnvIndexMap.html) instead","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":49886,"byte_end":49981,"line_start":319,"line_end":319,"column_start":1,"column_end":96}},{"value":"/ or create your own.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":49982,"byte_end":50005,"line_start":320,"line_end":320,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":50006,"byte_end":50009,"line_start":321,"line_end":321,"column_start":1,"column_end":4}},{"value":"/ Note that the capacity of the `IndexMap` must be a power of 2.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":50010,"byte_end":50076,"line_start":322,"line_end":322,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":50077,"byte_end":50080,"line_start":323,"line_end":323,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":50081,"byte_end":50095,"line_start":324,"line_end":324,"column_start":1,"column_end":15}},{"value":"/ Since `IndexMap` cannot be used directly, we're using its `FnvIndexMap` instantiation","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":50096,"byte_end":50185,"line_start":325,"line_end":325,"column_start":1,"column_end":90}},{"value":"/ for this example.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":50186,"byte_end":50207,"line_start":326,"line_end":326,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":50208,"byte_end":50211,"line_start":327,"line_end":327,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":50212,"byte_end":50219,"line_start":328,"line_end":328,"column_start":1,"column_end":8}},{"value":"/ use heapless::FnvIndexMap;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":50220,"byte_end":50250,"line_start":329,"line_end":329,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":50251,"byte_end":50254,"line_start":330,"line_end":330,"column_start":1,"column_end":4}},{"value":"/ // A hash map with a capacity of 16 key-value pairs allocated on the stack","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":50255,"byte_end":50333,"line_start":331,"line_end":331,"column_start":1,"column_end":79}},{"value":"/ let mut book_reviews = FnvIndexMap::<_, _, 16>::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":50334,"byte_end":50392,"line_start":332,"line_end":332,"column_start":1,"column_end":59}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":50393,"byte_end":50396,"line_start":333,"line_end":333,"column_start":1,"column_end":4}},{"value":"/ // review some books.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":50397,"byte_end":50422,"line_start":334,"line_end":334,"column_start":1,"column_end":26}},{"value":"/ book_reviews.insert(\"Adventures of Huckleberry Finn\",    \"My favorite book.\").unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":50423,"byte_end":50514,"line_start":335,"line_end":335,"column_start":1,"column_end":92}},{"value":"/ book_reviews.insert(\"Grimms' Fairy Tales\",               \"Masterpiece.\").unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":50515,"byte_end":50601,"line_start":336,"line_end":336,"column_start":1,"column_end":87}},{"value":"/ book_reviews.insert(\"Pride and Prejudice\",               \"Very enjoyable.\").unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":50602,"byte_end":50691,"line_start":337,"line_end":337,"column_start":1,"column_end":90}},{"value":"/ book_reviews.insert(\"The Adventures of Sherlock Holmes\", \"Eye lyked it alot.\").unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":50692,"byte_end":50784,"line_start":338,"line_end":338,"column_start":1,"column_end":93}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":50785,"byte_end":50788,"line_start":339,"line_end":339,"column_start":1,"column_end":4}},{"value":"/ // check for a specific one.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":50789,"byte_end":50821,"line_start":340,"line_end":340,"column_start":1,"column_end":33}},{"value":"/ if !book_reviews.contains_key(\"Les Misérables\") {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":50822,"byte_end":50876,"line_start":341,"line_end":341,"column_start":1,"column_end":54}},{"value":"/     println!(\"We've got {} reviews, but Les Misérables ain't one.\",","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":50877,"byte_end":50949,"line_start":342,"line_end":342,"column_start":1,"column_end":72}},{"value":"/              book_reviews.len());","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":50950,"byte_end":50987,"line_start":343,"line_end":343,"column_start":1,"column_end":38}},{"value":"/ }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":50988,"byte_end":50993,"line_start":344,"line_end":344,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":50994,"byte_end":50997,"line_start":345,"line_end":345,"column_start":1,"column_end":4}},{"value":"/ // oops, this review has a lot of spelling mistakes, let's delete it.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":50998,"byte_end":51071,"line_start":346,"line_end":346,"column_start":1,"column_end":74}},{"value":"/ book_reviews.remove(\"The Adventures of Sherlock Holmes\");","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":51072,"byte_end":51133,"line_start":347,"line_end":347,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":51134,"byte_end":51137,"line_start":348,"line_end":348,"column_start":1,"column_end":4}},{"value":"/ // look up the values associated with some keys.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":51138,"byte_end":51190,"line_start":349,"line_end":349,"column_start":1,"column_end":53}},{"value":"/ let to_find = [\"Pride and Prejudice\", \"Alice's Adventure in Wonderland\"];","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":51191,"byte_end":51268,"line_start":350,"line_end":350,"column_start":1,"column_end":78}},{"value":"/ for book in &to_find {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":51269,"byte_end":51295,"line_start":351,"line_end":351,"column_start":1,"column_end":27}},{"value":"/     match book_reviews.get(book) {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":51296,"byte_end":51334,"line_start":352,"line_end":352,"column_start":1,"column_end":39}},{"value":"/         Some(review) => println!(\"{}: {}\", book, review),","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":51335,"byte_end":51396,"line_start":353,"line_end":353,"column_start":1,"column_end":62}},{"value":"/         None => println!(\"{} is unreviewed.\", book)","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":51397,"byte_end":51452,"line_start":354,"line_end":354,"column_start":1,"column_end":56}},{"value":"/     }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":51453,"byte_end":51462,"line_start":355,"line_end":355,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":51463,"byte_end":51468,"line_start":356,"line_end":356,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":51469,"byte_end":51472,"line_start":357,"line_end":357,"column_start":1,"column_end":4}},{"value":"/ // iterate over everything.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":51473,"byte_end":51504,"line_start":358,"line_end":358,"column_start":1,"column_end":32}},{"value":"/ for (book, review) in &book_reviews {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":51505,"byte_end":51546,"line_start":359,"line_end":359,"column_start":1,"column_end":42}},{"value":"/     println!(\"{}: \\\"{}\\\"\", book, review);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":51547,"byte_end":51592,"line_start":360,"line_end":360,"column_start":1,"column_end":46}},{"value":"/ }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":51593,"byte_end":51598,"line_start":361,"line_end":361,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":51599,"byte_end":51606,"line_start":362,"line_end":362,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":388},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":51833,"byte_end":51836,"line_start":370,"line_end":370,"column_start":18,"column_end":21},"name":"new","qualname":"<IndexMap<K, V, BuildHasherDefault<S>, N>>::new","value":"pub const fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `IndexMap`.\n","sig":null,"attributes":[{"value":"/ Creates an empty `IndexMap`.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":51783,"byte_end":51815,"line_start":369,"line_end":369,"column_start":5,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":394},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":52274,"byte_end":52282,"line_start":389,"line_end":389,"column_start":12,"column_end":20},"name":"capacity","qualname":"<IndexMap<K, V, S, N>>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements the map can hold\n","sig":null,"attributes":[{"value":"/ Returns the number of elements the map can hold","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":52211,"byte_end":52262,"line_start":388,"line_end":388,"column_start":5,"column_end":56}}]},{"kind":"Method","id":{"krate":0,"index":395},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":52720,"byte_end":52724,"line_start":407,"line_end":407,"column_start":12,"column_end":16},"name":"keys","qualname":"<IndexMap<K, V, S, N>>::keys","value":"pub fn keys(&Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the keys of the map, in their order","sig":null,"attributes":[{"value":"/ Return an iterator over the keys of the map, in their order","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":52322,"byte_end":52385,"line_start":393,"line_end":393,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":52390,"byte_end":52393,"line_start":394,"line_end":394,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":52398,"byte_end":52405,"line_start":395,"line_end":395,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexMap;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":52410,"byte_end":52440,"line_start":396,"line_end":396,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":52445,"byte_end":52448,"line_start":397,"line_end":397,"column_start":5,"column_end":8}},{"value":"/ let mut map = FnvIndexMap::<_, _, 16>::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":52453,"byte_end":52502,"line_start":398,"line_end":398,"column_start":5,"column_end":54}},{"value":"/ map.insert(\"a\", 1).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":52507,"byte_end":52539,"line_start":399,"line_end":399,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"b\", 2).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":52544,"byte_end":52576,"line_start":400,"line_end":400,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"c\", 3).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":52581,"byte_end":52613,"line_start":401,"line_end":401,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":52618,"byte_end":52621,"line_start":402,"line_end":402,"column_start":5,"column_end":8}},{"value":"/ for key in map.keys() {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":52626,"byte_end":52653,"line_start":403,"line_end":403,"column_start":5,"column_end":32}},{"value":"/     println!(\"{}\", key);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":52658,"byte_end":52686,"line_start":404,"line_end":404,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":52691,"byte_end":52696,"line_start":405,"line_end":405,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":52701,"byte_end":52708,"line_start":406,"line_end":406,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":398},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":53234,"byte_end":53240,"line_start":425,"line_end":425,"column_start":12,"column_end":18},"name":"values","qualname":"<IndexMap<K, V, S, N>>::values","value":"pub fn values(&Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the values of the map, in their order","sig":null,"attributes":[{"value":"/ Return an iterator over the values of the map, in their order","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":52832,"byte_end":52897,"line_start":411,"line_end":411,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":52902,"byte_end":52905,"line_start":412,"line_end":412,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":52910,"byte_end":52917,"line_start":413,"line_end":413,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexMap;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":52922,"byte_end":52952,"line_start":414,"line_end":414,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":52957,"byte_end":52960,"line_start":415,"line_end":415,"column_start":5,"column_end":8}},{"value":"/ let mut map = FnvIndexMap::<_, _, 16>::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":52965,"byte_end":53014,"line_start":416,"line_end":416,"column_start":5,"column_end":54}},{"value":"/ map.insert(\"a\", 1).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":53019,"byte_end":53051,"line_start":417,"line_end":417,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"b\", 2).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":53056,"byte_end":53088,"line_start":418,"line_end":418,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"c\", 3).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":53093,"byte_end":53125,"line_start":419,"line_end":419,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":53130,"byte_end":53133,"line_start":420,"line_end":420,"column_start":5,"column_end":8}},{"value":"/ for val in map.values() {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":53138,"byte_end":53167,"line_start":421,"line_end":421,"column_start":5,"column_end":34}},{"value":"/     println!(\"{}\", val);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":53172,"byte_end":53200,"line_start":422,"line_end":422,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":53205,"byte_end":53210,"line_start":423,"line_end":423,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":53215,"byte_end":53222,"line_start":424,"line_end":424,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":401},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":53858,"byte_end":53868,"line_start":447,"line_end":447,"column_start":12,"column_end":22},"name":"values_mut","qualname":"<IndexMap<K, V, S, N>>::values_mut","value":"pub fn values_mut(&mut Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over mutable references to the the values of the map, in their order","sig":null,"attributes":[{"value":"/ Return an iterator over mutable references to the the values of the map, in their order","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":53350,"byte_end":53441,"line_start":429,"line_end":429,"column_start":5,"column_end":96}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":53446,"byte_end":53449,"line_start":430,"line_end":430,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":53454,"byte_end":53461,"line_start":431,"line_end":431,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexMap;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":53466,"byte_end":53496,"line_start":432,"line_end":432,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":53501,"byte_end":53504,"line_start":433,"line_end":433,"column_start":5,"column_end":8}},{"value":"/ let mut map = FnvIndexMap::<_, _, 16>::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":53509,"byte_end":53558,"line_start":434,"line_end":434,"column_start":5,"column_end":54}},{"value":"/ map.insert(\"a\", 1).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":53563,"byte_end":53595,"line_start":435,"line_end":435,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"b\", 2).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":53600,"byte_end":53632,"line_start":436,"line_end":436,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"c\", 3).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":53637,"byte_end":53669,"line_start":437,"line_end":437,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":53674,"byte_end":53677,"line_start":438,"line_end":438,"column_start":5,"column_end":8}},{"value":"/ for val in map.values_mut() {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":53682,"byte_end":53715,"line_start":439,"line_end":439,"column_start":5,"column_end":38}},{"value":"/     *val += 10;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":53720,"byte_end":53739,"line_start":440,"line_end":440,"column_start":5,"column_end":24}},{"value":"/ }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":53744,"byte_end":53749,"line_start":441,"line_end":441,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":53754,"byte_end":53757,"line_start":442,"line_end":442,"column_start":5,"column_end":8}},{"value":"/ for val in map.values() {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":53762,"byte_end":53791,"line_start":443,"line_end":443,"column_start":5,"column_end":34}},{"value":"/     println!(\"{}\", val);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":53796,"byte_end":53824,"line_start":444,"line_end":444,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":53829,"byte_end":53834,"line_start":445,"line_end":445,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":53839,"byte_end":53846,"line_start":446,"line_end":446,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":404},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":54428,"byte_end":54432,"line_start":465,"line_end":465,"column_start":12,"column_end":16},"name":"iter","qualname":"<IndexMap<K, V, S, N>>::iter","value":"pub fn iter(&Self) -> Iter<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the key-value pairs of the map, in their order","sig":null,"attributes":[{"value":"/ Return an iterator over the key-value pairs of the map, in their order","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":53994,"byte_end":54068,"line_start":451,"line_end":451,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":54073,"byte_end":54076,"line_start":452,"line_end":452,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":54081,"byte_end":54088,"line_start":453,"line_end":453,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexMap;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":54093,"byte_end":54123,"line_start":454,"line_end":454,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":54128,"byte_end":54131,"line_start":455,"line_end":455,"column_start":5,"column_end":8}},{"value":"/ let mut map = FnvIndexMap::<_, _, 16>::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":54136,"byte_end":54185,"line_start":456,"line_end":456,"column_start":5,"column_end":54}},{"value":"/ map.insert(\"a\", 1).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":54190,"byte_end":54222,"line_start":457,"line_end":457,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"b\", 2).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":54227,"byte_end":54259,"line_start":458,"line_end":458,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"c\", 3).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":54264,"byte_end":54296,"line_start":459,"line_end":459,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":54301,"byte_end":54304,"line_start":460,"line_end":460,"column_start":5,"column_end":8}},{"value":"/ for (key, val) in map.iter() {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":54309,"byte_end":54343,"line_start":461,"line_end":461,"column_start":5,"column_end":39}},{"value":"/     println!(\"key: {} val: {}\", key, val);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":54348,"byte_end":54394,"line_start":462,"line_end":462,"column_start":5,"column_end":51}},{"value":"/ }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":54399,"byte_end":54404,"line_start":463,"line_end":463,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":54409,"byte_end":54416,"line_start":464,"line_end":464,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":405},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":55049,"byte_end":55057,"line_start":489,"line_end":489,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<IndexMap<K, V, S, N>>::iter_mut","value":"pub fn iter_mut(&mut Self) -> IterMut<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the key-value pairs of the map, in their order","sig":null,"attributes":[{"value":"/ Return an iterator over the key-value pairs of the map, in their order","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":54540,"byte_end":54614,"line_start":471,"line_end":471,"column_start":5,"column_end":79}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":54619,"byte_end":54622,"line_start":472,"line_end":472,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":54627,"byte_end":54634,"line_start":473,"line_end":473,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexMap;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":54639,"byte_end":54669,"line_start":474,"line_end":474,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":54674,"byte_end":54677,"line_start":475,"line_end":475,"column_start":5,"column_end":8}},{"value":"/ let mut map = FnvIndexMap::<_, _, 16>::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":54682,"byte_end":54731,"line_start":476,"line_end":476,"column_start":5,"column_end":54}},{"value":"/ map.insert(\"a\", 1).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":54736,"byte_end":54768,"line_start":477,"line_end":477,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"b\", 2).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":54773,"byte_end":54805,"line_start":478,"line_end":478,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"c\", 3).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":54810,"byte_end":54842,"line_start":479,"line_end":479,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":54847,"byte_end":54850,"line_start":480,"line_end":480,"column_start":5,"column_end":8}},{"value":"/ for (_, val) in map.iter_mut() {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":54855,"byte_end":54891,"line_start":481,"line_end":481,"column_start":5,"column_end":41}},{"value":"/     *val = 2;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":54896,"byte_end":54913,"line_start":482,"line_end":482,"column_start":5,"column_end":22}},{"value":"/ }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":54918,"byte_end":54923,"line_start":483,"line_end":483,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":54928,"byte_end":54931,"line_start":484,"line_end":484,"column_start":5,"column_end":8}},{"value":"/ for (key, val) in &map {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":54936,"byte_end":54964,"line_start":485,"line_end":485,"column_start":5,"column_end":33}},{"value":"/     println!(\"key: {} val: {}\", key, val);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":54969,"byte_end":55015,"line_start":486,"line_end":486,"column_start":5,"column_end":51}},{"value":"/ }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":55020,"byte_end":55025,"line_start":487,"line_end":487,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":55030,"byte_end":55037,"line_start":488,"line_end":488,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":406},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":55586,"byte_end":55589,"line_start":510,"line_end":510,"column_start":12,"column_end":15},"name":"len","qualname":"<IndexMap<K, V, S, N>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Return the number of key-value pairs in the map.","sig":null,"attributes":[{"value":"/ Return the number of key-value pairs in the map.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":55253,"byte_end":55305,"line_start":498,"line_end":498,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":55310,"byte_end":55313,"line_start":499,"line_end":499,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":55318,"byte_end":55348,"line_start":500,"line_end":500,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":55353,"byte_end":55356,"line_start":501,"line_end":501,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":55361,"byte_end":55368,"line_start":502,"line_end":502,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexMap;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":55373,"byte_end":55403,"line_start":503,"line_end":503,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":55408,"byte_end":55411,"line_start":504,"line_end":504,"column_start":5,"column_end":8}},{"value":"/ let mut a = FnvIndexMap::<_, _, 16>::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":55416,"byte_end":55463,"line_start":505,"line_end":505,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(a.len(), 0);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":55468,"byte_end":55495,"line_start":506,"line_end":506,"column_start":5,"column_end":32}},{"value":"/ a.insert(1, \"a\").unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":55500,"byte_end":55530,"line_start":507,"line_end":507,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(a.len(), 1);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":55535,"byte_end":55562,"line_start":508,"line_end":508,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":55567,"byte_end":55574,"line_start":509,"line_end":509,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":407},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":55971,"byte_end":55979,"line_start":526,"line_end":526,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<IndexMap<K, V, S, N>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the map contains no elements.","sig":null,"attributes":[{"value":"/ Returns true if the map contains no elements.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":55651,"byte_end":55700,"line_start":514,"line_end":514,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":55705,"byte_end":55708,"line_start":515,"line_end":515,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":55713,"byte_end":55743,"line_start":516,"line_end":516,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":55748,"byte_end":55751,"line_start":517,"line_end":517,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":55756,"byte_end":55763,"line_start":518,"line_end":518,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexMap;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":55768,"byte_end":55798,"line_start":519,"line_end":519,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":55803,"byte_end":55806,"line_start":520,"line_end":520,"column_start":5,"column_end":8}},{"value":"/ let mut a = FnvIndexMap::<_, _, 16>::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":55811,"byte_end":55858,"line_start":521,"line_end":521,"column_start":5,"column_end":52}},{"value":"/ assert!(a.is_empty());","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":55863,"byte_end":55889,"line_start":522,"line_end":522,"column_start":5,"column_end":31}},{"value":"/ a.insert(1, \"a\");","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":55894,"byte_end":55915,"line_start":523,"line_end":523,"column_start":5,"column_end":26}},{"value":"/ assert!(!a.is_empty());","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":55920,"byte_end":55947,"line_start":524,"line_end":524,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":55952,"byte_end":55959,"line_start":525,"line_end":525,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":408},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":56363,"byte_end":56368,"line_start":542,"line_end":542,"column_start":12,"column_end":17},"name":"clear","qualname":"<IndexMap<K, V, S, N>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Remove all key-value pairs in the map, while preserving its capacity.","sig":null,"attributes":[{"value":"/ Remove all key-value pairs in the map, while preserving its capacity.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":56032,"byte_end":56105,"line_start":530,"line_end":530,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":56110,"byte_end":56113,"line_start":531,"line_end":531,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(n)** time.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":56118,"byte_end":56148,"line_start":532,"line_end":532,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":56153,"byte_end":56156,"line_start":533,"line_end":533,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":56161,"byte_end":56168,"line_start":534,"line_end":534,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexMap;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":56173,"byte_end":56203,"line_start":535,"line_end":535,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":56208,"byte_end":56211,"line_start":536,"line_end":536,"column_start":5,"column_end":8}},{"value":"/ let mut a = FnvIndexMap::<_, _, 16>::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":56216,"byte_end":56263,"line_start":537,"line_end":537,"column_start":5,"column_end":52}},{"value":"/ a.insert(1, \"a\");","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":56268,"byte_end":56289,"line_start":538,"line_end":538,"column_start":5,"column_end":26}},{"value":"/ a.clear();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":56294,"byte_end":56308,"line_start":539,"line_end":539,"column_start":5,"column_end":19}},{"value":"/ assert!(a.is_empty());","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":56313,"byte_end":56339,"line_start":540,"line_end":540,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":56344,"byte_end":56351,"line_start":541,"line_end":541,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":409},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":57048,"byte_end":57051,"line_start":564,"line_end":564,"column_start":12,"column_end":15},"name":"get","qualname":"<IndexMap<K, V, S, N>>::get","value":"pub fn get<Q>(&Self, &Q) -> Option<&V> where K: Borrow<Q>, Q: ?Sized + Hash +\nEq","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the value corresponding to the key.","sig":null,"attributes":[{"value":"/ Returns a reference to the value corresponding to the key.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":56513,"byte_end":56575,"line_start":549,"line_end":549,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":56580,"byte_end":56583,"line_start":550,"line_end":550,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but `Hash` and `Eq` on the borrowed","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":56588,"byte_end":56683,"line_start":551,"line_end":551,"column_start":5,"column_end":100}},{"value":"/ form *must* match those for the key type.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":56688,"byte_end":56733,"line_start":552,"line_end":552,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":56738,"byte_end":56741,"line_start":553,"line_end":553,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":56746,"byte_end":56786,"line_start":554,"line_end":554,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":56791,"byte_end":56794,"line_start":555,"line_end":555,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":56799,"byte_end":56806,"line_start":556,"line_end":556,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexMap;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":56811,"byte_end":56841,"line_start":557,"line_end":557,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":56846,"byte_end":56849,"line_start":558,"line_end":558,"column_start":5,"column_end":8}},{"value":"/ let mut map = FnvIndexMap::<_, _, 16>::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":56854,"byte_end":56903,"line_start":559,"line_end":559,"column_start":5,"column_end":54}},{"value":"/ map.insert(1, \"a\").unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":56908,"byte_end":56940,"line_start":560,"line_end":560,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(map.get(&1), Some(&\"a\"));","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":56945,"byte_end":56985,"line_start":561,"line_end":561,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(map.get(&2), None);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":56990,"byte_end":57024,"line_start":562,"line_end":562,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":57029,"byte_end":57036,"line_start":563,"line_end":563,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":412},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":57855,"byte_end":57867,"line_start":590,"line_end":590,"column_start":12,"column_end":24},"name":"contains_key","qualname":"<IndexMap<K, V, S, N>>::contains_key","value":"pub fn contains_key<Q>(&Self, &Q) -> bool where K: Borrow<Q>, Q: ?Sized + Eq +\nHash","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the map contains a value for the specified key.","sig":null,"attributes":[{"value":"/ Returns true if the map contains a value for the specified key.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":57276,"byte_end":57343,"line_start":573,"line_end":573,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":57348,"byte_end":57351,"line_start":574,"line_end":574,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but `Hash` and `Eq` on the borrowed","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":57356,"byte_end":57451,"line_start":575,"line_end":575,"column_start":5,"column_end":100}},{"value":"/ form *must* match those for the key type.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":57456,"byte_end":57501,"line_start":576,"line_end":576,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":57506,"byte_end":57509,"line_start":577,"line_end":577,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":57514,"byte_end":57554,"line_start":578,"line_end":578,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":57559,"byte_end":57562,"line_start":579,"line_end":579,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":57567,"byte_end":57581,"line_start":580,"line_end":580,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":57586,"byte_end":57589,"line_start":581,"line_end":581,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":57594,"byte_end":57601,"line_start":582,"line_end":582,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexMap;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":57606,"byte_end":57636,"line_start":583,"line_end":583,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":57641,"byte_end":57644,"line_start":584,"line_end":584,"column_start":5,"column_end":8}},{"value":"/ let mut map = FnvIndexMap::<_, _, 8>::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":57649,"byte_end":57697,"line_start":585,"line_end":585,"column_start":5,"column_end":53}},{"value":"/ map.insert(1, \"a\").unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":57702,"byte_end":57734,"line_start":586,"line_end":586,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(map.contains_key(&1), true);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":57739,"byte_end":57782,"line_start":587,"line_end":587,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(map.contains_key(&2), false);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":57787,"byte_end":57831,"line_start":588,"line_end":588,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":57836,"byte_end":57843,"line_start":589,"line_end":589,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":414},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":58602,"byte_end":58609,"line_start":617,"line_end":617,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<IndexMap<K, V, S, N>>::get_mut","value":"pub fn get_mut<'v, Q>(&'v mut Self, &Q) -> Option<&'v mut V> where\nK: Borrow<Q>, Q: ?Sized + Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the value corresponding to the key.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the value corresponding to the key.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":58008,"byte_end":58078,"line_start":598,"line_end":598,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":58083,"byte_end":58086,"line_start":599,"line_end":599,"column_start":5,"column_end":8}},{"value":"/ The key may be any borrowed form of the map's key type, but `Hash` and `Eq` on the borrowed","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":58091,"byte_end":58186,"line_start":600,"line_end":600,"column_start":5,"column_end":100}},{"value":"/ form *must* match those for the key type.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":58191,"byte_end":58236,"line_start":601,"line_end":601,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":58241,"byte_end":58244,"line_start":602,"line_end":602,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":58249,"byte_end":58289,"line_start":603,"line_end":603,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":58294,"byte_end":58297,"line_start":604,"line_end":604,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":58302,"byte_end":58316,"line_start":605,"line_end":605,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":58321,"byte_end":58324,"line_start":606,"line_end":606,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":58329,"byte_end":58336,"line_start":607,"line_end":607,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexMap;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":58341,"byte_end":58371,"line_start":608,"line_end":608,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":58376,"byte_end":58379,"line_start":609,"line_end":609,"column_start":5,"column_end":8}},{"value":"/ let mut map = FnvIndexMap::<_, _, 8>::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":58384,"byte_end":58432,"line_start":610,"line_end":610,"column_start":5,"column_end":53}},{"value":"/ map.insert(1, \"a\").unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":58437,"byte_end":58469,"line_start":611,"line_end":611,"column_start":5,"column_end":37}},{"value":"/ if let Some(x) = map.get_mut(&1) {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":58474,"byte_end":58512,"line_start":612,"line_end":612,"column_start":5,"column_end":43}},{"value":"/     *x = \"b\";","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":58517,"byte_end":58534,"line_start":613,"line_end":613,"column_start":5,"column_end":22}},{"value":"/ }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":58539,"byte_end":58544,"line_start":614,"line_end":614,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(map[&1], \"b\");","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":58549,"byte_end":58578,"line_start":615,"line_end":615,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":58583,"byte_end":58590,"line_start":616,"line_end":616,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":417},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":59920,"byte_end":59926,"line_start":656,"line_end":656,"column_start":12,"column_end":18},"name":"insert","qualname":"<IndexMap<K, V, S, N>>::insert","value":"pub fn insert(&mut Self, K, V) -> Result<Option<V>, (K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Inserts a key-value pair into the map.","sig":null,"attributes":[{"value":"/ Inserts a key-value pair into the map.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":58919,"byte_end":58961,"line_start":629,"line_end":629,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":58966,"byte_end":58969,"line_start":630,"line_end":630,"column_start":5,"column_end":8}},{"value":"/ If an equivalent key already exists in the map: the key remains and retains in its place in","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":58974,"byte_end":59069,"line_start":631,"line_end":631,"column_start":5,"column_end":100}},{"value":"/ the order, its corresponding value is updated with `value` and the older value is returned","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":59074,"byte_end":59168,"line_start":632,"line_end":632,"column_start":5,"column_end":99}},{"value":"/ inside `Some(_)`.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":59173,"byte_end":59194,"line_start":633,"line_end":633,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":59199,"byte_end":59202,"line_start":634,"line_end":634,"column_start":5,"column_end":8}},{"value":"/ If no equivalent key existed in the map: the new key-value pair is inserted, last in order,","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":59207,"byte_end":59302,"line_start":635,"line_end":635,"column_start":5,"column_end":100}},{"value":"/ and `None` is returned.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":59307,"byte_end":59334,"line_start":636,"line_end":636,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":59339,"byte_end":59342,"line_start":637,"line_end":637,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":59347,"byte_end":59387,"line_start":638,"line_end":638,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":59392,"byte_end":59395,"line_start":639,"line_end":639,"column_start":5,"column_end":8}},{"value":"/ See also entry if you you want to insert or modify or if you need to get the index of the","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":59400,"byte_end":59493,"line_start":640,"line_end":640,"column_start":5,"column_end":98}},{"value":"/ corresponding key-value pair.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":59498,"byte_end":59531,"line_start":641,"line_end":641,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":59536,"byte_end":59539,"line_start":642,"line_end":642,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":59544,"byte_end":59558,"line_start":643,"line_end":643,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":59563,"byte_end":59566,"line_start":644,"line_end":644,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":59571,"byte_end":59578,"line_start":645,"line_end":645,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexMap;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":59583,"byte_end":59613,"line_start":646,"line_end":646,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":59618,"byte_end":59621,"line_start":647,"line_end":647,"column_start":5,"column_end":8}},{"value":"/ let mut map = FnvIndexMap::<_, _, 8>::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":59626,"byte_end":59674,"line_start":648,"line_end":648,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(map.insert(37, \"a\"), Ok(None));","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":59679,"byte_end":59725,"line_start":649,"line_end":649,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(map.is_empty(), false);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":59730,"byte_end":59768,"line_start":650,"line_end":650,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":59773,"byte_end":59776,"line_start":651,"line_end":651,"column_start":5,"column_end":8}},{"value":"/ map.insert(37, \"b\");","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":59781,"byte_end":59805,"line_start":652,"line_end":652,"column_start":5,"column_end":29}},{"value":"/ assert_eq!(map.insert(37, \"c\"), Ok(Some(\"b\")));","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":59810,"byte_end":59861,"line_start":653,"line_end":653,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(map[&37], \"c\");","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":59866,"byte_end":59896,"line_start":654,"line_end":654,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":59901,"byte_end":59908,"line_start":655,"line_end":655,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":418},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":60855,"byte_end":60861,"line_start":685,"line_end":685,"column_start":12,"column_end":18},"name":"remove","qualname":"<IndexMap<K, V, S, N>>::remove","value":"pub fn remove<Q>(&mut Self, &Q) -> Option<V> where K: Borrow<Q>, Q: ?Sized +\nHash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Same as [`swap_remove`](struct.IndexMap.html#method.swap_remove)","sig":null,"attributes":[{"value":"/ Same as [`swap_remove`](struct.IndexMap.html#method.swap_remove)","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":60441,"byte_end":60509,"line_start":671,"line_end":671,"column_start":5,"column_end":73}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":60514,"byte_end":60517,"line_start":672,"line_end":672,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":60522,"byte_end":60562,"line_start":673,"line_end":673,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":60567,"byte_end":60570,"line_start":674,"line_end":674,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":60575,"byte_end":60589,"line_start":675,"line_end":675,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":60594,"byte_end":60597,"line_start":676,"line_end":676,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":60602,"byte_end":60609,"line_start":677,"line_end":677,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexMap;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":60614,"byte_end":60644,"line_start":678,"line_end":678,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":60649,"byte_end":60652,"line_start":679,"line_end":679,"column_start":5,"column_end":8}},{"value":"/ let mut map = FnvIndexMap::<_, _, 8>::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":60657,"byte_end":60705,"line_start":680,"line_end":680,"column_start":5,"column_end":53}},{"value":"/ map.insert(1, \"a\").unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":60710,"byte_end":60742,"line_start":681,"line_end":681,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(map.remove(&1), Some(\"a\"));","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":60747,"byte_end":60789,"line_start":682,"line_end":682,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(map.remove(&1), None);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":60794,"byte_end":60831,"line_start":683,"line_end":683,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":60836,"byte_end":60843,"line_start":684,"line_end":684,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":420},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":61402,"byte_end":61413,"line_start":701,"line_end":701,"column_start":12,"column_end":23},"name":"swap_remove","qualname":"<IndexMap<K, V, S, N>>::swap_remove","value":"pub fn swap_remove<Q>(&mut Self, &Q) -> Option<V> where K: Borrow<Q>,\nQ: ?Sized + Hash + Eq","parent":null,"children":[],"decl_id":null,"docs":" Remove the key-value pair equivalent to `key` and return its value.","sig":null,"attributes":[{"value":"/ Remove the key-value pair equivalent to `key` and return its value.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":61008,"byte_end":61079,"line_start":693,"line_end":693,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":61084,"byte_end":61087,"line_start":694,"line_end":694,"column_start":5,"column_end":8}},{"value":"/ Like `Vec::swap_remove`, the pair is removed by swapping it with the last element of the map","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":61092,"byte_end":61188,"line_start":695,"line_end":695,"column_start":5,"column_end":101}},{"value":"/ and popping it off. **This perturbs the postion of what used to be the last element!**","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":61193,"byte_end":61283,"line_start":696,"line_end":696,"column_start":5,"column_end":95}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":61288,"byte_end":61291,"line_start":697,"line_end":697,"column_start":5,"column_end":8}},{"value":"/ Return `None` if `key` is not in map.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":61296,"byte_end":61337,"line_start":698,"line_end":698,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":61342,"byte_end":61345,"line_start":699,"line_end":699,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time (average).","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":61350,"byte_end":61390,"line_start":700,"line_end":700,"column_start":5,"column_end":45}}]},{"kind":"Struct","id":{"krate":0,"index":517},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":65587,"byte_end":65591,"line_start":886,"line_end":886,"column_start":12,"column_end":16},"name":"Iter","qualname":"::indexmap::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":521}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":534},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":66004,"byte_end":66011,"line_start":906,"line_end":906,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::indexmap::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":538}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":580},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":68956,"byte_end":68967,"line_start":37,"line_end":37,"column_start":10,"column_end":21},"name":"FnvIndexSet","qualname":"::indexset::FnvIndexSet","value":"IndexSet<T, BuildHasherDefault<FnvHasher>, >","parent":null,"children":[],"decl_id":null,"docs":" A [`heapless::IndexSet`](./struct.IndexSet.html) using the\n default FNV hasher.\n A list of all Methods and Traits available for `FnvIndexSet` can be found in\n the [`heapless::IndexSet`](./struct.IndexSet.html) documentation.","sig":null,"attributes":[{"value":"/ A [`heapless::IndexSet`](./struct.IndexSet.html) using the","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":67948,"byte_end":68010,"line_start":5,"line_end":5,"column_start":1,"column_end":63}},{"value":"/ default FNV hasher.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":68011,"byte_end":68034,"line_start":6,"line_end":6,"column_start":1,"column_end":24}},{"value":"/ A list of all Methods and Traits available for `FnvIndexSet` can be found in","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":68035,"byte_end":68115,"line_start":7,"line_end":7,"column_start":1,"column_end":81}},{"value":"/ the [`heapless::IndexSet`](./struct.IndexSet.html) documentation.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":68116,"byte_end":68185,"line_start":8,"line_end":8,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":68186,"byte_end":68189,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":68190,"byte_end":68204,"line_start":10,"line_end":10,"column_start":1,"column_end":15}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":68205,"byte_end":68212,"line_start":11,"line_end":11,"column_start":1,"column_end":8}},{"value":"/ use heapless::FnvIndexSet;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":68213,"byte_end":68243,"line_start":12,"line_end":12,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":68244,"byte_end":68247,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ // A hash set with a capacity of 16 elements allocated on the stack","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":68248,"byte_end":68319,"line_start":14,"line_end":14,"column_start":1,"column_end":72}},{"value":"/ let mut books = FnvIndexSet::<_, 16>::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":68320,"byte_end":68368,"line_start":15,"line_end":15,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":68369,"byte_end":68372,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ // Add some books.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":68373,"byte_end":68395,"line_start":17,"line_end":17,"column_start":1,"column_end":23}},{"value":"/ books.insert(\"A Dance With Dragons\").unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":68396,"byte_end":68446,"line_start":18,"line_end":18,"column_start":1,"column_end":51}},{"value":"/ books.insert(\"To Kill a Mockingbird\").unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":68447,"byte_end":68498,"line_start":19,"line_end":19,"column_start":1,"column_end":52}},{"value":"/ books.insert(\"The Odyssey\").unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":68499,"byte_end":68540,"line_start":20,"line_end":20,"column_start":1,"column_end":42}},{"value":"/ books.insert(\"The Great Gatsby\").unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":68541,"byte_end":68587,"line_start":21,"line_end":21,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":68588,"byte_end":68591,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ // Check for a specific one.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":68592,"byte_end":68624,"line_start":23,"line_end":23,"column_start":1,"column_end":33}},{"value":"/ if !books.contains(\"The Winds of Winter\") {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":68625,"byte_end":68672,"line_start":24,"line_end":24,"column_start":1,"column_end":48}},{"value":"/     println!(\"We have {} books, but The Winds of Winter ain't one.\",","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":68673,"byte_end":68745,"line_start":25,"line_end":25,"column_start":1,"column_end":73}},{"value":"/              books.len());","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":68746,"byte_end":68776,"line_start":26,"line_end":26,"column_start":1,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":68777,"byte_end":68782,"line_start":27,"line_end":27,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":68783,"byte_end":68786,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ // Remove a book.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":68787,"byte_end":68808,"line_start":29,"line_end":29,"column_start":1,"column_end":22}},{"value":"/ books.remove(\"The Odyssey\");","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":68809,"byte_end":68841,"line_start":30,"line_end":30,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":68842,"byte_end":68845,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/ // Iterate over everything.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":68846,"byte_end":68877,"line_start":32,"line_end":32,"column_start":1,"column_end":32}},{"value":"/ for book in &books {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":68878,"byte_end":68902,"line_start":33,"line_end":33,"column_start":1,"column_end":25}},{"value":"/     println!(\"{}\", book);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":68903,"byte_end":68932,"line_start":34,"line_end":34,"column_start":1,"column_end":30}},{"value":"/ }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":68933,"byte_end":68938,"line_start":35,"line_end":35,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":68939,"byte_end":68946,"line_start":36,"line_end":36,"column_start":1,"column_end":8}}]},{"kind":"Struct","id":{"krate":0,"index":583},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":70314,"byte_end":70322,"line_start":77,"line_end":77,"column_start":12,"column_end":20},"name":"IndexSet","qualname":"::indexset::IndexSet","value":"IndexSet {  }","parent":null,"children":[{"krate":0,"index":587}],"decl_id":null,"docs":" Fixed capacity [`IndexSet`](https://docs.rs/indexmap/1/indexmap/set/struct.IndexSet.html).","sig":null,"attributes":[{"value":"/ Fixed capacity [`IndexSet`](https://docs.rs/indexmap/1/indexmap/set/struct.IndexSet.html).","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":69037,"byte_end":69131,"line_start":39,"line_end":39,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":69132,"byte_end":69135,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/ Note that you cannot use `IndexSet` directly, since it is generic around the hashing algorithm","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":69136,"byte_end":69234,"line_start":41,"line_end":41,"column_start":1,"column_end":99}},{"value":"/ in use. Pick a concrete instantiation like [`FnvIndexSet`](./type.FnvIndexSet.html) instead","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":69235,"byte_end":69330,"line_start":42,"line_end":42,"column_start":1,"column_end":96}},{"value":"/ or create your own.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":69331,"byte_end":69354,"line_start":43,"line_end":43,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":69355,"byte_end":69358,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ Note that the capacity of the `IndexSet` must be a power of 2.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":69359,"byte_end":69425,"line_start":45,"line_end":45,"column_start":1,"column_end":67}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":69426,"byte_end":69429,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":69430,"byte_end":69444,"line_start":47,"line_end":47,"column_start":1,"column_end":15}},{"value":"/ Since `IndexSet` cannot be used directly, we're using its `FnvIndexSet` instantiation","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":69445,"byte_end":69534,"line_start":48,"line_end":48,"column_start":1,"column_end":90}},{"value":"/ for this example.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":69535,"byte_end":69556,"line_start":49,"line_end":49,"column_start":1,"column_end":22}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":69557,"byte_end":69560,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":69561,"byte_end":69568,"line_start":51,"line_end":51,"column_start":1,"column_end":8}},{"value":"/ use heapless::FnvIndexSet;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":69569,"byte_end":69599,"line_start":52,"line_end":52,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":69600,"byte_end":69603,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ // A hash set with a capacity of 16 elements allocated on the stack","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":69604,"byte_end":69675,"line_start":54,"line_end":54,"column_start":1,"column_end":72}},{"value":"/ let mut books = FnvIndexSet::<_, 16>::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":69676,"byte_end":69724,"line_start":55,"line_end":55,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":69725,"byte_end":69728,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ // Add some books.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":69729,"byte_end":69751,"line_start":57,"line_end":57,"column_start":1,"column_end":23}},{"value":"/ books.insert(\"A Dance With Dragons\").unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":69752,"byte_end":69802,"line_start":58,"line_end":58,"column_start":1,"column_end":51}},{"value":"/ books.insert(\"To Kill a Mockingbird\").unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":69803,"byte_end":69854,"line_start":59,"line_end":59,"column_start":1,"column_end":52}},{"value":"/ books.insert(\"The Odyssey\").unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":69855,"byte_end":69896,"line_start":60,"line_end":60,"column_start":1,"column_end":42}},{"value":"/ books.insert(\"The Great Gatsby\").unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":69897,"byte_end":69943,"line_start":61,"line_end":61,"column_start":1,"column_end":47}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":69944,"byte_end":69947,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ // Check for a specific one.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":69948,"byte_end":69980,"line_start":63,"line_end":63,"column_start":1,"column_end":33}},{"value":"/ if !books.contains(\"The Winds of Winter\") {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":69981,"byte_end":70028,"line_start":64,"line_end":64,"column_start":1,"column_end":48}},{"value":"/     println!(\"We have {} books, but The Winds of Winter ain't one.\",","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":70029,"byte_end":70101,"line_start":65,"line_end":65,"column_start":1,"column_end":73}},{"value":"/              books.len());","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":70102,"byte_end":70132,"line_start":66,"line_end":66,"column_start":1,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":70133,"byte_end":70138,"line_start":67,"line_end":67,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":70139,"byte_end":70142,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ // Remove a book.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":70143,"byte_end":70164,"line_start":69,"line_end":69,"column_start":1,"column_end":22}},{"value":"/ books.remove(\"The Odyssey\");","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":70165,"byte_end":70197,"line_start":70,"line_end":70,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":70198,"byte_end":70201,"line_start":71,"line_end":71,"column_start":1,"column_end":4}},{"value":"/ // Iterate over everything.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":70202,"byte_end":70233,"line_start":72,"line_end":72,"column_start":1,"column_end":32}},{"value":"/ for book in &books {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":70234,"byte_end":70258,"line_start":73,"line_end":73,"column_start":1,"column_end":25}},{"value":"/     println!(\"{}\", book);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":70259,"byte_end":70288,"line_start":74,"line_end":74,"column_start":1,"column_end":30}},{"value":"/ }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":70289,"byte_end":70294,"line_start":75,"line_end":75,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":70295,"byte_end":70302,"line_start":76,"line_end":76,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":592},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":70502,"byte_end":70505,"line_start":83,"line_end":83,"column_start":18,"column_end":21},"name":"new","qualname":"<IndexSet<T, BuildHasherDefault<S>, N>>::new","value":"pub const fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `IndexSet`\n","sig":null,"attributes":[{"value":"/ Creates an empty `IndexSet`","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":70453,"byte_end":70484,"line_start":82,"line_end":82,"column_start":5,"column_end":36}}]},{"kind":"Method","id":{"krate":0,"index":597},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":70939,"byte_end":70947,"line_start":105,"line_end":105,"column_start":12,"column_end":20},"name":"capacity","qualname":"<IndexSet<T, S, N>>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements the set can hold","sig":null,"attributes":[{"value":"/ Returns the number of elements the set can hold","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":70685,"byte_end":70736,"line_start":95,"line_end":95,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":70741,"byte_end":70744,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":70749,"byte_end":70763,"line_start":97,"line_end":97,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":70768,"byte_end":70771,"line_start":98,"line_end":98,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":70776,"byte_end":70783,"line_start":99,"line_end":99,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexSet;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":70788,"byte_end":70818,"line_start":100,"line_end":100,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":70823,"byte_end":70826,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ let set = FnvIndexSet::<i32, 16>::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":70831,"byte_end":70875,"line_start":102,"line_end":102,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(set.capacity(), 16);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":70880,"byte_end":70915,"line_start":103,"line_end":103,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":70920,"byte_end":70927,"line_start":104,"line_end":104,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":598},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":71427,"byte_end":71431,"line_start":125,"line_end":125,"column_start":12,"column_end":16},"name":"iter","qualname":"<IndexSet<T, S, N>>::iter","value":"pub fn iter(&Self) -> Iter<, T>","parent":null,"children":[],"decl_id":null,"docs":" Return an iterator over the values of the set, in their order","sig":null,"attributes":[{"value":"/ Return an iterator over the values of the set, in their order","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":71005,"byte_end":71070,"line_start":109,"line_end":109,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":71075,"byte_end":71078,"line_start":110,"line_end":110,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":71083,"byte_end":71097,"line_start":111,"line_end":111,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":71102,"byte_end":71105,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":71110,"byte_end":71117,"line_start":113,"line_end":113,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexSet;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":71122,"byte_end":71152,"line_start":114,"line_end":114,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":71157,"byte_end":71160,"line_start":115,"line_end":115,"column_start":5,"column_end":8}},{"value":"/ let mut set = FnvIndexSet::<_, 16>::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":71165,"byte_end":71211,"line_start":116,"line_end":116,"column_start":5,"column_end":51}},{"value":"/ set.insert(\"a\").unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":71216,"byte_end":71245,"line_start":117,"line_end":117,"column_start":5,"column_end":34}},{"value":"/ set.insert(\"b\").unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":71250,"byte_end":71279,"line_start":118,"line_end":118,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":71284,"byte_end":71287,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ // Will print in an arbitrary order.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":71292,"byte_end":71332,"line_start":120,"line_end":120,"column_start":5,"column_end":45}},{"value":"/ for x in set.iter() {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":71337,"byte_end":71362,"line_start":121,"line_end":121,"column_start":5,"column_end":30}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":71367,"byte_end":71393,"line_start":122,"line_end":122,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":71398,"byte_end":71403,"line_start":123,"line_end":123,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":71408,"byte_end":71415,"line_start":124,"line_end":124,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":599},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":72427,"byte_end":72437,"line_start":155,"line_end":155,"column_start":12,"column_end":22},"name":"difference","qualname":"<IndexSet<T, S, N>>::difference","value":"pub fn difference<'a, S2, const N2: usize>(&'a Self, &'a IndexSet<T, S2, >)\n-> Difference where S2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the difference, i.e. the values that are in `self` but not in\n `other`.","sig":null,"attributes":[{"value":"/ Visits the values representing the difference, i.e. the values that are in `self` but not in","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":71527,"byte_end":71623,"line_start":131,"line_end":131,"column_start":5,"column_end":101}},{"value":"/ `other`.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":71628,"byte_end":71640,"line_start":132,"line_end":132,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":71645,"byte_end":71648,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":71653,"byte_end":71667,"line_start":134,"line_end":134,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":71672,"byte_end":71675,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":71680,"byte_end":71687,"line_start":136,"line_end":136,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexSet;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":71692,"byte_end":71722,"line_start":137,"line_end":137,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":71727,"byte_end":71730,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ let mut a: FnvIndexSet<_, 16> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":71735,"byte_end":71807,"line_start":139,"line_end":139,"column_start":5,"column_end":77}},{"value":"/ let mut b: FnvIndexSet<_, 16> = [4, 2, 3, 4].iter().cloned().collect();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":71812,"byte_end":71887,"line_start":140,"line_end":140,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":71892,"byte_end":71895,"line_start":141,"line_end":141,"column_start":5,"column_end":8}},{"value":"/ // Can be seen as `a - b`.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":71900,"byte_end":71930,"line_start":142,"line_end":142,"column_start":5,"column_end":35}},{"value":"/ for x in a.difference(&b) {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":71935,"byte_end":71966,"line_start":143,"line_end":143,"column_start":5,"column_end":36}},{"value":"/     println!(\"{}\", x); // Print 1","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":71971,"byte_end":72008,"line_start":144,"line_end":144,"column_start":5,"column_end":42}},{"value":"/ }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":72013,"byte_end":72018,"line_start":145,"line_end":145,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":72023,"byte_end":72026,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ let diff: FnvIndexSet<_, 16> = a.difference(&b).collect();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":72031,"byte_end":72093,"line_start":147,"line_end":147,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(diff, [1].iter().collect::<FnvIndexSet<_, 16>>());","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":72098,"byte_end":72163,"line_start":148,"line_end":148,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":72168,"byte_end":72171,"line_start":149,"line_end":149,"column_start":5,"column_end":8}},{"value":"/ // Note that difference is not symmetric,","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":72176,"byte_end":72221,"line_start":150,"line_end":150,"column_start":5,"column_end":50}},{"value":"/ // and `b - a` means something else:","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":72226,"byte_end":72266,"line_start":151,"line_end":151,"column_start":5,"column_end":45}},{"value":"/ let diff: FnvIndexSet<_, 16> = b.difference(&a).collect();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":72271,"byte_end":72333,"line_start":152,"line_end":152,"column_start":5,"column_end":67}},{"value":"/ assert_eq!(diff, [4].iter().collect::<FnvIndexSet<_, 16>>());","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":72338,"byte_end":72403,"line_start":153,"line_end":153,"column_start":5,"column_end":70}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":72408,"byte_end":72415,"line_start":154,"line_end":154,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":603},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":73513,"byte_end":73533,"line_start":190,"line_end":190,"column_start":12,"column_end":32},"name":"symmetric_difference","qualname":"<IndexSet<T, S, N>>::symmetric_difference","value":"pub fn symmetric_difference<'a, S2, const N2:\n                            usize>(&'a Self, &'a IndexSet<T, S2, >)\n-> /*impl Trait*/ where S2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the symmetric difference, i.e. the values that are in `self`\n or in `other` but not in both.","sig":null,"attributes":[{"value":"/ Visits the values representing the symmetric difference, i.e. the values that are in `self`","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":72690,"byte_end":72785,"line_start":168,"line_end":168,"column_start":5,"column_end":100}},{"value":"/ or in `other` but not in both.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":72790,"byte_end":72824,"line_start":169,"line_end":169,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":72829,"byte_end":72832,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":72837,"byte_end":72851,"line_start":171,"line_end":171,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":72856,"byte_end":72859,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":72864,"byte_end":72871,"line_start":173,"line_end":173,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexSet;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":72876,"byte_end":72906,"line_start":174,"line_end":174,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":72911,"byte_end":72914,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ let mut a: FnvIndexSet<_, 16> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":72919,"byte_end":72991,"line_start":176,"line_end":176,"column_start":5,"column_end":77}},{"value":"/ let mut b: FnvIndexSet<_, 16> = [4, 2, 3, 4].iter().cloned().collect();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":72996,"byte_end":73071,"line_start":177,"line_end":177,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":73076,"byte_end":73079,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ // Print 1, 4 in that order order.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":73084,"byte_end":73122,"line_start":179,"line_end":179,"column_start":5,"column_end":43}},{"value":"/ for x in a.symmetric_difference(&b) {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":73127,"byte_end":73168,"line_start":180,"line_end":180,"column_start":5,"column_end":46}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":73173,"byte_end":73199,"line_start":181,"line_end":181,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":73204,"byte_end":73209,"line_start":182,"line_end":182,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":73214,"byte_end":73217,"line_start":183,"line_end":183,"column_start":5,"column_end":8}},{"value":"/ let diff1: FnvIndexSet<_, 16> = a.symmetric_difference(&b).collect();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":73222,"byte_end":73295,"line_start":184,"line_end":184,"column_start":5,"column_end":78}},{"value":"/ let diff2: FnvIndexSet<_, 16> = b.symmetric_difference(&a).collect();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":73300,"byte_end":73373,"line_start":185,"line_end":185,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":73378,"byte_end":73381,"line_start":186,"line_end":186,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(diff1, diff2);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":73386,"byte_end":73415,"line_start":187,"line_end":187,"column_start":5,"column_end":34}},{"value":"/ assert_eq!(diff1, [1, 4].iter().collect::<FnvIndexSet<_, 16>>());","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":73420,"byte_end":73489,"line_start":188,"line_end":188,"column_start":5,"column_end":74}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":73494,"byte_end":73501,"line_start":189,"line_end":189,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":608},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":74442,"byte_end":74454,"line_start":219,"line_end":219,"column_start":12,"column_end":24},"name":"intersection","qualname":"<IndexSet<T, S, N>>::intersection","value":"pub fn intersection<'a, S2, const N2: usize>(&'a Self, &'a IndexSet<T, S2, >)\n-> Intersection where S2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the intersection, i.e. the values that are both in `self` and\n `other`.","sig":null,"attributes":[{"value":"/ Visits the values representing the intersection, i.e. the values that are both in `self` and","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":73768,"byte_end":73864,"line_start":200,"line_end":200,"column_start":5,"column_end":101}},{"value":"/ `other`.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":73869,"byte_end":73881,"line_start":201,"line_end":201,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":73886,"byte_end":73889,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":73894,"byte_end":73908,"line_start":203,"line_end":203,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":73913,"byte_end":73916,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":73921,"byte_end":73928,"line_start":205,"line_end":205,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexSet;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":73933,"byte_end":73963,"line_start":206,"line_end":206,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":73968,"byte_end":73971,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ let mut a: FnvIndexSet<_, 16> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":73976,"byte_end":74048,"line_start":208,"line_end":208,"column_start":5,"column_end":77}},{"value":"/ let mut b: FnvIndexSet<_, 16> = [4, 2, 3, 4].iter().cloned().collect();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":74053,"byte_end":74128,"line_start":209,"line_end":209,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":74133,"byte_end":74136,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ // Print 2, 3 in that order.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":74141,"byte_end":74173,"line_start":211,"line_end":211,"column_start":5,"column_end":37}},{"value":"/ for x in a.intersection(&b) {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":74178,"byte_end":74211,"line_start":212,"line_end":212,"column_start":5,"column_end":38}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":74216,"byte_end":74242,"line_start":213,"line_end":213,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":74247,"byte_end":74252,"line_start":214,"line_end":214,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":74257,"byte_end":74260,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ let intersection: FnvIndexSet<_, 16> = a.intersection(&b).collect();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":74265,"byte_end":74337,"line_start":216,"line_end":216,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(intersection, [2, 3].iter().collect::<FnvIndexSet<_, 16>>());","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":74342,"byte_end":74418,"line_start":217,"line_end":217,"column_start":5,"column_end":81}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":74423,"byte_end":74430,"line_start":218,"line_end":218,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":612},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":75371,"byte_end":75376,"line_start":251,"line_end":251,"column_start":12,"column_end":17},"name":"union","qualname":"<IndexSet<T, S, N>>::union","value":"pub fn union<'a, S2, const N2: usize>(&'a Self, &'a IndexSet<T, S2, >)\n-> /*impl Trait*/ where S2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the union, i.e. all the values in `self` or `other`, without\n duplicates.","sig":null,"attributes":[{"value":"/ Visits the values representing the union, i.e. all the values in `self` or `other`, without","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":74711,"byte_end":74806,"line_start":232,"line_end":232,"column_start":5,"column_end":100}},{"value":"/ duplicates.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":74811,"byte_end":74826,"line_start":233,"line_end":233,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":74831,"byte_end":74834,"line_start":234,"line_end":234,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":74839,"byte_end":74853,"line_start":235,"line_end":235,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":74858,"byte_end":74861,"line_start":236,"line_end":236,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":74866,"byte_end":74873,"line_start":237,"line_end":237,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexSet;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":74878,"byte_end":74908,"line_start":238,"line_end":238,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":74913,"byte_end":74916,"line_start":239,"line_end":239,"column_start":5,"column_end":8}},{"value":"/ let mut a: FnvIndexSet<_, 16> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":74921,"byte_end":74993,"line_start":240,"line_end":240,"column_start":5,"column_end":77}},{"value":"/ let mut b: FnvIndexSet<_, 16> = [4, 2, 3, 4].iter().cloned().collect();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":74998,"byte_end":75073,"line_start":241,"line_end":241,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":75078,"byte_end":75081,"line_start":242,"line_end":242,"column_start":5,"column_end":8}},{"value":"/ // Print 1, 2, 3, 4 in that order.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":75086,"byte_end":75124,"line_start":243,"line_end":243,"column_start":5,"column_end":43}},{"value":"/ for x in a.union(&b) {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":75129,"byte_end":75155,"line_start":244,"line_end":244,"column_start":5,"column_end":31}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":75160,"byte_end":75186,"line_start":245,"line_end":245,"column_start":5,"column_end":31}},{"value":"/ }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":75191,"byte_end":75196,"line_start":246,"line_end":246,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":75201,"byte_end":75204,"line_start":247,"line_end":247,"column_start":5,"column_end":8}},{"value":"/ let union: FnvIndexSet<_, 16> = a.union(&b).collect();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":75209,"byte_end":75267,"line_start":248,"line_end":248,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(union, [1, 2, 3, 4].iter().collect::<FnvIndexSet<_, 16>>());","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":75272,"byte_end":75347,"line_start":249,"line_end":249,"column_start":5,"column_end":80}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":75352,"byte_end":75359,"line_start":250,"line_end":250,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":617},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":75914,"byte_end":75917,"line_start":273,"line_end":273,"column_start":12,"column_end":15},"name":"len","qualname":"<IndexSet<T, S, N>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in the set.","sig":null,"attributes":[{"value":"/ Returns the number of elements in the set.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":75600,"byte_end":75646,"line_start":261,"line_end":261,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":75651,"byte_end":75654,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":75659,"byte_end":75673,"line_start":263,"line_end":263,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":75678,"byte_end":75681,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":75686,"byte_end":75693,"line_start":265,"line_end":265,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexSet;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":75698,"byte_end":75728,"line_start":266,"line_end":266,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":75733,"byte_end":75736,"line_start":267,"line_end":267,"column_start":5,"column_end":8}},{"value":"/ let mut v: FnvIndexSet<_, 16> = FnvIndexSet::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":75741,"byte_end":75796,"line_start":268,"line_end":268,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(v.len(), 0);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":75801,"byte_end":75828,"line_start":269,"line_end":269,"column_start":5,"column_end":32}},{"value":"/ v.insert(1).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":75833,"byte_end":75858,"line_start":270,"line_end":270,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(v.len(), 1);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":75863,"byte_end":75890,"line_start":271,"line_end":271,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":75895,"byte_end":75902,"line_start":272,"line_end":272,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":618},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":76288,"byte_end":76296,"line_start":289,"line_end":289,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<IndexSet<T, S, N>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set contains no elements.","sig":null,"attributes":[{"value":"/ Returns `true` if the set contains no elements.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":75970,"byte_end":76021,"line_start":277,"line_end":277,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":76026,"byte_end":76029,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":76034,"byte_end":76048,"line_start":279,"line_end":279,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":76053,"byte_end":76056,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":76061,"byte_end":76068,"line_start":281,"line_end":281,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexSet;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":76073,"byte_end":76103,"line_start":282,"line_end":282,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":76108,"byte_end":76111,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ let mut v: FnvIndexSet<_, 16> = FnvIndexSet::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":76116,"byte_end":76171,"line_start":284,"line_end":284,"column_start":5,"column_end":60}},{"value":"/ assert!(v.is_empty());","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":76176,"byte_end":76202,"line_start":285,"line_end":285,"column_start":5,"column_end":31}},{"value":"/ v.insert(1).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":76207,"byte_end":76232,"line_start":286,"line_end":286,"column_start":5,"column_end":30}},{"value":"/ assert!(!v.is_empty());","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":76237,"byte_end":76264,"line_start":287,"line_end":287,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":76269,"byte_end":76276,"line_start":288,"line_end":288,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":619},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":76647,"byte_end":76652,"line_start":305,"line_end":305,"column_start":12,"column_end":17},"name":"clear","qualname":"<IndexSet<T, S, N>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Clears the set, removing all values.","sig":null,"attributes":[{"value":"/ Clears the set, removing all values.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":76353,"byte_end":76393,"line_start":293,"line_end":293,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":76398,"byte_end":76401,"line_start":294,"line_end":294,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":76406,"byte_end":76420,"line_start":295,"line_end":295,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":76425,"byte_end":76428,"line_start":296,"line_end":296,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":76433,"byte_end":76440,"line_start":297,"line_end":297,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexSet;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":76445,"byte_end":76475,"line_start":298,"line_end":298,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":76480,"byte_end":76483,"line_start":299,"line_end":299,"column_start":5,"column_end":8}},{"value":"/ let mut v: FnvIndexSet<_, 16> = FnvIndexSet::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":76488,"byte_end":76543,"line_start":300,"line_end":300,"column_start":5,"column_end":60}},{"value":"/ v.insert(1).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":76548,"byte_end":76573,"line_start":301,"line_end":301,"column_start":5,"column_end":30}},{"value":"/ v.clear();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":76578,"byte_end":76592,"line_start":302,"line_end":302,"column_start":5,"column_end":19}},{"value":"/ assert!(v.is_empty());","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":76597,"byte_end":76623,"line_start":303,"line_end":303,"column_start":5,"column_end":31}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":76628,"byte_end":76635,"line_start":304,"line_end":304,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":620},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":77189,"byte_end":77197,"line_start":323,"line_end":323,"column_start":12,"column_end":20},"name":"contains","qualname":"<IndexSet<T, S, N>>::contains","value":"pub fn contains<Q>(&Self, &Q) -> bool where T: Borrow<Q>, Q: ?Sized + Eq +\nHash","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set contains a value.","sig":null,"attributes":[{"value":"/ Returns `true` if the set contains a value.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":76702,"byte_end":76749,"line_start":309,"line_end":309,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":76754,"byte_end":76757,"line_start":310,"line_end":310,"column_start":5,"column_end":8}},{"value":"/ The value may be any borrowed form of the set's value type, but `Hash` and `Eq` on the","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":76762,"byte_end":76852,"line_start":311,"line_end":311,"column_start":5,"column_end":95}},{"value":"/ borrowed form must match those for the value type.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":76857,"byte_end":76911,"line_start":312,"line_end":312,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":76916,"byte_end":76919,"line_start":313,"line_end":313,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":76924,"byte_end":76938,"line_start":314,"line_end":314,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":76943,"byte_end":76946,"line_start":315,"line_end":315,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":76951,"byte_end":76958,"line_start":316,"line_end":316,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexSet;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":76963,"byte_end":76993,"line_start":317,"line_end":317,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":76998,"byte_end":77001,"line_start":318,"line_end":318,"column_start":5,"column_end":8}},{"value":"/ let set: FnvIndexSet<_, 16> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":77006,"byte_end":77076,"line_start":319,"line_end":319,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(set.contains(&1), true);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":77081,"byte_end":77120,"line_start":320,"line_end":320,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(set.contains(&4), false);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":77125,"byte_end":77165,"line_start":321,"line_end":321,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":77170,"byte_end":77177,"line_start":322,"line_end":322,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":622},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":77918,"byte_end":77929,"line_start":348,"line_end":348,"column_start":12,"column_end":23},"name":"is_disjoint","qualname":"<IndexSet<T, S, N>>::is_disjoint","value":"pub fn is_disjoint<S2, const N2: usize>(&Self, &IndexSet<T, S2, >) -> bool\nwhere S2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if `self` has no elements in common with `other`. This is equivalent to\n checking for an empty intersection.","sig":null,"attributes":[{"value":"/ Returns `true` if `self` has no elements in common with `other`. This is equivalent to","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":77344,"byte_end":77434,"line_start":331,"line_end":331,"column_start":5,"column_end":95}},{"value":"/ checking for an empty intersection.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":77439,"byte_end":77478,"line_start":332,"line_end":332,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":77483,"byte_end":77486,"line_start":333,"line_end":333,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":77491,"byte_end":77505,"line_start":334,"line_end":334,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":77510,"byte_end":77513,"line_start":335,"line_end":335,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":77518,"byte_end":77525,"line_start":336,"line_end":336,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexSet;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":77530,"byte_end":77560,"line_start":337,"line_end":337,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":77565,"byte_end":77568,"line_start":338,"line_end":338,"column_start":5,"column_end":8}},{"value":"/ let a: FnvIndexSet<_, 16> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":77573,"byte_end":77641,"line_start":339,"line_end":339,"column_start":5,"column_end":73}},{"value":"/ let mut b = FnvIndexSet::<_, 16>::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":77646,"byte_end":77690,"line_start":340,"line_end":340,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":77695,"byte_end":77698,"line_start":341,"line_end":341,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(a.is_disjoint(&b), true);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":77703,"byte_end":77743,"line_start":342,"line_end":342,"column_start":5,"column_end":45}},{"value":"/ b.insert(4).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":77748,"byte_end":77773,"line_start":343,"line_end":343,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(a.is_disjoint(&b), true);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":77778,"byte_end":77818,"line_start":344,"line_end":344,"column_start":5,"column_end":45}},{"value":"/ b.insert(1).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":77823,"byte_end":77848,"line_start":345,"line_end":345,"column_start":5,"column_end":30}},{"value":"/ assert_eq!(a.is_disjoint(&b), false);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":77853,"byte_end":77894,"line_start":346,"line_end":346,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":77899,"byte_end":77906,"line_start":347,"line_end":347,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":626},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":78667,"byte_end":78676,"line_start":372,"line_end":372,"column_start":12,"column_end":21},"name":"is_subset","qualname":"<IndexSet<T, S, N>>::is_subset","value":"pub fn is_subset<S2, const N2: usize>(&Self, &IndexSet<T, S2, >) -> bool where\nS2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set is a subset of another, i.e. `other` contains at least all the\n values in `self`.","sig":null,"attributes":[{"value":"/ Returns `true` if the set is a subset of another, i.e. `other` contains at least all the","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":78095,"byte_end":78187,"line_start":355,"line_end":355,"column_start":5,"column_end":97}},{"value":"/ values in `self`.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":78192,"byte_end":78213,"line_start":356,"line_end":356,"column_start":5,"column_end":26}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":78218,"byte_end":78221,"line_start":357,"line_end":357,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":78226,"byte_end":78240,"line_start":358,"line_end":358,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":78245,"byte_end":78248,"line_start":359,"line_end":359,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":78253,"byte_end":78260,"line_start":360,"line_end":360,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexSet;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":78265,"byte_end":78295,"line_start":361,"line_end":361,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":78300,"byte_end":78303,"line_start":362,"line_end":362,"column_start":5,"column_end":8}},{"value":"/ let sup: FnvIndexSet<_, 16> = [1, 2, 3].iter().cloned().collect();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":78308,"byte_end":78378,"line_start":363,"line_end":363,"column_start":5,"column_end":75}},{"value":"/ let mut set = FnvIndexSet::<_, 16>::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":78383,"byte_end":78429,"line_start":364,"line_end":364,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":78434,"byte_end":78437,"line_start":365,"line_end":365,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.is_subset(&sup), true);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":78442,"byte_end":78484,"line_start":366,"line_end":366,"column_start":5,"column_end":47}},{"value":"/ set.insert(2).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":78489,"byte_end":78516,"line_start":367,"line_end":367,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(set.is_subset(&sup), true);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":78521,"byte_end":78563,"line_start":368,"line_end":368,"column_start":5,"column_end":47}},{"value":"/ set.insert(4).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":78568,"byte_end":78595,"line_start":369,"line_end":369,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(set.is_subset(&sup), false);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":78600,"byte_end":78643,"line_start":370,"line_end":370,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":78648,"byte_end":78655,"line_start":371,"line_end":371,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":630},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":79465,"byte_end":79476,"line_start":399,"line_end":399,"column_start":12,"column_end":23},"name":"is_superset","qualname":"<IndexSet<T, S, N>>::is_superset","value":"pub fn is_superset<S2, const N2: usize>(&Self, &IndexSet<T, S2, >) -> bool\nwhere S2: BuildHasher","parent":null,"children":[],"decl_id":null,"docs":"\n # Examples","sig":null,"attributes":[{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":78964,"byte_end":78967,"line_start":381,"line_end":381,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":78972,"byte_end":78986,"line_start":382,"line_end":382,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":78991,"byte_end":78994,"line_start":383,"line_end":383,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":78999,"byte_end":79006,"line_start":384,"line_end":384,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexSet;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":79011,"byte_end":79041,"line_start":385,"line_end":385,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":79046,"byte_end":79049,"line_start":386,"line_end":386,"column_start":5,"column_end":8}},{"value":"/ let sub: FnvIndexSet<_, 16> = [1, 2].iter().cloned().collect();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":79054,"byte_end":79121,"line_start":387,"line_end":387,"column_start":5,"column_end":72}},{"value":"/ let mut set = FnvIndexSet::<_, 16>::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":79126,"byte_end":79172,"line_start":388,"line_end":388,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":79177,"byte_end":79180,"line_start":389,"line_end":389,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.is_superset(&sub), false);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":79185,"byte_end":79230,"line_start":390,"line_end":390,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":79235,"byte_end":79238,"line_start":391,"line_end":391,"column_start":5,"column_end":8}},{"value":"/ set.insert(0).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":79243,"byte_end":79270,"line_start":392,"line_end":392,"column_start":5,"column_end":32}},{"value":"/ set.insert(1).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":79275,"byte_end":79302,"line_start":393,"line_end":393,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(set.is_superset(&sub), false);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":79307,"byte_end":79352,"line_start":394,"line_end":394,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":79357,"byte_end":79360,"line_start":395,"line_end":395,"column_start":5,"column_end":8}},{"value":"/ set.insert(2).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":79365,"byte_end":79392,"line_start":396,"line_end":396,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(set.is_superset(&sub), true);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":79397,"byte_end":79441,"line_start":397,"line_end":397,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":79446,"byte_end":79453,"line_start":398,"line_end":398,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":633},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":80117,"byte_end":80123,"line_start":423,"line_end":423,"column_start":12,"column_end":18},"name":"insert","qualname":"<IndexSet<T, S, N>>::insert","value":"pub fn insert(&mut Self, T) -> Result<bool, T>","parent":null,"children":[],"decl_id":null,"docs":" Adds a value to the set.","sig":null,"attributes":[{"value":"/ Adds a value to the set.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":79624,"byte_end":79652,"line_start":406,"line_end":406,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":79657,"byte_end":79660,"line_start":407,"line_end":407,"column_start":5,"column_end":8}},{"value":"/ If the set did not have this value present, `true` is returned.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":79665,"byte_end":79732,"line_start":408,"line_end":408,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":79737,"byte_end":79740,"line_start":409,"line_end":409,"column_start":5,"column_end":8}},{"value":"/ If the set did have this value present, `false` is returned.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":79745,"byte_end":79809,"line_start":410,"line_end":410,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":79814,"byte_end":79817,"line_start":411,"line_end":411,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":79822,"byte_end":79836,"line_start":412,"line_end":412,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":79841,"byte_end":79844,"line_start":413,"line_end":413,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":79849,"byte_end":79856,"line_start":414,"line_end":414,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexSet;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":79861,"byte_end":79891,"line_start":415,"line_end":415,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":79896,"byte_end":79899,"line_start":416,"line_end":416,"column_start":5,"column_end":8}},{"value":"/ let mut set = FnvIndexSet::<_, 16>::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":79904,"byte_end":79950,"line_start":417,"line_end":417,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":79955,"byte_end":79958,"line_start":418,"line_end":418,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(set.insert(2).unwrap(), true);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":79963,"byte_end":80008,"line_start":419,"line_end":419,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(set.insert(2).unwrap(), false);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":80013,"byte_end":80059,"line_start":420,"line_end":420,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(set.len(), 1);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":80064,"byte_end":80093,"line_start":421,"line_end":421,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":80098,"byte_end":80105,"line_start":422,"line_end":422,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":636},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":80833,"byte_end":80839,"line_start":446,"line_end":446,"column_start":12,"column_end":18},"name":"remove","qualname":"<IndexSet<T, S, N>>::remove","value":"pub fn remove<Q>(&mut Self, &Q) -> bool where T: Borrow<Q>, Q: ?Sized + Eq +\nHash","parent":null,"children":[],"decl_id":null,"docs":" Removes a value from the set. Returns `true` if the value was present in the set.","sig":null,"attributes":[{"value":"/ Removes a value from the set. Returns `true` if the value was present in the set.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":80296,"byte_end":80381,"line_start":430,"line_end":430,"column_start":5,"column_end":90}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":80386,"byte_end":80389,"line_start":431,"line_end":431,"column_start":5,"column_end":8}},{"value":"/ The value may be any borrowed form of the set's value type, but `Hash` and `Eq` on the","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":80394,"byte_end":80484,"line_start":432,"line_end":432,"column_start":5,"column_end":95}},{"value":"/ borrowed form must match those for the value type.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":80489,"byte_end":80543,"line_start":433,"line_end":433,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":80548,"byte_end":80551,"line_start":434,"line_end":434,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":80556,"byte_end":80570,"line_start":435,"line_end":435,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":80575,"byte_end":80578,"line_start":436,"line_end":436,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":80583,"byte_end":80590,"line_start":437,"line_end":437,"column_start":5,"column_end":12}},{"value":"/ use heapless::FnvIndexSet;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":80595,"byte_end":80625,"line_start":438,"line_end":438,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":80630,"byte_end":80633,"line_start":439,"line_end":439,"column_start":5,"column_end":8}},{"value":"/ let mut set = FnvIndexSet::<_, 16>::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":80638,"byte_end":80684,"line_start":440,"line_end":440,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":80689,"byte_end":80692,"line_start":441,"line_end":441,"column_start":5,"column_end":8}},{"value":"/ set.insert(2).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":80697,"byte_end":80724,"line_start":442,"line_end":442,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(set.remove(&2), true);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":80729,"byte_end":80766,"line_start":443,"line_end":443,"column_start":5,"column_end":42}},{"value":"/ assert_eq!(set.remove(&2), false);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":80771,"byte_end":80809,"line_start":444,"line_end":444,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":80814,"byte_end":80821,"line_start":445,"line_end":445,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":688},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":83054,"byte_end":83058,"line_start":555,"line_end":555,"column_start":12,"column_end":16},"name":"Iter","qualname":"::indexset::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":691}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":702},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":83416,"byte_end":83426,"line_start":575,"line_end":575,"column_start":12,"column_end":22},"name":"Difference","qualname":"::indexset::Difference","value":"Difference {  }","parent":null,"children":[{"krate":0,"index":707},{"krate":0,"index":708}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":716},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":83921,"byte_end":83933,"line_start":601,"line_end":601,"column_start":12,"column_end":24},"name":"Intersection","qualname":"::indexset::Intersection","value":"Intersection {  }","parent":null,"children":[{"krate":0,"index":721},{"krate":0,"index":722}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":753},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":84693,"byte_end":84702,"line_start":8,"line_end":8,"column_start":12,"column_end":21},"name":"LinearMap","qualname":"::linear_map::LinearMap","value":"LinearMap {  }","parent":null,"children":[{"krate":0,"index":757}],"decl_id":null,"docs":" A fixed capacity map / dictionary that performs lookups via linear search","sig":null,"attributes":[{"value":"/ A fixed capacity map / dictionary that performs lookups via linear search","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":84505,"byte_end":84582,"line_start":4,"line_end":4,"column_start":1,"column_end":78}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":84583,"byte_end":84586,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ Note that as this map doesn't use hashing so most operations are **O(N)** instead of O(1)","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":84587,"byte_end":84680,"line_start":6,"line_end":6,"column_start":1,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":762},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":85206,"byte_end":85209,"line_start":26,"line_end":26,"column_start":18,"column_end":21},"name":"new","qualname":"<LinearMap<K, V, N>>::new","value":"pub const fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `LinearMap`","sig":null,"attributes":[{"value":"/ Creates an empty `LinearMap`","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":84821,"byte_end":84853,"line_start":13,"line_end":13,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":84858,"byte_end":84861,"line_start":14,"line_end":14,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":84866,"byte_end":84880,"line_start":15,"line_end":15,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":84885,"byte_end":84888,"line_start":16,"line_end":16,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":84893,"byte_end":84900,"line_start":17,"line_end":17,"column_start":5,"column_end":12}},{"value":"/ use heapless::LinearMap;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":84905,"byte_end":84933,"line_start":18,"line_end":18,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":84938,"byte_end":84941,"line_start":19,"line_end":19,"column_start":5,"column_end":8}},{"value":"/ // allocate the map on the stack","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":84946,"byte_end":84982,"line_start":20,"line_end":20,"column_start":5,"column_end":41}},{"value":"/ let mut map: LinearMap<&str, isize, 8> = LinearMap::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":84987,"byte_end":85049,"line_start":21,"line_end":21,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":85054,"byte_end":85057,"line_start":22,"line_end":22,"column_start":5,"column_end":8}},{"value":"/ // allocate the map in a static variable","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":85062,"byte_end":85106,"line_start":23,"line_end":23,"column_start":5,"column_end":49}},{"value":"/ static mut MAP: LinearMap<&str, isize, 8> = LinearMap::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":85111,"byte_end":85176,"line_start":24,"line_end":24,"column_start":5,"column_end":70}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":85181,"byte_end":85188,"line_start":25,"line_end":25,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":767},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":85648,"byte_end":85656,"line_start":47,"line_end":47,"column_start":12,"column_end":20},"name":"capacity","qualname":"<LinearMap<K, V, N>>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements that the map can hold","sig":null,"attributes":[{"value":"/ Returns the number of elements that the map can hold","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":85336,"byte_end":85392,"line_start":35,"line_end":35,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":85397,"byte_end":85400,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":85405,"byte_end":85434,"line_start":37,"line_end":37,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":85439,"byte_end":85442,"line_start":38,"line_end":38,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":85447,"byte_end":85461,"line_start":39,"line_end":39,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":85466,"byte_end":85469,"line_start":40,"line_end":40,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":85474,"byte_end":85481,"line_start":41,"line_end":41,"column_start":5,"column_end":12}},{"value":"/ use heapless::LinearMap;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":85486,"byte_end":85514,"line_start":42,"line_end":42,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":85519,"byte_end":85522,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ let map: LinearMap<&str, isize, 8> = LinearMap::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":85527,"byte_end":85585,"line_start":44,"line_end":44,"column_start":5,"column_end":63}},{"value":"/ assert_eq!(map.capacity(), 8);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":85590,"byte_end":85624,"line_start":45,"line_end":45,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":85629,"byte_end":85636,"line_start":46,"line_end":46,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":768},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":86049,"byte_end":86054,"line_start":65,"line_end":65,"column_start":12,"column_end":17},"name":"clear","qualname":"<LinearMap<K, V, N>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Clears the map, removing all key-value pairs","sig":null,"attributes":[{"value":"/ Clears the map, removing all key-value pairs","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":85696,"byte_end":85744,"line_start":51,"line_end":51,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":85749,"byte_end":85752,"line_start":52,"line_end":52,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":85757,"byte_end":85786,"line_start":53,"line_end":53,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":85791,"byte_end":85794,"line_start":54,"line_end":54,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":85799,"byte_end":85813,"line_start":55,"line_end":55,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":85818,"byte_end":85821,"line_start":56,"line_end":56,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":85826,"byte_end":85833,"line_start":57,"line_end":57,"column_start":5,"column_end":12}},{"value":"/ use heapless::LinearMap;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":85838,"byte_end":85866,"line_start":58,"line_end":58,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":85871,"byte_end":85874,"line_start":59,"line_end":59,"column_start":5,"column_end":8}},{"value":"/ let mut map: LinearMap<_, _, 8> = LinearMap::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":85879,"byte_end":85934,"line_start":60,"line_end":60,"column_start":5,"column_end":60}},{"value":"/ map.insert(1, \"a\").unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":85939,"byte_end":85971,"line_start":61,"line_end":61,"column_start":5,"column_end":37}},{"value":"/ map.clear();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":85976,"byte_end":85992,"line_start":62,"line_end":62,"column_start":5,"column_end":21}},{"value":"/ assert!(map.is_empty());","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":85997,"byte_end":86025,"line_start":63,"line_end":63,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":86030,"byte_end":86037,"line_start":64,"line_end":64,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":769},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":86522,"byte_end":86534,"line_start":83,"line_end":83,"column_start":12,"column_end":24},"name":"contains_key","qualname":"<LinearMap<K, V, N>>::contains_key","value":"pub fn contains_key(&Self, &K) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the map contains a value for the specified key.","sig":null,"attributes":[{"value":"/ Returns true if the map contains a value for the specified key.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":86107,"byte_end":86174,"line_start":69,"line_end":69,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":86179,"byte_end":86182,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(N)** time","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":86187,"byte_end":86216,"line_start":71,"line_end":71,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":86221,"byte_end":86224,"line_start":72,"line_end":72,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":86229,"byte_end":86243,"line_start":73,"line_end":73,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":86248,"byte_end":86251,"line_start":74,"line_end":74,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":86256,"byte_end":86263,"line_start":75,"line_end":75,"column_start":5,"column_end":12}},{"value":"/ use heapless::LinearMap;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":86268,"byte_end":86296,"line_start":76,"line_end":76,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":86301,"byte_end":86304,"line_start":77,"line_end":77,"column_start":5,"column_end":8}},{"value":"/ let mut map: LinearMap<_, _, 8> = LinearMap::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":86309,"byte_end":86364,"line_start":78,"line_end":78,"column_start":5,"column_end":60}},{"value":"/ map.insert(1, \"a\").unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":86369,"byte_end":86401,"line_start":79,"line_end":79,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(map.contains_key(&1), true);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":86406,"byte_end":86449,"line_start":80,"line_end":80,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(map.contains_key(&2), false);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":86454,"byte_end":86498,"line_start":81,"line_end":81,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":86503,"byte_end":86510,"line_start":82,"line_end":82,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":770},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":87000,"byte_end":87003,"line_start":101,"line_end":101,"column_start":12,"column_end":15},"name":"get","qualname":"<LinearMap<K, V, N>>::get","value":"pub fn get<Q>(&Self, &Q) -> Option<&V> where K: Borrow<Q>, Q: Eq + ?Sized","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the value corresponding to the key","sig":null,"attributes":[{"value":"/ Returns a reference to the value corresponding to the key","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":86604,"byte_end":86665,"line_start":87,"line_end":87,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":86670,"byte_end":86673,"line_start":88,"line_end":88,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(N)** time","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":86678,"byte_end":86707,"line_start":89,"line_end":89,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":86712,"byte_end":86715,"line_start":90,"line_end":90,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":86720,"byte_end":86734,"line_start":91,"line_end":91,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":86739,"byte_end":86742,"line_start":92,"line_end":92,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":86747,"byte_end":86754,"line_start":93,"line_end":93,"column_start":5,"column_end":12}},{"value":"/ use heapless::LinearMap;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":86759,"byte_end":86787,"line_start":94,"line_end":94,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":86792,"byte_end":86795,"line_start":95,"line_end":95,"column_start":5,"column_end":8}},{"value":"/ let mut map: LinearMap<_, _, 8> = LinearMap::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":86800,"byte_end":86855,"line_start":96,"line_end":96,"column_start":5,"column_end":60}},{"value":"/ map.insert(1, \"a\").unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":86860,"byte_end":86892,"line_start":97,"line_end":97,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(map.get(&1), Some(&\"a\"));","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":86897,"byte_end":86937,"line_start":98,"line_end":98,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(map.get(&2), None);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":86942,"byte_end":86976,"line_start":99,"line_end":99,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":86981,"byte_end":86988,"line_start":100,"line_end":100,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":774},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":87635,"byte_end":87642,"line_start":127,"line_end":127,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<LinearMap<K, V, N>>::get_mut","value":"pub fn get_mut<Q>(&mut Self, &Q) -> Option<&mut V> where K: Borrow<Q>, Q: Eq +\n?Sized","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the value corresponding to the key","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the value corresponding to the key","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":87206,"byte_end":87275,"line_start":111,"line_end":111,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":87280,"byte_end":87283,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(N)** time","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":87288,"byte_end":87317,"line_start":113,"line_end":113,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":87322,"byte_end":87325,"line_start":114,"line_end":114,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":87330,"byte_end":87344,"line_start":115,"line_end":115,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":87349,"byte_end":87352,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":87357,"byte_end":87364,"line_start":117,"line_end":117,"column_start":5,"column_end":12}},{"value":"/ use heapless::LinearMap;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":87369,"byte_end":87397,"line_start":118,"line_end":118,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":87402,"byte_end":87405,"line_start":119,"line_end":119,"column_start":5,"column_end":8}},{"value":"/ let mut map: LinearMap<_, _, 8> = LinearMap::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":87410,"byte_end":87465,"line_start":120,"line_end":120,"column_start":5,"column_end":60}},{"value":"/ map.insert(1, \"a\").unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":87470,"byte_end":87502,"line_start":121,"line_end":121,"column_start":5,"column_end":37}},{"value":"/ if let Some(x) = map.get_mut(&1) {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":87507,"byte_end":87545,"line_start":122,"line_end":122,"column_start":5,"column_end":43}},{"value":"/     *x = \"b\";","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":87550,"byte_end":87567,"line_start":123,"line_end":123,"column_start":5,"column_end":22}},{"value":"/ }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":87572,"byte_end":87577,"line_start":124,"line_end":124,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(map[&1], \"b\");","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":87582,"byte_end":87611,"line_start":125,"line_end":125,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":87616,"byte_end":87623,"line_start":126,"line_end":126,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":778},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":88214,"byte_end":88217,"line_start":151,"line_end":151,"column_start":12,"column_end":15},"name":"len","qualname":"<LinearMap<K, V, N>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in this map","sig":null,"attributes":[{"value":"/ Returns the number of elements in this map","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":87857,"byte_end":87903,"line_start":137,"line_end":137,"column_start":5,"column_end":51}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":87908,"byte_end":87911,"line_start":138,"line_end":138,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":87916,"byte_end":87945,"line_start":139,"line_end":139,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":87950,"byte_end":87953,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":87958,"byte_end":87972,"line_start":141,"line_end":141,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":87977,"byte_end":87980,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":87985,"byte_end":87992,"line_start":143,"line_end":143,"column_start":5,"column_end":12}},{"value":"/ use heapless::LinearMap;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":87997,"byte_end":88025,"line_start":144,"line_end":144,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":88030,"byte_end":88033,"line_start":145,"line_end":145,"column_start":5,"column_end":8}},{"value":"/ let mut a: LinearMap<_, _, 8> = LinearMap::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":88038,"byte_end":88091,"line_start":146,"line_end":146,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(a.len(), 0);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":88096,"byte_end":88123,"line_start":147,"line_end":147,"column_start":5,"column_end":32}},{"value":"/ a.insert(1, \"a\").unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":88128,"byte_end":88158,"line_start":148,"line_end":148,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(a.len(), 1);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":88163,"byte_end":88190,"line_start":149,"line_end":149,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":88195,"byte_end":88202,"line_start":150,"line_end":150,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":779},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":88955,"byte_end":88961,"line_start":176,"line_end":176,"column_start":12,"column_end":18},"name":"insert","qualname":"<LinearMap<K, V, N>>::insert","value":"pub fn insert(&mut Self, K, V) -> Result<Option<V>, (K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Inserts a key-value pair into the map.","sig":null,"attributes":[{"value":"/ Inserts a key-value pair into the map.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":88273,"byte_end":88315,"line_start":155,"line_end":155,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":88320,"byte_end":88323,"line_start":156,"line_end":156,"column_start":5,"column_end":8}},{"value":"/ If the map did not have this key present, `None` is returned.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":88328,"byte_end":88393,"line_start":157,"line_end":157,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":88398,"byte_end":88401,"line_start":158,"line_end":158,"column_start":5,"column_end":8}},{"value":"/ If the map did have this key present, the value is updated, and the old value is returned.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":88406,"byte_end":88500,"line_start":159,"line_end":159,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":88505,"byte_end":88508,"line_start":160,"line_end":160,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(N)** time","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":88513,"byte_end":88542,"line_start":161,"line_end":161,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":88547,"byte_end":88550,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":88555,"byte_end":88569,"line_start":163,"line_end":163,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":88574,"byte_end":88577,"line_start":164,"line_end":164,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":88582,"byte_end":88589,"line_start":165,"line_end":165,"column_start":5,"column_end":12}},{"value":"/ use heapless::LinearMap;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":88594,"byte_end":88622,"line_start":166,"line_end":166,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":88627,"byte_end":88630,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ let mut map: LinearMap<_, _, 8> = LinearMap::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":88635,"byte_end":88690,"line_start":168,"line_end":168,"column_start":5,"column_end":60}},{"value":"/ assert_eq!(map.insert(37, \"a\").unwrap(), None);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":88695,"byte_end":88746,"line_start":169,"line_end":169,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(map.is_empty(), false);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":88751,"byte_end":88789,"line_start":170,"line_end":170,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":88794,"byte_end":88797,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ map.insert(37, \"b\").unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":88802,"byte_end":88835,"line_start":172,"line_end":172,"column_start":5,"column_end":38}},{"value":"/ assert_eq!(map.insert(37, \"c\").unwrap(), Some(\"b\"));","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":88840,"byte_end":88896,"line_start":173,"line_end":173,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(map[&37], \"c\");","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":88901,"byte_end":88931,"line_start":174,"line_end":174,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":88936,"byte_end":88943,"line_start":175,"line_end":175,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":781},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":89612,"byte_end":89620,"line_start":200,"line_end":200,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<LinearMap<K, V, N>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the map contains no elements","sig":null,"attributes":[{"value":"/ Returns true if the map contains no elements","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":89254,"byte_end":89302,"line_start":186,"line_end":186,"column_start":5,"column_end":53}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":89307,"byte_end":89310,"line_start":187,"line_end":187,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(1)** time","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":89315,"byte_end":89344,"line_start":188,"line_end":188,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":89349,"byte_end":89352,"line_start":189,"line_end":189,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":89357,"byte_end":89371,"line_start":190,"line_end":190,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":89376,"byte_end":89379,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":89384,"byte_end":89391,"line_start":192,"line_end":192,"column_start":5,"column_end":12}},{"value":"/ use heapless::LinearMap;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":89396,"byte_end":89424,"line_start":193,"line_end":193,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":89429,"byte_end":89432,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ let mut a: LinearMap<_, _, 8> = LinearMap::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":89437,"byte_end":89490,"line_start":195,"line_end":195,"column_start":5,"column_end":58}},{"value":"/ assert!(a.is_empty());","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":89495,"byte_end":89521,"line_start":196,"line_end":196,"column_start":5,"column_end":31}},{"value":"/ a.insert(1, \"a\").unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":89526,"byte_end":89556,"line_start":197,"line_end":197,"column_start":5,"column_end":35}},{"value":"/ assert!(!a.is_empty());","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":89561,"byte_end":89588,"line_start":198,"line_end":198,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":89593,"byte_end":89600,"line_start":199,"line_end":199,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":782},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":90128,"byte_end":90132,"line_start":220,"line_end":220,"column_start":12,"column_end":16},"name":"iter","qualname":"<LinearMap<K, V, N>>::iter","value":"pub fn iter(&Self) -> Iter<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all key-value pairs in arbitrary order.","sig":null,"attributes":[{"value":"/ An iterator visiting all key-value pairs in arbitrary order.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":89673,"byte_end":89737,"line_start":204,"line_end":204,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":89742,"byte_end":89745,"line_start":205,"line_end":205,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":89750,"byte_end":89764,"line_start":206,"line_end":206,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":89769,"byte_end":89772,"line_start":207,"line_end":207,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":89777,"byte_end":89784,"line_start":208,"line_end":208,"column_start":5,"column_end":12}},{"value":"/ use heapless::LinearMap;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":89789,"byte_end":89817,"line_start":209,"line_end":209,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":89822,"byte_end":89825,"line_start":210,"line_end":210,"column_start":5,"column_end":8}},{"value":"/ let mut map: LinearMap<_, _, 8> = LinearMap::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":89830,"byte_end":89885,"line_start":211,"line_end":211,"column_start":5,"column_end":60}},{"value":"/ map.insert(\"a\", 1).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":89890,"byte_end":89922,"line_start":212,"line_end":212,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"b\", 2).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":89927,"byte_end":89959,"line_start":213,"line_end":213,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"c\", 3).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":89964,"byte_end":89996,"line_start":214,"line_end":214,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":90001,"byte_end":90004,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ for (key, val) in map.iter() {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":90009,"byte_end":90043,"line_start":216,"line_end":216,"column_start":5,"column_end":39}},{"value":"/     println!(\"key: {} val: {}\", key, val);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":90048,"byte_end":90094,"line_start":217,"line_end":217,"column_start":5,"column_end":51}},{"value":"/ }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":90099,"byte_end":90104,"line_start":218,"line_end":218,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":90109,"byte_end":90116,"line_start":219,"line_end":219,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":783},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":90850,"byte_end":90858,"line_start":248,"line_end":248,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<LinearMap<K, V, N>>::iter_mut","value":"pub fn iter_mut(&mut Self) -> IterMut<, K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all key-value pairs in arbitrary order, with mutable references to the\n values","sig":null,"attributes":[{"value":"/ An iterator visiting all key-value pairs in arbitrary order, with mutable references to the","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":90245,"byte_end":90340,"line_start":226,"line_end":226,"column_start":5,"column_end":100}},{"value":"/ values","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":90345,"byte_end":90355,"line_start":227,"line_end":227,"column_start":5,"column_end":15}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":90360,"byte_end":90363,"line_start":228,"line_end":228,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":90368,"byte_end":90382,"line_start":229,"line_end":229,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":90387,"byte_end":90390,"line_start":230,"line_end":230,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":90395,"byte_end":90402,"line_start":231,"line_end":231,"column_start":5,"column_end":12}},{"value":"/ use heapless::LinearMap;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":90407,"byte_end":90435,"line_start":232,"line_end":232,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":90440,"byte_end":90443,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ let mut map: LinearMap<_, _, 8> = LinearMap::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":90448,"byte_end":90503,"line_start":234,"line_end":234,"column_start":5,"column_end":60}},{"value":"/ map.insert(\"a\", 1).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":90508,"byte_end":90540,"line_start":235,"line_end":235,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"b\", 2).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":90545,"byte_end":90577,"line_start":236,"line_end":236,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"c\", 3).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":90582,"byte_end":90614,"line_start":237,"line_end":237,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":90619,"byte_end":90622,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ // Update all values","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":90627,"byte_end":90651,"line_start":239,"line_end":239,"column_start":5,"column_end":29}},{"value":"/ for (_, val) in map.iter_mut() {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":90656,"byte_end":90692,"line_start":240,"line_end":240,"column_start":5,"column_end":41}},{"value":"/     *val = 2;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":90697,"byte_end":90714,"line_start":241,"line_end":241,"column_start":5,"column_end":22}},{"value":"/ }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":90719,"byte_end":90724,"line_start":242,"line_end":242,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":90729,"byte_end":90732,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ for (key, val) in &map {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":90737,"byte_end":90765,"line_start":244,"line_end":244,"column_start":5,"column_end":33}},{"value":"/     println!(\"key: {} val: {}\", key, val);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":90770,"byte_end":90816,"line_start":245,"line_end":245,"column_start":5,"column_end":51}},{"value":"/ }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":90821,"byte_end":90826,"line_start":246,"line_end":246,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":90831,"byte_end":90838,"line_start":247,"line_end":247,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":784},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":91407,"byte_end":91411,"line_start":270,"line_end":270,"column_start":12,"column_end":16},"name":"keys","qualname":"<LinearMap<K, V, N>>::keys","value":"pub fn keys(&Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all keys in arbitrary order","sig":null,"attributes":[{"value":"/ An iterator visiting all keys in arbitrary order","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":90989,"byte_end":91041,"line_start":254,"line_end":254,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":91046,"byte_end":91049,"line_start":255,"line_end":255,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":91054,"byte_end":91068,"line_start":256,"line_end":256,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":91073,"byte_end":91076,"line_start":257,"line_end":257,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":91081,"byte_end":91088,"line_start":258,"line_end":258,"column_start":5,"column_end":12}},{"value":"/ use heapless::LinearMap;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":91093,"byte_end":91121,"line_start":259,"line_end":259,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":91126,"byte_end":91129,"line_start":260,"line_end":260,"column_start":5,"column_end":8}},{"value":"/ let mut map: LinearMap<_, _, 8> = LinearMap::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":91134,"byte_end":91189,"line_start":261,"line_end":261,"column_start":5,"column_end":60}},{"value":"/ map.insert(\"a\", 1).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":91194,"byte_end":91226,"line_start":262,"line_end":262,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"b\", 2).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":91231,"byte_end":91263,"line_start":263,"line_end":263,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"c\", 3).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":91268,"byte_end":91300,"line_start":264,"line_end":264,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":91305,"byte_end":91308,"line_start":265,"line_end":265,"column_start":5,"column_end":8}},{"value":"/ for key in map.keys() {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":91313,"byte_end":91340,"line_start":266,"line_end":266,"column_start":5,"column_end":32}},{"value":"/     println!(\"{}\", key);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":91345,"byte_end":91373,"line_start":267,"line_end":267,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":91378,"byte_end":91383,"line_start":268,"line_end":268,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":91388,"byte_end":91395,"line_start":269,"line_end":269,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":787},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":91943,"byte_end":91949,"line_start":289,"line_end":289,"column_start":12,"column_end":18},"name":"remove","qualname":"<LinearMap<K, V, N>>::remove","value":"pub fn remove<Q>(&mut Self, &Q) -> Option<V> where K: Borrow<Q>, Q: Eq +\n?Sized","parent":null,"children":[],"decl_id":null,"docs":" Removes a key from the map, returning the value at the key if the key was previously in the\n map","sig":null,"attributes":[{"value":"/ Removes a key from the map, returning the value at the key if the key was previously in the","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":91496,"byte_end":91591,"line_start":274,"line_end":274,"column_start":5,"column_end":100}},{"value":"/ map","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":91596,"byte_end":91603,"line_start":275,"line_end":275,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":91608,"byte_end":91611,"line_start":276,"line_end":276,"column_start":5,"column_end":8}},{"value":"/ Computes in **O(N)** time","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":91616,"byte_end":91645,"line_start":277,"line_end":277,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":91650,"byte_end":91653,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":91658,"byte_end":91672,"line_start":279,"line_end":279,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":91677,"byte_end":91680,"line_start":280,"line_end":280,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":91685,"byte_end":91692,"line_start":281,"line_end":281,"column_start":5,"column_end":12}},{"value":"/ use heapless::LinearMap;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":91697,"byte_end":91725,"line_start":282,"line_end":282,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":91730,"byte_end":91733,"line_start":283,"line_end":283,"column_start":5,"column_end":8}},{"value":"/ let mut map: LinearMap<_, _, 8> = LinearMap::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":91738,"byte_end":91793,"line_start":284,"line_end":284,"column_start":5,"column_end":60}},{"value":"/ map.insert(1, \"a\").unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":91798,"byte_end":91830,"line_start":285,"line_end":285,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(map.remove(&1), Some(\"a\"));","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":91835,"byte_end":91877,"line_start":286,"line_end":286,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(map.remove(&1), None);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":91882,"byte_end":91919,"line_start":287,"line_end":287,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":91924,"byte_end":91931,"line_start":288,"line_end":288,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":792},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":92685,"byte_end":92691,"line_start":319,"line_end":319,"column_start":12,"column_end":18},"name":"values","qualname":"<LinearMap<K, V, N>>::values","value":"pub fn values(&Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all values in arbitrary order","sig":null,"attributes":[{"value":"/ An iterator visiting all values in arbitrary order","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":92263,"byte_end":92317,"line_start":303,"line_end":303,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":92322,"byte_end":92325,"line_start":304,"line_end":304,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":92330,"byte_end":92344,"line_start":305,"line_end":305,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":92349,"byte_end":92352,"line_start":306,"line_end":306,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":92357,"byte_end":92364,"line_start":307,"line_end":307,"column_start":5,"column_end":12}},{"value":"/ use heapless::LinearMap;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":92369,"byte_end":92397,"line_start":308,"line_end":308,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":92402,"byte_end":92405,"line_start":309,"line_end":309,"column_start":5,"column_end":8}},{"value":"/ let mut map: LinearMap<_, _, 8> = LinearMap::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":92410,"byte_end":92465,"line_start":310,"line_end":310,"column_start":5,"column_end":60}},{"value":"/ map.insert(\"a\", 1).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":92470,"byte_end":92502,"line_start":311,"line_end":311,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"b\", 2).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":92507,"byte_end":92539,"line_start":312,"line_end":312,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"c\", 3).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":92544,"byte_end":92576,"line_start":313,"line_end":313,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":92581,"byte_end":92584,"line_start":314,"line_end":314,"column_start":5,"column_end":8}},{"value":"/ for val in map.values() {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":92589,"byte_end":92618,"line_start":315,"line_end":315,"column_start":5,"column_end":34}},{"value":"/     println!(\"{}\", val);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":92623,"byte_end":92651,"line_start":316,"line_end":316,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":92656,"byte_end":92661,"line_start":317,"line_end":317,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":92666,"byte_end":92673,"line_start":318,"line_end":318,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":795},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":93286,"byte_end":93296,"line_start":343,"line_end":343,"column_start":12,"column_end":22},"name":"values_mut","qualname":"<LinearMap<K, V, N>>::values_mut","value":"pub fn values_mut(&mut Self) -> /*impl Trait*/","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all values mutably in arbitrary order","sig":null,"attributes":[{"value":"/ An iterator visiting all values mutably in arbitrary order","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":92776,"byte_end":92838,"line_start":323,"line_end":323,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":92843,"byte_end":92846,"line_start":324,"line_end":324,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":92851,"byte_end":92865,"line_start":325,"line_end":325,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":92870,"byte_end":92873,"line_start":326,"line_end":326,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":92878,"byte_end":92885,"line_start":327,"line_end":327,"column_start":5,"column_end":12}},{"value":"/ use heapless::LinearMap;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":92890,"byte_end":92918,"line_start":328,"line_end":328,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":92923,"byte_end":92926,"line_start":329,"line_end":329,"column_start":5,"column_end":8}},{"value":"/ let mut map: LinearMap<_, _, 8> = LinearMap::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":92931,"byte_end":92986,"line_start":330,"line_end":330,"column_start":5,"column_end":60}},{"value":"/ map.insert(\"a\", 1).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":92991,"byte_end":93023,"line_start":331,"line_end":331,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"b\", 2).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":93028,"byte_end":93060,"line_start":332,"line_end":332,"column_start":5,"column_end":37}},{"value":"/ map.insert(\"c\", 3).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":93065,"byte_end":93097,"line_start":333,"line_end":333,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":93102,"byte_end":93105,"line_start":334,"line_end":334,"column_start":5,"column_end":8}},{"value":"/ for val in map.values_mut() {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":93110,"byte_end":93143,"line_start":335,"line_end":335,"column_start":5,"column_end":38}},{"value":"/     *val += 10;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":93148,"byte_end":93167,"line_start":336,"line_end":336,"column_start":5,"column_end":24}},{"value":"/ }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":93172,"byte_end":93177,"line_start":337,"line_end":337,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":93182,"byte_end":93185,"line_start":338,"line_end":338,"column_start":5,"column_end":8}},{"value":"/ for val in map.values() {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":93190,"byte_end":93219,"line_start":339,"line_end":339,"column_start":5,"column_end":34}},{"value":"/     println!(\"{}\", val);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":93224,"byte_end":93252,"line_start":340,"line_end":340,"column_start":5,"column_end":33}},{"value":"/ }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":93257,"byte_end":93262,"line_start":341,"line_end":341,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":93267,"byte_end":93274,"line_start":342,"line_end":342,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":853},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":95273,"byte_end":95277,"line_start":444,"line_end":444,"column_start":12,"column_end":16},"name":"Iter","qualname":"::linear_map::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":857}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":875},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":95938,"byte_end":95945,"line_start":473,"line_end":473,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::linear_map::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":879}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":925},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":97721,"byte_end":97727,"line_start":8,"line_end":8,"column_start":12,"column_end":18},"name":"String","qualname":"::string::String","value":"String {  }","parent":null,"children":[{"krate":0,"index":927}],"decl_id":null,"docs":" A fixed capacity [`String`](https://doc.rust-lang.org/std/string/struct.String.html)\n","sig":null,"attributes":[{"value":"/ A fixed capacity [`String`](https://doc.rust-lang.org/std/string/struct.String.html)","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":97621,"byte_end":97709,"line_start":7,"line_end":7,"column_start":1,"column_end":89}}]},{"kind":"Method","id":{"krate":0,"index":930},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":98229,"byte_end":98232,"line_start":29,"line_end":29,"column_start":18,"column_end":21},"name":"new","qualname":"<String<N>>::new","value":"pub const fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new, empty `String` with a fixed capacity of `N`","sig":null,"attributes":[{"value":"/ Constructs a new, empty `String` with a fixed capacity of `N`","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":97807,"byte_end":97872,"line_start":13,"line_end":13,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":97877,"byte_end":97880,"line_start":14,"line_end":14,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":97885,"byte_end":97899,"line_start":15,"line_end":15,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":97904,"byte_end":97907,"line_start":16,"line_end":16,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":97912,"byte_end":97928,"line_start":17,"line_end":17,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":97933,"byte_end":97936,"line_start":18,"line_end":18,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":97941,"byte_end":97948,"line_start":19,"line_end":19,"column_start":5,"column_end":12}},{"value":"/ use heapless::String;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":97953,"byte_end":97978,"line_start":20,"line_end":20,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":97983,"byte_end":97986,"line_start":21,"line_end":21,"column_start":5,"column_end":8}},{"value":"/ // allocate the string on the stack","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":97991,"byte_end":98030,"line_start":22,"line_end":22,"column_start":5,"column_end":44}},{"value":"/ let mut s: String<4> = String::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":98035,"byte_end":98076,"line_start":23,"line_end":23,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":98081,"byte_end":98084,"line_start":24,"line_end":24,"column_start":5,"column_end":8}},{"value":"/ // allocate the string in a static variable","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":98089,"byte_end":98136,"line_start":25,"line_end":25,"column_start":5,"column_end":52}},{"value":"/ static mut S: String<4> = String::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":98141,"byte_end":98185,"line_start":26,"line_end":26,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":98190,"byte_end":98197,"line_start":27,"line_end":27,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":98202,"byte_end":98211,"line_start":28,"line_end":28,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":931},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":98739,"byte_end":98749,"line_start":51,"line_end":51,"column_start":12,"column_end":22},"name":"into_bytes","qualname":"<String<N>>::into_bytes","value":"pub fn into_bytes(Self) -> Vec<u8, >","parent":null,"children":[],"decl_id":null,"docs":" Converts a `String` into a byte vector.","sig":null,"attributes":[{"value":"/ Converts a `String` into a byte vector.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":98289,"byte_end":98332,"line_start":33,"line_end":33,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":98337,"byte_end":98340,"line_start":34,"line_end":34,"column_start":5,"column_end":8}},{"value":"/ This consumes the `String`, so we do not need to copy its contents.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":98345,"byte_end":98416,"line_start":35,"line_end":35,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":98421,"byte_end":98424,"line_start":36,"line_end":36,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":98429,"byte_end":98443,"line_start":37,"line_end":37,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":98448,"byte_end":98451,"line_start":38,"line_end":38,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":98456,"byte_end":98472,"line_start":39,"line_end":39,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":98477,"byte_end":98480,"line_start":40,"line_end":40,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":98485,"byte_end":98492,"line_start":41,"line_end":41,"column_start":5,"column_end":12}},{"value":"/ use heapless::String;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":98497,"byte_end":98522,"line_start":42,"line_end":42,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":98527,"byte_end":98530,"line_start":43,"line_end":43,"column_start":5,"column_end":8}},{"value":"/ let s: String<4> = String::from(\"ab\");","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":98535,"byte_end":98577,"line_start":44,"line_end":44,"column_start":5,"column_end":47}},{"value":"/ let b = s.into_bytes();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":98582,"byte_end":98609,"line_start":45,"line_end":45,"column_start":5,"column_end":32}},{"value":"/ assert!(b.len() == 2);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":98614,"byte_end":98640,"line_start":46,"line_end":46,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":98645,"byte_end":98648,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(&['a' as u8, 'b' as u8], &b[..]);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":98653,"byte_end":98701,"line_start":48,"line_end":48,"column_start":5,"column_end":53}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":98706,"byte_end":98713,"line_start":49,"line_end":49,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":98718,"byte_end":98727,"line_start":50,"line_end":50,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":932},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":99234,"byte_end":99240,"line_start":71,"line_end":71,"column_start":12,"column_end":18},"name":"as_str","qualname":"<String<N>>::as_str","value":"pub fn as_str(&Self) -> &str","parent":null,"children":[],"decl_id":null,"docs":" Extracts a string slice containing the entire string.","sig":null,"attributes":[{"value":"/ Extracts a string slice containing the entire string.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":98800,"byte_end":98857,"line_start":55,"line_end":55,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":98862,"byte_end":98865,"line_start":56,"line_end":56,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":98870,"byte_end":98884,"line_start":57,"line_end":57,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":98889,"byte_end":98892,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":98897,"byte_end":98913,"line_start":59,"line_end":59,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":98918,"byte_end":98921,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":98926,"byte_end":98933,"line_start":61,"line_end":61,"column_start":5,"column_end":12}},{"value":"/ use heapless::String;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":98938,"byte_end":98963,"line_start":62,"line_end":62,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":98968,"byte_end":98971,"line_start":63,"line_end":63,"column_start":5,"column_end":8}},{"value":"/ let mut s: String<4> = String::from(\"ab\");","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":98976,"byte_end":99022,"line_start":64,"line_end":64,"column_start":5,"column_end":51}},{"value":"/ assert!(s.as_str() == \"ab\");","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":99027,"byte_end":99059,"line_start":65,"line_end":65,"column_start":5,"column_end":37}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":99064,"byte_end":99067,"line_start":66,"line_end":66,"column_start":5,"column_end":8}},{"value":"/ let _s = s.as_str();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":99072,"byte_end":99096,"line_start":67,"line_end":67,"column_start":5,"column_end":29}},{"value":"/ // s.push('c'); // <- cannot borrow `s` as mutable because it is also borrowed as immutable","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":99101,"byte_end":99196,"line_start":68,"line_end":68,"column_start":5,"column_end":100}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":99201,"byte_end":99208,"line_start":69,"line_end":69,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":99213,"byte_end":99222,"line_start":70,"line_end":70,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":933},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":99655,"byte_end":99665,"line_start":89,"line_end":89,"column_start":12,"column_end":22},"name":"as_mut_str","qualname":"<String<N>>::as_mut_str","value":"pub fn as_mut_str(&mut Self) -> &mut str","parent":null,"children":[],"decl_id":null,"docs":" Converts a `String` into a mutable string slice.","sig":null,"attributes":[{"value":"/ Converts a `String` into a mutable string slice.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":99334,"byte_end":99386,"line_start":75,"line_end":75,"column_start":5,"column_end":57}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":99391,"byte_end":99394,"line_start":76,"line_end":76,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":99399,"byte_end":99413,"line_start":77,"line_end":77,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":99418,"byte_end":99421,"line_start":78,"line_end":78,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":99426,"byte_end":99442,"line_start":79,"line_end":79,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":99447,"byte_end":99450,"line_start":80,"line_end":80,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":99455,"byte_end":99462,"line_start":81,"line_end":81,"column_start":5,"column_end":12}},{"value":"/ use heapless::String;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":99467,"byte_end":99492,"line_start":82,"line_end":82,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":99497,"byte_end":99500,"line_start":83,"line_end":83,"column_start":5,"column_end":8}},{"value":"/ let mut s: String<4> = String::from(\"ab\");","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":99505,"byte_end":99551,"line_start":84,"line_end":84,"column_start":5,"column_end":51}},{"value":"/ let s = s.as_mut_str();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":99556,"byte_end":99583,"line_start":85,"line_end":85,"column_start":5,"column_end":32}},{"value":"/ s.make_ascii_uppercase();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":99588,"byte_end":99617,"line_start":86,"line_end":86,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":99622,"byte_end":99629,"line_start":87,"line_end":87,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":99634,"byte_end":99643,"line_start":88,"line_end":88,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":934},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":100526,"byte_end":100536,"line_start":117,"line_end":117,"column_start":19,"column_end":29},"name":"as_mut_vec","qualname":"<String<N>>::as_mut_vec","value":"pub unsafe fn as_mut_vec(&mut Self) -> &mut Vec<u8, >","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the contents of this `String`.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the contents of this `String`.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":99775,"byte_end":99840,"line_start":93,"line_end":93,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":99845,"byte_end":99848,"line_start":94,"line_end":94,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":99853,"byte_end":99865,"line_start":95,"line_end":95,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":99870,"byte_end":99873,"line_start":96,"line_end":96,"column_start":5,"column_end":8}},{"value":"/ This function is unsafe because it does not check that the bytes passed","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":99878,"byte_end":99953,"line_start":97,"line_end":97,"column_start":5,"column_end":80}},{"value":"/ to it are valid UTF-8. If this constraint is violated, it may cause","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":99958,"byte_end":100029,"line_start":98,"line_end":98,"column_start":5,"column_end":76}},{"value":"/ memory unsafety issues with future users of the `String`, as the rest of","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":100034,"byte_end":100110,"line_start":99,"line_end":99,"column_start":5,"column_end":81}},{"value":"/ the library assumes that `String`s are valid UTF-8.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":100115,"byte_end":100170,"line_start":100,"line_end":100,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":100175,"byte_end":100178,"line_start":101,"line_end":101,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":100183,"byte_end":100197,"line_start":102,"line_end":102,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":100202,"byte_end":100205,"line_start":103,"line_end":103,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":100210,"byte_end":100226,"line_start":104,"line_end":104,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":100231,"byte_end":100234,"line_start":105,"line_end":105,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":100239,"byte_end":100246,"line_start":106,"line_end":106,"column_start":5,"column_end":12}},{"value":"/ let mut s = String::from(\"hello\");","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":100251,"byte_end":100289,"line_start":107,"line_end":107,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":100294,"byte_end":100297,"line_start":108,"line_end":108,"column_start":5,"column_end":8}},{"value":"/ unsafe {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":100302,"byte_end":100314,"line_start":109,"line_end":109,"column_start":5,"column_end":17}},{"value":"/     let vec = s.as_mut_vec();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":100319,"byte_end":100352,"line_start":110,"line_end":110,"column_start":5,"column_end":38}},{"value":"/     assert_eq!(&[104, 101, 108, 108, 111][..], &vec[..]);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":100357,"byte_end":100418,"line_start":111,"line_end":111,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":100423,"byte_end":100426,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/     vec.reverse();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":100431,"byte_end":100453,"line_start":113,"line_end":113,"column_start":5,"column_end":27}},{"value":"/ }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":100458,"byte_end":100463,"line_start":114,"line_end":114,"column_start":5,"column_end":10}},{"value":"/ assert_eq!(s, \"olleh\");","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":100468,"byte_end":100495,"line_start":115,"line_end":115,"column_start":5,"column_end":32}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":100500,"byte_end":100507,"line_start":116,"line_end":116,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":935},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":101018,"byte_end":101026,"line_start":139,"line_end":139,"column_start":12,"column_end":20},"name":"push_str","qualname":"<String<N>>::push_str","value":"pub fn push_str(&mut Self, &str) -> Result<(), ()>","parent":null,"children":[],"decl_id":null,"docs":" Appends a given string slice onto the end of this `String`.","sig":null,"attributes":[{"value":"/ Appends a given string slice onto the end of this `String`.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":100602,"byte_end":100665,"line_start":121,"line_end":121,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":100670,"byte_end":100673,"line_start":122,"line_end":122,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":100678,"byte_end":100692,"line_start":123,"line_end":123,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":100697,"byte_end":100700,"line_start":124,"line_end":124,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":100705,"byte_end":100721,"line_start":125,"line_end":125,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":100726,"byte_end":100729,"line_start":126,"line_end":126,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":100734,"byte_end":100741,"line_start":127,"line_end":127,"column_start":5,"column_end":12}},{"value":"/ use heapless::String;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":100746,"byte_end":100771,"line_start":128,"line_end":128,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":100776,"byte_end":100779,"line_start":129,"line_end":129,"column_start":5,"column_end":8}},{"value":"/ let mut s: String<8> = String::from(\"foo\");","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":100784,"byte_end":100831,"line_start":130,"line_end":130,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":100836,"byte_end":100839,"line_start":131,"line_end":131,"column_start":5,"column_end":8}},{"value":"/ assert!(s.push_str(\"bar\").is_ok());","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":100844,"byte_end":100883,"line_start":132,"line_end":132,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":100888,"byte_end":100891,"line_start":133,"line_end":133,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(\"foobar\", s);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":100896,"byte_end":100924,"line_start":134,"line_end":134,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":100929,"byte_end":100932,"line_start":135,"line_end":135,"column_start":5,"column_end":8}},{"value":"/ assert!(s.push_str(\"tender\").is_err());","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":100937,"byte_end":100980,"line_start":136,"line_end":136,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":100985,"byte_end":100992,"line_start":137,"line_end":137,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":100997,"byte_end":101006,"line_start":138,"line_end":138,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":936},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":101433,"byte_end":101441,"line_start":156,"line_end":156,"column_start":12,"column_end":20},"name":"capacity","qualname":"<String<N>>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the maximum number of elements the String can hold","sig":null,"attributes":[{"value":"/ Returns the maximum number of elements the String can hold","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":101137,"byte_end":101199,"line_start":143,"line_end":143,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":101204,"byte_end":101207,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":101212,"byte_end":101226,"line_start":145,"line_end":145,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":101231,"byte_end":101234,"line_start":146,"line_end":146,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":101239,"byte_end":101255,"line_start":147,"line_end":147,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":101260,"byte_end":101263,"line_start":148,"line_end":148,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":101268,"byte_end":101275,"line_start":149,"line_end":149,"column_start":5,"column_end":12}},{"value":"/ use heapless::String;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":101280,"byte_end":101305,"line_start":150,"line_end":150,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":101310,"byte_end":101313,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ let mut s: String<4> = String::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":101318,"byte_end":101359,"line_start":152,"line_end":152,"column_start":5,"column_end":46}},{"value":"/ assert!(s.capacity() == 4);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":101364,"byte_end":101395,"line_start":153,"line_end":153,"column_start":5,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":101400,"byte_end":101407,"line_start":154,"line_end":154,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":101412,"byte_end":101421,"line_start":155,"line_end":155,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":937},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":102006,"byte_end":102010,"line_start":182,"line_end":182,"column_start":12,"column_end":16},"name":"push","qualname":"<String<N>>::push","value":"pub fn push(&mut Self, char) -> Result<(), ()>","parent":null,"children":[],"decl_id":null,"docs":" Appends the given [`char`] to the end of this `String`.","sig":null,"attributes":[{"value":"/ Appends the given [`char`] to the end of this `String`.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":101499,"byte_end":101558,"line_start":160,"line_end":160,"column_start":5,"column_end":64}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":101563,"byte_end":101566,"line_start":161,"line_end":161,"column_start":5,"column_end":8}},{"value":"/ [`char`]: ../../std/primitive.char.html","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":101571,"byte_end":101614,"line_start":162,"line_end":162,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":101619,"byte_end":101622,"line_start":163,"line_end":163,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":101627,"byte_end":101641,"line_start":164,"line_end":164,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":101646,"byte_end":101649,"line_start":165,"line_end":165,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":101654,"byte_end":101670,"line_start":166,"line_end":166,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":101675,"byte_end":101678,"line_start":167,"line_end":167,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":101683,"byte_end":101690,"line_start":168,"line_end":168,"column_start":5,"column_end":12}},{"value":"/ use heapless::String;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":101695,"byte_end":101720,"line_start":169,"line_end":169,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":101725,"byte_end":101728,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ let mut s: String<8> = String::from(\"abc\");","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":101733,"byte_end":101780,"line_start":171,"line_end":171,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":101785,"byte_end":101788,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ s.push('1').unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":101793,"byte_end":101818,"line_start":173,"line_end":173,"column_start":5,"column_end":30}},{"value":"/ s.push('2').unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":101823,"byte_end":101848,"line_start":174,"line_end":174,"column_start":5,"column_end":30}},{"value":"/ s.push('3').unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":101853,"byte_end":101878,"line_start":175,"line_end":175,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":101883,"byte_end":101886,"line_start":176,"line_end":176,"column_start":5,"column_end":8}},{"value":"/ assert!(\"abc123\" == s.as_str());","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":101891,"byte_end":101927,"line_start":177,"line_end":177,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":101932,"byte_end":101935,"line_start":178,"line_end":178,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(\"abc123\", s);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":101940,"byte_end":101968,"line_start":179,"line_end":179,"column_start":5,"column_end":33}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":101973,"byte_end":101980,"line_start":180,"line_end":180,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":101985,"byte_end":101994,"line_start":181,"line_end":181,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":940},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":102957,"byte_end":102965,"line_start":219,"line_end":219,"column_start":12,"column_end":20},"name":"truncate","qualname":"<String<N>>::truncate","value":"pub fn truncate(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Shortens this `String` to the specified length.","sig":null,"attributes":[{"value":"/ Shortens this `String` to the specified length.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":102276,"byte_end":102327,"line_start":191,"line_end":191,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":102332,"byte_end":102335,"line_start":192,"line_end":192,"column_start":5,"column_end":8}},{"value":"/ If `new_len` is greater than the string's current length, this has no","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":102340,"byte_end":102413,"line_start":193,"line_end":193,"column_start":5,"column_end":78}},{"value":"/ effect.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":102418,"byte_end":102429,"line_start":194,"line_end":194,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":102434,"byte_end":102437,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ Note that this method has no effect on the allocated capacity","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":102442,"byte_end":102507,"line_start":196,"line_end":196,"column_start":5,"column_end":70}},{"value":"/ of the string","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":102512,"byte_end":102529,"line_start":197,"line_end":197,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":102534,"byte_end":102537,"line_start":198,"line_end":198,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":102542,"byte_end":102554,"line_start":199,"line_end":199,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":102559,"byte_end":102562,"line_start":200,"line_end":200,"column_start":5,"column_end":8}},{"value":"/ Panics if `new_len` does not lie on a [`char`] boundary.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":102567,"byte_end":102627,"line_start":201,"line_end":201,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":102632,"byte_end":102635,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ [`char`]: ../../std/primitive.char.html","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":102640,"byte_end":102683,"line_start":203,"line_end":203,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":102688,"byte_end":102691,"line_start":204,"line_end":204,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":102696,"byte_end":102710,"line_start":205,"line_end":205,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":102715,"byte_end":102718,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":102723,"byte_end":102739,"line_start":207,"line_end":207,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":102744,"byte_end":102747,"line_start":208,"line_end":208,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":102752,"byte_end":102759,"line_start":209,"line_end":209,"column_start":5,"column_end":12}},{"value":"/ use heapless::String;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":102764,"byte_end":102789,"line_start":210,"line_end":210,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":102794,"byte_end":102797,"line_start":211,"line_end":211,"column_start":5,"column_end":8}},{"value":"/ let mut s: String<8> = String::from(\"hello\");","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":102802,"byte_end":102851,"line_start":212,"line_end":212,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":102856,"byte_end":102859,"line_start":213,"line_end":213,"column_start":5,"column_end":8}},{"value":"/ s.truncate(2);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":102864,"byte_end":102882,"line_start":214,"line_end":214,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":102887,"byte_end":102890,"line_start":215,"line_end":215,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(\"he\", s);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":102895,"byte_end":102919,"line_start":216,"line_end":216,"column_start":5,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":102924,"byte_end":102931,"line_start":217,"line_end":217,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":102936,"byte_end":102945,"line_start":218,"line_end":218,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":941},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":103706,"byte_end":103709,"line_start":247,"line_end":247,"column_start":12,"column_end":15},"name":"pop","qualname":"<String<N>>::pop","value":"pub fn pop(&mut Self) -> Option<char>","parent":null,"children":[],"decl_id":null,"docs":" Removes the last character from the string buffer and returns it.","sig":null,"attributes":[{"value":"/ Removes the last character from the string buffer and returns it.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":103143,"byte_end":103212,"line_start":226,"line_end":226,"column_start":5,"column_end":74}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":103217,"byte_end":103220,"line_start":227,"line_end":227,"column_start":5,"column_end":8}},{"value":"/ Returns [`None`] if this `String` is empty.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":103225,"byte_end":103272,"line_start":228,"line_end":228,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":103277,"byte_end":103280,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ [`None`]: ../../std/option/enum.Option.html#variant.None","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":103285,"byte_end":103345,"line_start":230,"line_end":230,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":103350,"byte_end":103353,"line_start":231,"line_end":231,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":103358,"byte_end":103372,"line_start":232,"line_end":232,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":103377,"byte_end":103380,"line_start":233,"line_end":233,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":103385,"byte_end":103401,"line_start":234,"line_end":234,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":103406,"byte_end":103409,"line_start":235,"line_end":235,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":103414,"byte_end":103421,"line_start":236,"line_end":236,"column_start":5,"column_end":12}},{"value":"/ use heapless::String;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":103426,"byte_end":103451,"line_start":237,"line_end":237,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":103456,"byte_end":103459,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ let mut s: String<8> = String::from(\"foo\");","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":103464,"byte_end":103511,"line_start":239,"line_end":239,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":103516,"byte_end":103519,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(s.pop(), Some('o'));","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":103524,"byte_end":103559,"line_start":241,"line_end":241,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(s.pop(), Some('o'));","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":103564,"byte_end":103599,"line_start":242,"line_end":242,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(s.pop(), Some('f'));","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":103604,"byte_end":103639,"line_start":243,"line_end":243,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":103644,"byte_end":103647,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(s.pop(), None);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":103652,"byte_end":103682,"line_start":245,"line_end":245,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":103687,"byte_end":103694,"line_start":246,"line_end":246,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":942},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":104486,"byte_end":104491,"line_start":281,"line_end":281,"column_start":12,"column_end":17},"name":"clear","qualname":"<String<N>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Truncates this `String`, removing all contents.","sig":null,"attributes":[{"value":"/ Truncates this `String`, removing all contents.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":103982,"byte_end":104033,"line_start":260,"line_end":260,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":104038,"byte_end":104041,"line_start":261,"line_end":261,"column_start":5,"column_end":8}},{"value":"/ While this means the `String` will have a length of zero, it does not","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":104046,"byte_end":104119,"line_start":262,"line_end":262,"column_start":5,"column_end":78}},{"value":"/ touch its capacity.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":104124,"byte_end":104147,"line_start":263,"line_end":263,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":104152,"byte_end":104155,"line_start":264,"line_end":264,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":104160,"byte_end":104174,"line_start":265,"line_end":265,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":104179,"byte_end":104182,"line_start":266,"line_end":266,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":104187,"byte_end":104203,"line_start":267,"line_end":267,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":104208,"byte_end":104211,"line_start":268,"line_end":268,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":104216,"byte_end":104223,"line_start":269,"line_end":269,"column_start":5,"column_end":12}},{"value":"/ use heapless::String;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":104228,"byte_end":104253,"line_start":270,"line_end":270,"column_start":5,"column_end":30}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":104258,"byte_end":104261,"line_start":271,"line_end":271,"column_start":5,"column_end":8}},{"value":"/ let mut s: String<8> = String::from(\"foo\");","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":104266,"byte_end":104313,"line_start":272,"line_end":272,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":104318,"byte_end":104321,"line_start":273,"line_end":273,"column_start":5,"column_end":8}},{"value":"/ s.clear();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":104326,"byte_end":104340,"line_start":274,"line_end":274,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":104345,"byte_end":104348,"line_start":275,"line_end":275,"column_start":5,"column_end":8}},{"value":"/ assert!(s.is_empty());","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":104353,"byte_end":104379,"line_start":276,"line_end":276,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(0, s.len());","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":104384,"byte_end":104411,"line_start":277,"line_end":277,"column_start":5,"column_end":32}},{"value":"/ assert_eq!(8, s.capacity());","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":104416,"byte_end":104448,"line_start":278,"line_end":278,"column_start":5,"column_end":37}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":104453,"byte_end":104460,"line_start":279,"line_end":279,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":104465,"byte_end":104474,"line_start":280,"line_end":280,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1053},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":114507,"byte_end":114510,"line_start":36,"line_end":36,"column_start":12,"column_end":15},"name":"Vec","qualname":"::vec::Vec","value":"Vec {  }","parent":null,"children":[{"krate":0,"index":1056},{"krate":0,"index":1058}],"decl_id":null,"docs":" A fixed capacity [`Vec`](https://doc.rust-lang.org/std/vec/struct.Vec.html)","sig":null,"attributes":[{"value":"/ A fixed capacity [`Vec`](https://doc.rust-lang.org/std/vec/struct.Vec.html)","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":113881,"byte_end":113960,"line_start":7,"line_end":7,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":113961,"byte_end":113964,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":113965,"byte_end":113979,"line_start":9,"line_end":9,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":113980,"byte_end":113983,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":113984,"byte_end":113991,"line_start":11,"line_end":11,"column_start":1,"column_end":8}},{"value":"/ use heapless::Vec;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":113992,"byte_end":114014,"line_start":12,"line_end":12,"column_start":1,"column_end":23}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":114015,"byte_end":114018,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":114019,"byte_end":114022,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ // A vector with a fixed capacity of 8 elements allocated on the stack","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":114023,"byte_end":114097,"line_start":15,"line_end":15,"column_start":1,"column_end":75}},{"value":"/ let mut vec = Vec::<_, 8>::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":114098,"byte_end":114135,"line_start":16,"line_end":16,"column_start":1,"column_end":38}},{"value":"/ vec.push(1);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":114136,"byte_end":114152,"line_start":17,"line_end":17,"column_start":1,"column_end":17}},{"value":"/ vec.push(2);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":114153,"byte_end":114169,"line_start":18,"line_end":18,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":114170,"byte_end":114173,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(vec.len(), 2);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":114174,"byte_end":114203,"line_start":20,"line_end":20,"column_start":1,"column_end":30}},{"value":"/ assert_eq!(vec[0], 1);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":114204,"byte_end":114230,"line_start":21,"line_end":21,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":114231,"byte_end":114234,"line_start":22,"line_end":22,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(vec.pop(), Some(2));","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":114235,"byte_end":114270,"line_start":23,"line_end":23,"column_start":1,"column_end":36}},{"value":"/ assert_eq!(vec.len(), 1);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":114271,"byte_end":114300,"line_start":24,"line_end":24,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":114301,"byte_end":114304,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ vec[0] = 7;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":114305,"byte_end":114320,"line_start":26,"line_end":26,"column_start":1,"column_end":16}},{"value":"/ assert_eq!(vec[0], 7);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":114321,"byte_end":114347,"line_start":27,"line_end":27,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":114348,"byte_end":114351,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/ vec.extend([1, 2, 3].iter().cloned());","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":114352,"byte_end":114394,"line_start":29,"line_end":29,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":114395,"byte_end":114398,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/ for x in &vec {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":114399,"byte_end":114418,"line_start":31,"line_end":31,"column_start":1,"column_end":20}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":114419,"byte_end":114445,"line_start":32,"line_end":32,"column_start":1,"column_end":27}},{"value":"/ }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":114446,"byte_end":114451,"line_start":33,"line_end":33,"column_start":1,"column_end":6}},{"value":"/ assert_eq!(*vec, [7, 1, 2, 3]);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":114452,"byte_end":114487,"line_start":34,"line_end":34,"column_start":1,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":114488,"byte_end":114495,"line_start":35,"line_end":35,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":1063},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":115143,"byte_end":115146,"line_start":58,"line_end":58,"column_start":18,"column_end":21},"name":"new","qualname":"<Vec<T, N>>::new","value":"pub const fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new, empty vector with a fixed capacity of `N`","sig":null,"attributes":[{"value":"/ Constructs a new, empty vector with a fixed capacity of `N`","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":114681,"byte_end":114744,"line_start":44,"line_end":44,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":114749,"byte_end":114752,"line_start":45,"line_end":45,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":114757,"byte_end":114771,"line_start":46,"line_end":46,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":114776,"byte_end":114779,"line_start":47,"line_end":47,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":114784,"byte_end":114791,"line_start":48,"line_end":48,"column_start":5,"column_end":12}},{"value":"/ use heapless::Vec;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":114796,"byte_end":114818,"line_start":49,"line_end":49,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":114823,"byte_end":114826,"line_start":50,"line_end":50,"column_start":5,"column_end":8}},{"value":"/ // allocate the vector on the stack","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":114831,"byte_end":114870,"line_start":51,"line_end":51,"column_start":5,"column_end":44}},{"value":"/ let mut x: Vec<u8, 16> = Vec::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":114875,"byte_end":114915,"line_start":52,"line_end":52,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":114920,"byte_end":114923,"line_start":53,"line_end":53,"column_start":5,"column_end":8}},{"value":"/ // allocate the vector in a static variable","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":114928,"byte_end":114975,"line_start":54,"line_end":54,"column_start":5,"column_end":52}},{"value":"/ static mut X: Vec<u8, 16> = Vec::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":114980,"byte_end":115023,"line_start":55,"line_end":55,"column_start":5,"column_end":48}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":115028,"byte_end":115035,"line_start":56,"line_end":56,"column_start":5,"column_end":12}},{"value":"/ `Vec` `const` constructor; wrap the returned value in [`Vec`](../struct.Vec.html)","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":115040,"byte_end":115125,"line_start":57,"line_end":57,"column_start":5,"column_end":90}}]},{"kind":"Method","id":{"krate":0,"index":1065},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":115681,"byte_end":115691,"line_start":80,"line_end":80,"column_start":12,"column_end":22},"name":"from_slice","qualname":"<Vec<T, N>>::from_slice","value":"pub fn from_slice(&[T]) -> Result<Self, ()> where T: Clone","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new vector with a fixed capacity of `N` and fills it\n with the provided slice.","sig":null,"attributes":[{"value":"/ Constructs a new vector with a fixed capacity of `N` and fills it","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":115333,"byte_end":115402,"line_start":68,"line_end":68,"column_start":5,"column_end":74}},{"value":"/ with the provided slice.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":115407,"byte_end":115435,"line_start":69,"line_end":69,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":115440,"byte_end":115443,"line_start":70,"line_end":70,"column_start":5,"column_end":8}},{"value":"/ This is equivalent to the following code:","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":115448,"byte_end":115493,"line_start":71,"line_end":71,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":115498,"byte_end":115501,"line_start":72,"line_end":72,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":115506,"byte_end":115513,"line_start":73,"line_end":73,"column_start":5,"column_end":12}},{"value":"/ use heapless::Vec;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":115518,"byte_end":115540,"line_start":74,"line_end":74,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":115545,"byte_end":115548,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ let mut v: Vec<u8, 16> = Vec::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":115553,"byte_end":115593,"line_start":76,"line_end":76,"column_start":5,"column_end":45}},{"value":"/ v.extend_from_slice(&[1, 2, 3]).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":115598,"byte_end":115643,"line_start":77,"line_end":77,"column_start":5,"column_end":50}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":115648,"byte_end":115655,"line_start":78,"line_end":78,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":115660,"byte_end":115669,"line_start":79,"line_end":79,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1067},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":116395,"byte_end":116403,"line_start":110,"line_end":110,"column_start":12,"column_end":20},"name":"as_slice","qualname":"<Vec<T, N>>::as_slice","value":"pub fn as_slice(&Self) -> &[T]","parent":null,"children":[],"decl_id":null,"docs":" Extracts a slice containing the entire vector.","sig":null,"attributes":[{"value":"/ Extracts a slice containing the entire vector.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":116073,"byte_end":116123,"line_start":99,"line_end":99,"column_start":5,"column_end":55}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":116128,"byte_end":116131,"line_start":100,"line_end":100,"column_start":5,"column_end":8}},{"value":"/ Equivalent to `&s[..]`.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":116136,"byte_end":116163,"line_start":101,"line_end":101,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":116168,"byte_end":116171,"line_start":102,"line_end":102,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":116176,"byte_end":116190,"line_start":103,"line_end":103,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":116195,"byte_end":116198,"line_start":104,"line_end":104,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":116203,"byte_end":116210,"line_start":105,"line_end":105,"column_start":5,"column_end":12}},{"value":"/ use heapless::Vec;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":116215,"byte_end":116237,"line_start":106,"line_end":106,"column_start":5,"column_end":27}},{"value":"/ let buffer: Vec<u8, 5> = Vec::from_slice(&[1, 2, 3, 5, 8]).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":116242,"byte_end":116314,"line_start":107,"line_end":107,"column_start":5,"column_end":77}},{"value":"/ assert_eq!(buffer.as_slice(), &[1, 2, 3, 5, 8]);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":116319,"byte_end":116371,"line_start":108,"line_end":108,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":116376,"byte_end":116383,"line_start":109,"line_end":109,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1068},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":117042,"byte_end":117052,"line_start":127,"line_end":127,"column_start":12,"column_end":22},"name":"into_array","qualname":"<Vec<T, N>>::into_array","value":"pub fn into_array<const M: usize>(Self) -> Result<[T; ], Self>","parent":null,"children":[],"decl_id":null,"docs":" Returns the contents of the vector as an array of length `M` if the length\n of the vector is exactly `M`, otherwise returns `Err(self)`.","sig":null,"attributes":[{"value":"/ Returns the contents of the vector as an array of length `M` if the length","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":116616,"byte_end":116694,"line_start":116,"line_end":116,"column_start":5,"column_end":83}},{"value":"/ of the vector is exactly `M`, otherwise returns `Err(self)`.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":116699,"byte_end":116763,"line_start":117,"line_end":117,"column_start":5,"column_end":69}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":116768,"byte_end":116771,"line_start":118,"line_end":118,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":116776,"byte_end":116790,"line_start":119,"line_end":119,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":116795,"byte_end":116798,"line_start":120,"line_end":120,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":116803,"byte_end":116810,"line_start":121,"line_end":121,"column_start":5,"column_end":12}},{"value":"/ use heapless::Vec;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":116815,"byte_end":116837,"line_start":122,"line_end":122,"column_start":5,"column_end":27}},{"value":"/ let buffer: Vec<u8, 42> = Vec::from_slice(&[1, 2, 3, 5, 8]).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":116842,"byte_end":116915,"line_start":123,"line_end":123,"column_start":5,"column_end":78}},{"value":"/ let array: [u8; 5] = buffer.into_array().unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":116920,"byte_end":116974,"line_start":124,"line_end":124,"column_start":5,"column_end":59}},{"value":"/ assert_eq!(array, [1, 2, 3, 5, 8]);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":116979,"byte_end":117018,"line_start":125,"line_end":125,"column_start":5,"column_end":44}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":117023,"byte_end":117030,"line_start":126,"line_end":126,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1073},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":118242,"byte_end":118250,"line_start":161,"line_end":161,"column_start":18,"column_end":26},"name":"capacity","qualname":"<Vec<T, N>>::capacity","value":"pub const fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the maximum number of elements the vector can hold.\n","sig":null,"attributes":[{"value":"/ Returns the maximum number of elements the vector can hold.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":118161,"byte_end":118224,"line_start":160,"line_end":160,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":1074},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":118345,"byte_end":118350,"line_start":166,"line_end":166,"column_start":12,"column_end":17},"name":"clear","qualname":"<Vec<T, N>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Clears the vector, removing all values.\n","sig":null,"attributes":[{"value":"/ Clears the vector, removing all values.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":118290,"byte_end":118333,"line_start":165,"line_end":165,"column_start":5,"column_end":48}}]},{"kind":"Method","id":{"krate":0,"index":1075},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":118550,"byte_end":118556,"line_start":175,"line_end":175,"column_start":12,"column_end":18},"name":"extend","qualname":"<Vec<T, N>>::extend","value":"pub fn extend<I>(&mut Self, I) where I: IntoIterator<Item = T>","parent":null,"children":[],"decl_id":null,"docs":" Extends the vec from an iterator.","sig":null,"attributes":[{"value":"/ Extends the vec from an iterator.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":118401,"byte_end":118438,"line_start":170,"line_end":170,"column_start":5,"column_end":42}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":118443,"byte_end":118446,"line_start":171,"line_end":171,"column_start":5,"column_end":8}},{"value":"/ # Panic","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":118451,"byte_end":118462,"line_start":172,"line_end":172,"column_start":5,"column_end":16}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":118467,"byte_end":118470,"line_start":173,"line_end":173,"column_start":5,"column_end":8}},{"value":"/ Panics if the vec cannot hold all elements of the iterator.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":118475,"byte_end":118538,"line_start":174,"line_end":174,"column_start":5,"column_end":68}}]},{"kind":"Method","id":{"krate":0,"index":1077},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":119207,"byte_end":119224,"line_start":199,"line_end":199,"column_start":12,"column_end":29},"name":"extend_from_slice","qualname":"<Vec<T, N>>::extend_from_slice","value":"pub fn extend_from_slice(&mut Self, &[T]) -> Result<(), ()> where T: Clone","parent":null,"children":[],"decl_id":null,"docs":" Clones and appends all elements in a slice to the `Vec`.","sig":null,"attributes":[{"value":"/ Clones and appends all elements in a slice to the `Vec`.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":118721,"byte_end":118781,"line_start":184,"line_end":184,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":118786,"byte_end":118789,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ Iterates over the slice `other`, clones each element, and then appends","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":118794,"byte_end":118868,"line_start":186,"line_end":186,"column_start":5,"column_end":79}},{"value":"/ it to this `Vec`. The `other` vector is traversed in-order.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":118873,"byte_end":118936,"line_start":187,"line_end":187,"column_start":5,"column_end":68}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":118941,"byte_end":118944,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":118949,"byte_end":118963,"line_start":189,"line_end":189,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":118968,"byte_end":118971,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":118976,"byte_end":118983,"line_start":191,"line_end":191,"column_start":5,"column_end":12}},{"value":"/ use heapless::Vec;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":118988,"byte_end":119010,"line_start":192,"line_end":192,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":119015,"byte_end":119018,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ let mut vec = Vec::<u8, 8>::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":119023,"byte_end":119061,"line_start":194,"line_end":194,"column_start":5,"column_end":43}},{"value":"/ vec.push(1).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":119066,"byte_end":119091,"line_start":195,"line_end":195,"column_start":5,"column_end":30}},{"value":"/ vec.extend_from_slice(&[2, 3, 4]).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":119096,"byte_end":119143,"line_start":196,"line_end":196,"column_start":5,"column_end":52}},{"value":"/ assert_eq!(*vec, [1, 2, 3, 4]);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":119148,"byte_end":119183,"line_start":197,"line_end":197,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":119188,"byte_end":119195,"line_start":198,"line_end":198,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1078},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":119751,"byte_end":119754,"line_start":217,"line_end":217,"column_start":12,"column_end":15},"name":"pop","qualname":"<Vec<T, N>>::pop","value":"pub fn pop(&mut Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes the last element from a vector and returns it, or `None` if it's empty\n","sig":null,"attributes":[{"value":"/ Removes the last element from a vector and returns it, or `None` if it's empty","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":119657,"byte_end":119739,"line_start":216,"line_end":216,"column_start":5,"column_end":87}}]},{"kind":"Method","id":{"krate":0,"index":1079},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":120038,"byte_end":120042,"line_start":228,"line_end":228,"column_start":12,"column_end":16},"name":"push","qualname":"<Vec<T, N>>::push","value":"pub fn push(&mut Self, T) -> Result<(), T>","parent":null,"children":[],"decl_id":null,"docs":" Appends an `item` to the back of the collection","sig":null,"attributes":[{"value":"/ Appends an `item` to the back of the collection","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":119913,"byte_end":119964,"line_start":225,"line_end":225,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":119969,"byte_end":119972,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ Returns back the `item` if the vector is full","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":119977,"byte_end":120026,"line_start":227,"line_end":227,"column_start":5,"column_end":54}}]},{"kind":"Method","id":{"krate":0,"index":1080},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":120418,"byte_end":120431,"line_start":242,"line_end":242,"column_start":19,"column_end":32},"name":"pop_unchecked","qualname":"<Vec<T, N>>::pop_unchecked","value":"pub unsafe fn pop_unchecked(&mut Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Removes the last element from a vector and returns it","sig":null,"attributes":[{"value":"/ Removes the last element from a vector and returns it","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":120250,"byte_end":120307,"line_start":237,"line_end":237,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":120312,"byte_end":120315,"line_start":238,"line_end":238,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":120320,"byte_end":120332,"line_start":239,"line_end":239,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":120337,"byte_end":120340,"line_start":240,"line_end":240,"column_start":5,"column_end":8}},{"value":"/ This assumes the vec to have at least one element.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":120345,"byte_end":120399,"line_start":241,"line_end":241,"column_start":5,"column_end":59}}]},{"kind":"Method","id":{"krate":0,"index":1081},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":120749,"byte_end":120763,"line_start":254,"line_end":254,"column_start":19,"column_end":33},"name":"push_unchecked","qualname":"<Vec<T, N>>::push_unchecked","value":"pub unsafe fn push_unchecked(&mut Self, T)","parent":null,"children":[],"decl_id":null,"docs":" Appends an `item` to the back of the collection","sig":null,"attributes":[{"value":"/ Appends an `item` to the back of the collection","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":120604,"byte_end":120655,"line_start":249,"line_end":249,"column_start":5,"column_end":56}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":120660,"byte_end":120663,"line_start":250,"line_end":250,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":120668,"byte_end":120680,"line_start":251,"line_end":251,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":120685,"byte_end":120688,"line_start":252,"line_end":252,"column_start":5,"column_end":8}},{"value":"/ This assumes the vec is not full.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":120693,"byte_end":120730,"line_start":253,"line_end":253,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":1082},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":121214,"byte_end":121222,"line_start":265,"line_end":265,"column_start":12,"column_end":20},"name":"truncate","qualname":"<Vec<T, N>>::truncate","value":"pub fn truncate(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Shortens the vector, keeping the first `len` elements and dropping the rest.\n","sig":null,"attributes":[{"value":"/ Shortens the vector, keeping the first `len` elements and dropping the rest.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":121122,"byte_end":121202,"line_start":264,"line_end":264,"column_start":5,"column_end":85}}]},{"kind":"Method","id":{"krate":0,"index":1083},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":121974,"byte_end":121980,"line_start":283,"line_end":283,"column_start":12,"column_end":18},"name":"resize","qualname":"<Vec<T, N>>::resize","value":"pub fn resize(&mut Self, usize, T) -> Result<(), ()> where T: Clone","parent":null,"children":[],"decl_id":null,"docs":" Resizes the Vec in-place so that len is equal to new_len.","sig":null,"attributes":[{"value":"/ Resizes the Vec in-place so that len is equal to new_len.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":121611,"byte_end":121672,"line_start":276,"line_end":276,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":121677,"byte_end":121680,"line_start":277,"line_end":277,"column_start":5,"column_end":8}},{"value":"/ If new_len is greater than len, the Vec is extended by the","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":121685,"byte_end":121747,"line_start":278,"line_end":278,"column_start":5,"column_end":67}},{"value":"/ difference, with each additional slot filled with value. If","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":121752,"byte_end":121815,"line_start":279,"line_end":279,"column_start":5,"column_end":68}},{"value":"/ new_len is less than len, the Vec is simply truncated.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":121820,"byte_end":121878,"line_start":280,"line_end":280,"column_start":5,"column_end":63}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":121883,"byte_end":121886,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ See also [`resize_default`](struct.Vec.html#method.resize_default).","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":121891,"byte_end":121962,"line_start":282,"line_end":282,"column_start":5,"column_end":76}}]},{"kind":"Method","id":{"krate":0,"index":1084},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":122750,"byte_end":122764,"line_start":309,"line_end":309,"column_start":12,"column_end":26},"name":"resize_default","qualname":"<Vec<T, N>>::resize_default","value":"pub fn resize_default(&mut Self, usize) -> Result<(), ()> where T: Clone +\nDefault","parent":null,"children":[],"decl_id":null,"docs":" Resizes the `Vec` in-place so that `len` is equal to `new_len`.","sig":null,"attributes":[{"value":"/ Resizes the `Vec` in-place so that `len` is equal to `new_len`.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":122370,"byte_end":122437,"line_start":302,"line_end":302,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":122442,"byte_end":122445,"line_start":303,"line_end":303,"column_start":5,"column_end":8}},{"value":"/ If `new_len` is greater than `len`, the `Vec` is extended by the","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":122450,"byte_end":122518,"line_start":304,"line_end":304,"column_start":5,"column_end":73}},{"value":"/ difference, with each additional slot filled with `Default::default()`.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":122523,"byte_end":122598,"line_start":305,"line_end":305,"column_start":5,"column_end":80}},{"value":"/ If `new_len` is less than `len`, the `Vec` is simply truncated.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":122603,"byte_end":122670,"line_start":306,"line_end":306,"column_start":5,"column_end":72}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":122675,"byte_end":122678,"line_start":307,"line_end":307,"column_start":5,"column_end":8}},{"value":"/ See also [`resize`](struct.Vec.html#method.resize).","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":122683,"byte_end":122738,"line_start":308,"line_end":308,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1085},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":126271,"byte_end":126278,"line_start":405,"line_end":405,"column_start":19,"column_end":26},"name":"set_len","qualname":"<Vec<T, N>>::set_len","value":"pub unsafe fn set_len(&mut Self, usize)","parent":null,"children":[],"decl_id":null,"docs":" Forces the length of the vector to `new_len`.","sig":null,"attributes":[{"value":"/ Forces the length of the vector to `new_len`.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":122908,"byte_end":122957,"line_start":316,"line_end":316,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":122962,"byte_end":122965,"line_start":317,"line_end":317,"column_start":5,"column_end":8}},{"value":"/ This is a low-level operation that maintains none of the normal","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":122970,"byte_end":123037,"line_start":318,"line_end":318,"column_start":5,"column_end":72}},{"value":"/ invariants of the type. Normally changing the length of a vector","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":123042,"byte_end":123110,"line_start":319,"line_end":319,"column_start":5,"column_end":73}},{"value":"/ is done using one of the safe operations instead, such as","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":123115,"byte_end":123176,"line_start":320,"line_end":320,"column_start":5,"column_end":66}},{"value":"/ [`truncate`], [`resize`], [`extend`], or [`clear`].","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":123181,"byte_end":123236,"line_start":321,"line_end":321,"column_start":5,"column_end":60}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":123241,"byte_end":123244,"line_start":322,"line_end":322,"column_start":5,"column_end":8}},{"value":"/ [`truncate`]: #method.truncate","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":123249,"byte_end":123283,"line_start":323,"line_end":323,"column_start":5,"column_end":39}},{"value":"/ [`resize`]: #method.resize","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":123288,"byte_end":123318,"line_start":324,"line_end":324,"column_start":5,"column_end":35}},{"value":"/ [`extend`]: https://doc.rust-lang.org/stable/core/iter/trait.Extend.html#tymethod.extend","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":123323,"byte_end":123415,"line_start":325,"line_end":325,"column_start":5,"column_end":97}},{"value":"/ [`clear`]: #method.clear","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":123420,"byte_end":123448,"line_start":326,"line_end":326,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":123453,"byte_end":123456,"line_start":327,"line_end":327,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":123461,"byte_end":123473,"line_start":328,"line_end":328,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":123478,"byte_end":123481,"line_start":329,"line_end":329,"column_start":5,"column_end":8}},{"value":"/ - `new_len` must be less than or equal to [`capacity()`].","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":123486,"byte_end":123547,"line_start":330,"line_end":330,"column_start":5,"column_end":66}},{"value":"/ - The elements at `old_len..new_len` must be initialized.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":123552,"byte_end":123613,"line_start":331,"line_end":331,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":123618,"byte_end":123621,"line_start":332,"line_end":332,"column_start":5,"column_end":8}},{"value":"/ [`capacity()`]: #method.capacity","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":123626,"byte_end":123662,"line_start":333,"line_end":333,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":123667,"byte_end":123670,"line_start":334,"line_end":334,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":123675,"byte_end":123689,"line_start":335,"line_end":335,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":123694,"byte_end":123697,"line_start":336,"line_end":336,"column_start":5,"column_end":8}},{"value":"/ This method can be useful for situations in which the vector","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":123702,"byte_end":123766,"line_start":337,"line_end":337,"column_start":5,"column_end":69}},{"value":"/ is serving as a buffer for other code, particularly over FFI:","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":123771,"byte_end":123836,"line_start":338,"line_end":338,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":123841,"byte_end":123844,"line_start":339,"line_end":339,"column_start":5,"column_end":8}},{"value":"/ ```no_run","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":123849,"byte_end":123862,"line_start":340,"line_end":340,"column_start":5,"column_end":18}},{"value":"/ # #![allow(dead_code)]","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":123867,"byte_end":123893,"line_start":341,"line_end":341,"column_start":5,"column_end":31}},{"value":"/ use heapless::Vec;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":123898,"byte_end":123920,"line_start":342,"line_end":342,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":123925,"byte_end":123928,"line_start":343,"line_end":343,"column_start":5,"column_end":8}},{"value":"/ # // This is just a minimal skeleton for the doc example;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":123933,"byte_end":123994,"line_start":344,"line_end":344,"column_start":5,"column_end":66}},{"value":"/ # // don't use this as a starting point for a real library.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":123999,"byte_end":124062,"line_start":345,"line_end":345,"column_start":5,"column_end":68}},{"value":"/ # pub struct StreamWrapper { strm: *mut core::ffi::c_void }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":124067,"byte_end":124130,"line_start":346,"line_end":346,"column_start":5,"column_end":68}},{"value":"/ # const Z_OK: i32 = 0;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":124135,"byte_end":124161,"line_start":347,"line_end":347,"column_start":5,"column_end":31}},{"value":"/ # extern \"C\" {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":124166,"byte_end":124184,"line_start":348,"line_end":348,"column_start":5,"column_end":23}},{"value":"/ #     fn deflateGetDictionary(","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":124189,"byte_end":124223,"line_start":349,"line_end":349,"column_start":5,"column_end":39}},{"value":"/ #         strm: *mut core::ffi::c_void,","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":124228,"byte_end":124271,"line_start":350,"line_end":350,"column_start":5,"column_end":48}},{"value":"/ #         dictionary: *mut u8,","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":124276,"byte_end":124310,"line_start":351,"line_end":351,"column_start":5,"column_end":39}},{"value":"/ #         dictLength: *mut usize,","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":124315,"byte_end":124352,"line_start":352,"line_end":352,"column_start":5,"column_end":42}},{"value":"/ #     ) -> i32;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":124357,"byte_end":124376,"line_start":353,"line_end":353,"column_start":5,"column_end":24}},{"value":"/ # }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":124381,"byte_end":124388,"line_start":354,"line_end":354,"column_start":5,"column_end":12}},{"value":"/ # impl StreamWrapper {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":124393,"byte_end":124419,"line_start":355,"line_end":355,"column_start":5,"column_end":31}},{"value":"/ pub fn get_dictionary(&self) -> Option<Vec<u8, 32768>> {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":124424,"byte_end":124484,"line_start":356,"line_end":356,"column_start":5,"column_end":65}},{"value":"/     // Per the FFI method's docs, \"32768 bytes is always enough\".","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":124489,"byte_end":124558,"line_start":357,"line_end":357,"column_start":5,"column_end":74}},{"value":"/     let mut dict = Vec::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":124563,"byte_end":124597,"line_start":358,"line_end":358,"column_start":5,"column_end":39}},{"value":"/     let mut dict_length = 0;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":124602,"byte_end":124634,"line_start":359,"line_end":359,"column_start":5,"column_end":37}},{"value":"/     // SAFETY: When `deflateGetDictionary` returns `Z_OK`, it holds that:","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":124639,"byte_end":124716,"line_start":360,"line_end":360,"column_start":5,"column_end":82}},{"value":"/     // 1. `dict_length` elements were initialized.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":124721,"byte_end":124775,"line_start":361,"line_end":361,"column_start":5,"column_end":59}},{"value":"/     // 2. `dict_length` <= the capacity (32_768)","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":124780,"byte_end":124832,"line_start":362,"line_end":362,"column_start":5,"column_end":57}},{"value":"/     // which makes `set_len` safe to call.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":124837,"byte_end":124883,"line_start":363,"line_end":363,"column_start":5,"column_end":51}},{"value":"/     unsafe {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":124888,"byte_end":124904,"line_start":364,"line_end":364,"column_start":5,"column_end":21}},{"value":"/         // Make the FFI call...","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":124909,"byte_end":124944,"line_start":365,"line_end":365,"column_start":5,"column_end":40}},{"value":"/         let r = deflateGetDictionary(self.strm, dict.as_mut_ptr(), &mut dict_length);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":124949,"byte_end":125038,"line_start":366,"line_end":366,"column_start":5,"column_end":94}},{"value":"/         if r == Z_OK {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":125043,"byte_end":125069,"line_start":367,"line_end":367,"column_start":5,"column_end":31}},{"value":"/             // ...and update the length to what was initialized.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":125074,"byte_end":125142,"line_start":368,"line_end":368,"column_start":5,"column_end":73}},{"value":"/             dict.set_len(dict_length);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":125147,"byte_end":125189,"line_start":369,"line_end":369,"column_start":5,"column_end":47}},{"value":"/             Some(dict)","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":125194,"byte_end":125220,"line_start":370,"line_end":370,"column_start":5,"column_end":31}},{"value":"/         } else {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":125225,"byte_end":125245,"line_start":371,"line_end":371,"column_start":5,"column_end":25}},{"value":"/             None","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":125250,"byte_end":125270,"line_start":372,"line_end":372,"column_start":5,"column_end":25}},{"value":"/         }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":125275,"byte_end":125288,"line_start":373,"line_end":373,"column_start":5,"column_end":18}},{"value":"/     }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":125293,"byte_end":125302,"line_start":374,"line_end":374,"column_start":5,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":125307,"byte_end":125312,"line_start":375,"line_end":375,"column_start":5,"column_end":10}},{"value":"/ # }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":125317,"byte_end":125324,"line_start":376,"line_end":376,"column_start":5,"column_end":12}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":125329,"byte_end":125336,"line_start":377,"line_end":377,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":125341,"byte_end":125344,"line_start":378,"line_end":378,"column_start":5,"column_end":8}},{"value":"/ While the following example is sound, there is a memory leak since","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":125349,"byte_end":125419,"line_start":379,"line_end":379,"column_start":5,"column_end":75}},{"value":"/ the inner vectors were not freed prior to the `set_len` call:","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":125424,"byte_end":125489,"line_start":380,"line_end":380,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":125494,"byte_end":125497,"line_start":381,"line_end":381,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":125502,"byte_end":125509,"line_start":382,"line_end":382,"column_start":5,"column_end":12}},{"value":"/ use core::iter::FromIterator;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":125514,"byte_end":125547,"line_start":383,"line_end":383,"column_start":5,"column_end":38}},{"value":"/ use heapless::Vec;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":125552,"byte_end":125574,"line_start":384,"line_end":384,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":125579,"byte_end":125582,"line_start":385,"line_end":385,"column_start":5,"column_end":8}},{"value":"/ let mut vec = Vec::<Vec<u8, 3>, 3>::from_iter(","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":125587,"byte_end":125637,"line_start":386,"line_end":386,"column_start":5,"column_end":55}},{"value":"/     [","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":125642,"byte_end":125651,"line_start":387,"line_end":387,"column_start":5,"column_end":14}},{"value":"/         Vec::from_iter([1, 0, 0].iter().cloned()),","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":125656,"byte_end":125710,"line_start":388,"line_end":388,"column_start":5,"column_end":59}},{"value":"/         Vec::from_iter([0, 1, 0].iter().cloned()),","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":125715,"byte_end":125769,"line_start":389,"line_end":389,"column_start":5,"column_end":59}},{"value":"/         Vec::from_iter([0, 0, 1].iter().cloned()),","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":125774,"byte_end":125828,"line_start":390,"line_end":390,"column_start":5,"column_end":59}},{"value":"/     ]","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":125833,"byte_end":125842,"line_start":391,"line_end":391,"column_start":5,"column_end":14}},{"value":"/     .iter()","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":125847,"byte_end":125862,"line_start":392,"line_end":392,"column_start":5,"column_end":20}},{"value":"/     .cloned()","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":125867,"byte_end":125884,"line_start":393,"line_end":393,"column_start":5,"column_end":22}},{"value":"/ );","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":125889,"byte_end":125895,"line_start":394,"line_end":394,"column_start":5,"column_end":11}},{"value":"/ // SAFETY:","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":125900,"byte_end":125914,"line_start":395,"line_end":395,"column_start":5,"column_end":19}},{"value":"/ // 1. `old_len..0` is empty so no elements need to be initialized.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":125919,"byte_end":125989,"line_start":396,"line_end":396,"column_start":5,"column_end":75}},{"value":"/ // 2. `0 <= capacity` always holds whatever `capacity` is.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":125994,"byte_end":126056,"line_start":397,"line_end":397,"column_start":5,"column_end":67}},{"value":"/ unsafe {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":126061,"byte_end":126073,"line_start":398,"line_end":398,"column_start":5,"column_end":17}},{"value":"/     vec.set_len(0);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":126078,"byte_end":126101,"line_start":399,"line_end":399,"column_start":5,"column_end":28}},{"value":"/ }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":126106,"byte_end":126111,"line_start":400,"line_end":400,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":126116,"byte_end":126123,"line_start":401,"line_end":401,"column_start":5,"column_end":12}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":126128,"byte_end":126131,"line_start":402,"line_end":402,"column_start":5,"column_end":8}},{"value":"/ Normally, here, one would use [`clear`] instead to correctly drop","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":126136,"byte_end":126205,"line_start":403,"line_end":403,"column_start":5,"column_end":74}},{"value":"/ the contents and thus not leak memory.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":126210,"byte_end":126252,"line_start":404,"line_end":404,"column_start":5,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1086},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":127181,"byte_end":127192,"line_start":439,"line_end":439,"column_start":12,"column_end":23},"name":"swap_remove","qualname":"<Vec<T, N>>::swap_remove","value":"pub fn swap_remove(&mut Self, usize) -> T","parent":null,"children":[],"decl_id":null,"docs":" Removes an element from the vector and returns it.","sig":null,"attributes":[{"value":"/ Removes an element from the vector and returns it.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":126398,"byte_end":126452,"line_start":411,"line_end":411,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":126457,"byte_end":126460,"line_start":412,"line_end":412,"column_start":5,"column_end":8}},{"value":"/ The removed element is replaced by the last element of the vector.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":126465,"byte_end":126535,"line_start":413,"line_end":413,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":126540,"byte_end":126543,"line_start":414,"line_end":414,"column_start":5,"column_end":8}},{"value":"/ This does not preserve ordering, but is O(1).","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":126548,"byte_end":126597,"line_start":415,"line_end":415,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":126602,"byte_end":126605,"line_start":416,"line_end":416,"column_start":5,"column_end":8}},{"value":"/ # Panics","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":126610,"byte_end":126622,"line_start":417,"line_end":417,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":126627,"byte_end":126630,"line_start":418,"line_end":418,"column_start":5,"column_end":8}},{"value":"/ Panics if `index` is out of bounds.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":126635,"byte_end":126674,"line_start":419,"line_end":419,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":126679,"byte_end":126682,"line_start":420,"line_end":420,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":126687,"byte_end":126701,"line_start":421,"line_end":421,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":126706,"byte_end":126709,"line_start":422,"line_end":422,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":126714,"byte_end":126721,"line_start":423,"line_end":423,"column_start":5,"column_end":12}},{"value":"/ use heapless::Vec;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":126726,"byte_end":126748,"line_start":424,"line_end":424,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":126788,"byte_end":126791,"line_start":426,"line_end":426,"column_start":5,"column_end":8}},{"value":"/ let mut v: Vec<_, 8> = Vec::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":126796,"byte_end":126834,"line_start":427,"line_end":427,"column_start":5,"column_end":43}},{"value":"/ v.push(\"foo\").unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":126839,"byte_end":126866,"line_start":428,"line_end":428,"column_start":5,"column_end":32}},{"value":"/ v.push(\"bar\").unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":126871,"byte_end":126898,"line_start":429,"line_end":429,"column_start":5,"column_end":32}},{"value":"/ v.push(\"baz\").unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":126903,"byte_end":126930,"line_start":430,"line_end":430,"column_start":5,"column_end":32}},{"value":"/ v.push(\"qux\").unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":126935,"byte_end":126962,"line_start":431,"line_end":431,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":126967,"byte_end":126970,"line_start":432,"line_end":432,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(v.swap_remove(1), \"bar\");","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":126975,"byte_end":127015,"line_start":433,"line_end":433,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(&*v, [\"foo\", \"qux\", \"baz\"]);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":127020,"byte_end":127063,"line_start":434,"line_end":434,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":127068,"byte_end":127071,"line_start":435,"line_end":435,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(v.swap_remove(0), \"foo\");","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":127076,"byte_end":127116,"line_start":436,"line_end":436,"column_start":5,"column_end":45}},{"value":"/ assert_eq!(&*v, [\"baz\", \"qux\"]);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":127121,"byte_end":127157,"line_start":437,"line_end":437,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":127162,"byte_end":127169,"line_start":438,"line_end":438,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1087},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":128117,"byte_end":128138,"line_start":471,"line_end":471,"column_start":19,"column_end":40},"name":"swap_remove_unchecked","qualname":"<Vec<T, N>>::swap_remove_unchecked","value":"pub unsafe fn swap_remove_unchecked(&mut Self, usize) -> T","parent":null,"children":[],"decl_id":null,"docs":" Removes an element from the vector and returns it.","sig":null,"attributes":[{"value":"/ Removes an element from the vector and returns it.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":127324,"byte_end":127378,"line_start":444,"line_end":444,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":127383,"byte_end":127386,"line_start":445,"line_end":445,"column_start":5,"column_end":8}},{"value":"/ The removed element is replaced by the last element of the vector.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":127391,"byte_end":127461,"line_start":446,"line_end":446,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":127466,"byte_end":127469,"line_start":447,"line_end":447,"column_start":5,"column_end":8}},{"value":"/ This does not preserve ordering, but is O(1).","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":127474,"byte_end":127523,"line_start":448,"line_end":448,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":127528,"byte_end":127531,"line_start":449,"line_end":449,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":127536,"byte_end":127548,"line_start":450,"line_end":450,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":127553,"byte_end":127556,"line_start":451,"line_end":451,"column_start":5,"column_end":8}},{"value":"/  Assumes `index` within bounds.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":127561,"byte_end":127596,"line_start":452,"line_end":452,"column_start":5,"column_end":40}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":127601,"byte_end":127604,"line_start":453,"line_end":453,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":127609,"byte_end":127623,"line_start":454,"line_end":454,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":127628,"byte_end":127631,"line_start":455,"line_end":455,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":127636,"byte_end":127643,"line_start":456,"line_end":456,"column_start":5,"column_end":12}},{"value":"/ use heapless::Vec;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":127648,"byte_end":127670,"line_start":457,"line_end":457,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":127675,"byte_end":127678,"line_start":458,"line_end":458,"column_start":5,"column_end":8}},{"value":"/ let mut v: Vec<_, 8> = Vec::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":127683,"byte_end":127721,"line_start":459,"line_end":459,"column_start":5,"column_end":43}},{"value":"/ v.push(\"foo\").unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":127726,"byte_end":127753,"line_start":460,"line_end":460,"column_start":5,"column_end":32}},{"value":"/ v.push(\"bar\").unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":127758,"byte_end":127785,"line_start":461,"line_end":461,"column_start":5,"column_end":32}},{"value":"/ v.push(\"baz\").unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":127790,"byte_end":127817,"line_start":462,"line_end":462,"column_start":5,"column_end":32}},{"value":"/ v.push(\"qux\").unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":127822,"byte_end":127849,"line_start":463,"line_end":463,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":127854,"byte_end":127857,"line_start":464,"line_end":464,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(unsafe { v.swap_remove_unchecked(1) }, \"bar\");","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":127862,"byte_end":127923,"line_start":465,"line_end":465,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(&*v, [\"foo\", \"qux\", \"baz\"]);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":127928,"byte_end":127971,"line_start":466,"line_end":466,"column_start":5,"column_end":48}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":127976,"byte_end":127979,"line_start":467,"line_end":467,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(unsafe { v.swap_remove_unchecked(0) }, \"foo\");","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":127984,"byte_end":128045,"line_start":468,"line_end":468,"column_start":5,"column_end":66}},{"value":"/ assert_eq!(&*v, [\"baz\", \"qux\"]);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":128050,"byte_end":128086,"line_start":469,"line_end":469,"column_start":5,"column_end":41}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":128091,"byte_end":128098,"line_start":470,"line_end":470,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1088},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":128495,"byte_end":128502,"line_start":483,"line_end":483,"column_start":12,"column_end":19},"name":"is_full","qualname":"<Vec<T, N>>::is_full","value":"pub fn is_full(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the vec is full\n","sig":null,"attributes":[{"value":"/ Returns true if the vec is full","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":128434,"byte_end":128469,"line_start":481,"line_end":481,"column_start":5,"column_end":40}},{"value":"inline","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":128474,"byte_end":128483,"line_start":482,"line_end":482,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1089},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":128629,"byte_end":128637,"line_start":489,"line_end":489,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Vec<T, N>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns true if the vec is empty\n","sig":null,"attributes":[{"value":"/ Returns true if the vec is empty","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":128567,"byte_end":128603,"line_start":487,"line_end":487,"column_start":5,"column_end":41}},{"value":"inline","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":128608,"byte_end":128617,"line_start":488,"line_end":488,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1090},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":129135,"byte_end":129146,"line_start":508,"line_end":508,"column_start":12,"column_end":23},"name":"starts_with","qualname":"<Vec<T, N>>::starts_with","value":"pub fn starts_with(&Self, &[T]) -> bool where T: PartialEq","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if `needle` is a prefix of the Vec.","sig":null,"attributes":[{"value":"/ Returns `true` if `needle` is a prefix of the Vec.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":128688,"byte_end":128742,"line_start":493,"line_end":493,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":128747,"byte_end":128750,"line_start":494,"line_end":494,"column_start":5,"column_end":8}},{"value":"/ Always returns `true` if `needle` is an empty slice.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":128755,"byte_end":128811,"line_start":495,"line_end":495,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":128816,"byte_end":128819,"line_start":496,"line_end":496,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":128824,"byte_end":128838,"line_start":497,"line_end":497,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":128843,"byte_end":128846,"line_start":498,"line_end":498,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":128851,"byte_end":128858,"line_start":499,"line_end":499,"column_start":5,"column_end":12}},{"value":"/ use heapless::Vec;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":128863,"byte_end":128885,"line_start":500,"line_end":500,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":128890,"byte_end":128893,"line_start":501,"line_end":501,"column_start":5,"column_end":8}},{"value":"/ let v: Vec<_, 8> = Vec::from_slice(b\"abc\").unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":128898,"byte_end":128954,"line_start":502,"line_end":502,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(v.starts_with(b\"\"), true);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":128959,"byte_end":129000,"line_start":503,"line_end":503,"column_start":5,"column_end":46}},{"value":"/ assert_eq!(v.starts_with(b\"ab\"), true);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":129005,"byte_end":129048,"line_start":504,"line_end":504,"column_start":5,"column_end":48}},{"value":"/ assert_eq!(v.starts_with(b\"bc\"), false);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":129053,"byte_end":129097,"line_start":505,"line_end":505,"column_start":5,"column_end":49}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":129102,"byte_end":129109,"line_start":506,"line_end":506,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":129114,"byte_end":129123,"line_start":507,"line_end":507,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1091},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":129742,"byte_end":129751,"line_start":531,"line_end":531,"column_start":12,"column_end":21},"name":"ends_with","qualname":"<Vec<T, N>>::ends_with","value":"pub fn ends_with(&Self, &[T]) -> bool where T: PartialEq","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if `needle` is a suffix of the Vec.","sig":null,"attributes":[{"value":"/ Returns `true` if `needle` is a suffix of the Vec.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":129301,"byte_end":129355,"line_start":516,"line_end":516,"column_start":5,"column_end":59}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":129360,"byte_end":129363,"line_start":517,"line_end":517,"column_start":5,"column_end":8}},{"value":"/ Always returns `true` if `needle` is an empty slice.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":129368,"byte_end":129424,"line_start":518,"line_end":518,"column_start":5,"column_end":61}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":129429,"byte_end":129432,"line_start":519,"line_end":519,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":129437,"byte_end":129451,"line_start":520,"line_end":520,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":129456,"byte_end":129459,"line_start":521,"line_end":521,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":129464,"byte_end":129471,"line_start":522,"line_end":522,"column_start":5,"column_end":12}},{"value":"/ use heapless::Vec;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":129476,"byte_end":129498,"line_start":523,"line_end":523,"column_start":5,"column_end":27}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":129503,"byte_end":129506,"line_start":524,"line_end":524,"column_start":5,"column_end":8}},{"value":"/ let v: Vec<_, 8> = Vec::from_slice(b\"abc\").unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":129511,"byte_end":129567,"line_start":525,"line_end":525,"column_start":5,"column_end":61}},{"value":"/ assert_eq!(v.ends_with(b\"\"), true);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":129572,"byte_end":129611,"line_start":526,"line_end":526,"column_start":5,"column_end":44}},{"value":"/ assert_eq!(v.ends_with(b\"ab\"), false);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":129616,"byte_end":129658,"line_start":527,"line_end":527,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(v.ends_with(b\"bc\"), true);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":129663,"byte_end":129704,"line_start":528,"line_end":528,"column_start":5,"column_end":46}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":129709,"byte_end":129716,"line_start":529,"line_end":529,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":129721,"byte_end":129730,"line_start":530,"line_end":530,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1153},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":132627,"byte_end":132635,"line_start":659,"line_end":659,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::vec::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":1156},{"krate":0,"index":1157}],"decl_id":null,"docs":" An iterator that moves out of an [`Vec`][`Vec`].","sig":null,"attributes":[{"value":"/ An iterator that moves out of an [`Vec`][`Vec`].","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":132406,"byte_end":132458,"line_start":653,"line_end":653,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":132459,"byte_end":132462,"line_start":654,"line_end":654,"column_start":1,"column_end":4}},{"value":"/ This struct is created by calling the `into_iter` method on [`Vec`][`Vec`].","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":132463,"byte_end":132542,"line_start":655,"line_end":655,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":132543,"byte_end":132546,"line_start":656,"line_end":656,"column_start":1,"column_end":4}},{"value":"/ [`Vec`]: (https://doc.rust-lang.org/std/vec/struct.Vec.html)","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":132547,"byte_end":132611,"line_start":657,"line_end":657,"column_start":1,"column_end":65}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":132612,"byte_end":132615,"line_start":658,"line_end":658,"column_start":1,"column_end":4}}]},{"kind":"Mod","id":{"krate":0,"index":1255},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"binary_heap","qualname":"::binary_heap","value":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","parent":null,"children":[{"krate":0,"index":1256},{"krate":0,"index":1257},{"krate":0,"index":1260},{"krate":0,"index":1263},{"krate":0,"index":1264},{"krate":0,"index":1266},{"krate":0,"index":1267},{"krate":0,"index":1270},{"krate":0,"index":1273},{"krate":0,"index":1274},{"krate":0,"index":1277},{"krate":0,"index":1280},{"krate":0,"index":1283},{"krate":0,"index":1286},{"krate":0,"index":1289},{"krate":0,"index":1290},{"krate":0,"index":1291},{"krate":0,"index":1293},{"krate":0,"index":1295},{"krate":0,"index":1297},{"krate":0,"index":1299},{"krate":0,"index":1300},{"krate":0,"index":1301},{"krate":0,"index":1307},{"krate":0,"index":1312},{"krate":0,"index":1330},{"krate":0,"index":1336},{"krate":0,"index":1344},{"krate":0,"index":1351},{"krate":0,"index":1356},{"krate":0,"index":1362},{"krate":0,"index":1367},{"krate":0,"index":1373},{"krate":0,"index":1377},{"krate":0,"index":1382},{"krate":0,"index":1387},{"krate":0,"index":1392},{"krate":0,"index":1397}],"decl_id":null,"docs":" A priority queue implemented with a binary heap.","sig":null,"attributes":[{"value":"/ A priority queue implemented with a binary heap.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":146724,"byte_end":146776,"line_start":1,"line_end":1,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":146777,"byte_end":146780,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Insertion and popping the largest element have `O(log n)` time complexity. Checking the largest","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":146781,"byte_end":146880,"line_start":3,"line_end":3,"column_start":1,"column_end":100}},{"value":"/ / smallest element is `O(1)`.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":146881,"byte_end":146914,"line_start":4,"line_end":4,"column_start":1,"column_end":34}}]},{"kind":"Enum","id":{"krate":0,"index":1289},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":147355,"byte_end":147358,"line_start":23,"line_end":23,"column_start":10,"column_end":13},"name":"Min","qualname":"::binary_heap::Min","value":"pub enum Min { }","parent":null,"children":[],"decl_id":null,"docs":" Min-heap\n","sig":null,"attributes":[{"value":"/ Min-heap","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":147333,"byte_end":147345,"line_start":22,"line_end":22,"column_start":1,"column_end":13}}]},{"kind":"Enum","id":{"krate":0,"index":1290},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":147385,"byte_end":147388,"line_start":26,"line_end":26,"column_start":10,"column_end":13},"name":"Max","qualname":"::binary_heap::Max","value":"pub enum Max { }","parent":null,"children":[],"decl_id":null,"docs":" Max-heap\n","sig":null,"attributes":[{"value":"/ Max-heap","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":147363,"byte_end":147375,"line_start":25,"line_end":25,"column_start":1,"column_end":13}}]},{"kind":"Trait","id":{"krate":0,"index":1291},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":147450,"byte_end":147454,"line_start":29,"line_end":29,"column_start":11,"column_end":15},"name":"Kind","qualname":"::binary_heap::Kind","value":"Kind: private::Sealed","parent":null,"children":[{"krate":0,"index":1292}],"decl_id":null,"docs":" The binary heap kind: min-heap or max-heap\n","sig":null,"attributes":[{"value":"/ The binary heap kind: min-heap or max-heap","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":147393,"byte_end":147439,"line_start":28,"line_end":28,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1292},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":147500,"byte_end":147508,"line_start":31,"line_end":31,"column_start":8,"column_end":16},"name":"ordering","qualname":"::binary_heap::Kind::ordering","value":"pub fn ordering() -> Ordering","parent":{"krate":0,"index":1291},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1298},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":147744,"byte_end":147750,"line_start":48,"line_end":48,"column_start":15,"column_end":21},"name":"Sealed","qualname":"::binary_heap::private::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1301},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":149354,"byte_end":149364,"line_start":101,"line_end":101,"column_start":12,"column_end":22},"name":"BinaryHeap","qualname":"::binary_heap::BinaryHeap","value":"BinaryHeap {  }","parent":null,"children":[{"krate":0,"index":1305},{"krate":0,"index":1306}],"decl_id":null,"docs":" A priority queue implemented with a binary heap.","sig":null,"attributes":[{"value":"/ A priority queue implemented with a binary heap.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":147822,"byte_end":147874,"line_start":54,"line_end":54,"column_start":1,"column_end":53}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":147875,"byte_end":147878,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ This can be either a min-heap or a max-heap.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":147879,"byte_end":147927,"line_start":56,"line_end":56,"column_start":1,"column_end":49}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":147928,"byte_end":147931,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ It is a logic error for an item to be modified in such a way that the item's ordering relative","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":147932,"byte_end":148030,"line_start":58,"line_end":58,"column_start":1,"column_end":99}},{"value":"/ to any other item, as determined by the `Ord` trait, changes while it is in the heap. This is","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":148031,"byte_end":148128,"line_start":59,"line_end":59,"column_start":1,"column_end":98}},{"value":"/ normally only possible through `Cell`, `RefCell`, global state, I/O, or unsafe code.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":148129,"byte_end":148217,"line_start":60,"line_end":60,"column_start":1,"column_end":89}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":148218,"byte_end":148221,"line_start":61,"line_end":61,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":148222,"byte_end":148229,"line_start":62,"line_end":62,"column_start":1,"column_end":8}},{"value":"/ use heapless::binary_heap::{BinaryHeap, Max};","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":148230,"byte_end":148279,"line_start":63,"line_end":63,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":148280,"byte_end":148283,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/ let mut heap: BinaryHeap<_, Max, 8> = BinaryHeap::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":148284,"byte_end":148344,"line_start":65,"line_end":65,"column_start":1,"column_end":61}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":148345,"byte_end":148348,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/ // We can use peek to look at the next item in the heap. In this case,","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":148349,"byte_end":148423,"line_start":67,"line_end":67,"column_start":1,"column_end":75}},{"value":"/ // there's no items in there yet so we get None.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":148424,"byte_end":148476,"line_start":68,"line_end":68,"column_start":1,"column_end":53}},{"value":"/ assert_eq!(heap.peek(), None);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":148477,"byte_end":148511,"line_start":69,"line_end":69,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":148512,"byte_end":148515,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ // Let's add some scores...","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":148516,"byte_end":148547,"line_start":71,"line_end":71,"column_start":1,"column_end":32}},{"value":"/ heap.push(1).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":148548,"byte_end":148574,"line_start":72,"line_end":72,"column_start":1,"column_end":27}},{"value":"/ heap.push(5).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":148575,"byte_end":148601,"line_start":73,"line_end":73,"column_start":1,"column_end":27}},{"value":"/ heap.push(2).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":148602,"byte_end":148628,"line_start":74,"line_end":74,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":148629,"byte_end":148632,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ // Now peek shows the most important item in the heap.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":148633,"byte_end":148691,"line_start":76,"line_end":76,"column_start":1,"column_end":59}},{"value":"/ assert_eq!(heap.peek(), Some(&5));","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":148692,"byte_end":148730,"line_start":77,"line_end":77,"column_start":1,"column_end":39}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":148731,"byte_end":148734,"line_start":78,"line_end":78,"column_start":1,"column_end":4}},{"value":"/ // We can check the length of a heap.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":148735,"byte_end":148776,"line_start":79,"line_end":79,"column_start":1,"column_end":42}},{"value":"/ assert_eq!(heap.len(), 3);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":148777,"byte_end":148807,"line_start":80,"line_end":80,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":148808,"byte_end":148811,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ // We can iterate over the items in the heap, although they are returned in","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":148812,"byte_end":148891,"line_start":82,"line_end":82,"column_start":1,"column_end":80}},{"value":"/ // a random order.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":148892,"byte_end":148914,"line_start":83,"line_end":83,"column_start":1,"column_end":23}},{"value":"/ for x in &heap {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":148915,"byte_end":148935,"line_start":84,"line_end":84,"column_start":1,"column_end":21}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":148936,"byte_end":148962,"line_start":85,"line_end":85,"column_start":1,"column_end":27}},{"value":"/ }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":148963,"byte_end":148968,"line_start":86,"line_end":86,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":148969,"byte_end":148972,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/ // If we instead pop these scores, they should come back in order.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":148973,"byte_end":149043,"line_start":88,"line_end":88,"column_start":1,"column_end":71}},{"value":"/ assert_eq!(heap.pop(), Some(5));","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":149044,"byte_end":149080,"line_start":89,"line_end":89,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(heap.pop(), Some(2));","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":149081,"byte_end":149117,"line_start":90,"line_end":90,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(heap.pop(), Some(1));","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":149118,"byte_end":149154,"line_start":91,"line_end":91,"column_start":1,"column_end":37}},{"value":"/ assert_eq!(heap.pop(), None);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":149155,"byte_end":149188,"line_start":92,"line_end":92,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":149189,"byte_end":149192,"line_start":93,"line_end":93,"column_start":1,"column_end":4}},{"value":"/ // We can clear the heap of any remaining items.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":149193,"byte_end":149245,"line_start":94,"line_end":94,"column_start":1,"column_end":53}},{"value":"/ heap.clear();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":149246,"byte_end":149263,"line_start":95,"line_end":95,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":149264,"byte_end":149267,"line_start":96,"line_end":96,"column_start":1,"column_end":4}},{"value":"/ // The heap should now be empty.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":149268,"byte_end":149304,"line_start":97,"line_end":97,"column_start":1,"column_end":37}},{"value":"/ assert!(heap.is_empty())","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":149305,"byte_end":149333,"line_start":98,"line_end":98,"column_start":1,"column_end":29}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":149334,"byte_end":149341,"line_start":99,"line_end":99,"column_start":1,"column_end":8}}]},{"kind":"Method","id":{"krate":0,"index":1311},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":149975,"byte_end":149978,"line_start":120,"line_end":120,"column_start":18,"column_end":21},"name":"new","qualname":"<BinaryHeap<T, K, N>>::new","value":"pub const fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty BinaryHeap as a $K-heap.","sig":null,"attributes":[{"value":"/ Creates an empty BinaryHeap as a $K-heap.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":149538,"byte_end":149583,"line_start":108,"line_end":108,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":149588,"byte_end":149591,"line_start":109,"line_end":109,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":149596,"byte_end":149603,"line_start":110,"line_end":110,"column_start":5,"column_end":12}},{"value":"/ use heapless::binary_heap::{BinaryHeap, Max};","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":149608,"byte_end":149657,"line_start":111,"line_end":111,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":149662,"byte_end":149665,"line_start":112,"line_end":112,"column_start":5,"column_end":8}},{"value":"/ // allocate the binary heap on the stack","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":149670,"byte_end":149714,"line_start":113,"line_end":113,"column_start":5,"column_end":49}},{"value":"/ let mut heap: BinaryHeap<_, Max, 8> = BinaryHeap::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":149719,"byte_end":149779,"line_start":114,"line_end":114,"column_start":5,"column_end":65}},{"value":"/ heap.push(4).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":149784,"byte_end":149810,"line_start":115,"line_end":115,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":149815,"byte_end":149818,"line_start":116,"line_end":116,"column_start":5,"column_end":8}},{"value":"/ // allocate the binary heap in a static variable","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":149823,"byte_end":149875,"line_start":117,"line_end":117,"column_start":5,"column_end":57}},{"value":"/ static mut HEAP: BinaryHeap<i32, Max, 8> = BinaryHeap::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":149880,"byte_end":149945,"line_start":118,"line_end":118,"column_start":5,"column_end":70}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":149950,"byte_end":149957,"line_start":119,"line_end":119,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1316},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":150248,"byte_end":150256,"line_start":135,"line_end":135,"column_start":12,"column_end":20},"name":"capacity","qualname":"<BinaryHeap<T, K, N>>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the capacity of the binary heap.\n","sig":null,"attributes":[{"value":"/ Returns the capacity of the binary heap.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":150192,"byte_end":150236,"line_start":134,"line_end":134,"column_start":5,"column_end":49}}]},{"kind":"Method","id":{"krate":0,"index":1317},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":150704,"byte_end":150709,"line_start":154,"line_end":154,"column_start":12,"column_end":17},"name":"clear","qualname":"<BinaryHeap<T, K, N>>::clear","value":"pub fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Drops all items from the binary heap.","sig":null,"attributes":[{"value":"/ Drops all items from the binary heap.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":150315,"byte_end":150356,"line_start":139,"line_end":139,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":150361,"byte_end":150364,"line_start":140,"line_end":140,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":150369,"byte_end":150376,"line_start":141,"line_end":141,"column_start":5,"column_end":12}},{"value":"/ use heapless::binary_heap::{BinaryHeap, Max};","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":150381,"byte_end":150430,"line_start":142,"line_end":142,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":150435,"byte_end":150438,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ let mut heap: BinaryHeap<_, Max, 8> = BinaryHeap::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":150443,"byte_end":150503,"line_start":144,"line_end":144,"column_start":5,"column_end":65}},{"value":"/ heap.push(1).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":150508,"byte_end":150534,"line_start":145,"line_end":145,"column_start":5,"column_end":31}},{"value":"/ heap.push(3).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":150539,"byte_end":150565,"line_start":146,"line_end":146,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":150570,"byte_end":150573,"line_start":147,"line_end":147,"column_start":5,"column_end":8}},{"value":"/ assert!(!heap.is_empty());","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":150578,"byte_end":150608,"line_start":148,"line_end":148,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":150613,"byte_end":150616,"line_start":149,"line_end":149,"column_start":5,"column_end":8}},{"value":"/ heap.clear();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":150621,"byte_end":150638,"line_start":150,"line_end":150,"column_start":5,"column_end":22}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":150643,"byte_end":150646,"line_start":151,"line_end":151,"column_start":5,"column_end":8}},{"value":"/ assert!(heap.is_empty());","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":150651,"byte_end":150680,"line_start":152,"line_end":152,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":150685,"byte_end":150692,"line_start":153,"line_end":153,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1318},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":151078,"byte_end":151081,"line_start":169,"line_end":169,"column_start":12,"column_end":15},"name":"len","qualname":"<BinaryHeap<T, K, N>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the length of the binary heap.","sig":null,"attributes":[{"value":"/ Returns the length of the binary heap.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":150760,"byte_end":150802,"line_start":158,"line_end":158,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":150807,"byte_end":150810,"line_start":159,"line_end":159,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":150815,"byte_end":150822,"line_start":160,"line_end":160,"column_start":5,"column_end":12}},{"value":"/ use heapless::binary_heap::{BinaryHeap, Max};","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":150827,"byte_end":150876,"line_start":161,"line_end":161,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":150881,"byte_end":150884,"line_start":162,"line_end":162,"column_start":5,"column_end":8}},{"value":"/ let mut heap: BinaryHeap<_, Max, 8> = BinaryHeap::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":150889,"byte_end":150949,"line_start":163,"line_end":163,"column_start":5,"column_end":65}},{"value":"/ heap.push(1).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":150954,"byte_end":150980,"line_start":164,"line_end":164,"column_start":5,"column_end":31}},{"value":"/ heap.push(3).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":150985,"byte_end":151011,"line_start":165,"line_end":165,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":151016,"byte_end":151019,"line_start":166,"line_end":166,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(heap.len(), 2);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":151024,"byte_end":151054,"line_start":167,"line_end":167,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":151059,"byte_end":151066,"line_start":168,"line_end":168,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1319},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":151531,"byte_end":151539,"line_start":188,"line_end":188,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<BinaryHeap<T, K, N>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks if the binary heap is empty.","sig":null,"attributes":[{"value":"/ Checks if the binary heap is empty.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":151135,"byte_end":151174,"line_start":173,"line_end":173,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":151179,"byte_end":151182,"line_start":174,"line_end":174,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":151187,"byte_end":151194,"line_start":175,"line_end":175,"column_start":5,"column_end":12}},{"value":"/ use heapless::binary_heap::{BinaryHeap, Max};","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":151199,"byte_end":151248,"line_start":176,"line_end":176,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":151253,"byte_end":151256,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ let mut heap: BinaryHeap<_, Max, 8> = BinaryHeap::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":151261,"byte_end":151321,"line_start":178,"line_end":178,"column_start":5,"column_end":65}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":151326,"byte_end":151329,"line_start":179,"line_end":179,"column_start":5,"column_end":8}},{"value":"/ assert!(heap.is_empty());","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":151334,"byte_end":151363,"line_start":180,"line_end":180,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":151368,"byte_end":151371,"line_start":181,"line_end":181,"column_start":5,"column_end":8}},{"value":"/ heap.push(3).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":151376,"byte_end":151402,"line_start":182,"line_end":182,"column_start":5,"column_end":31}},{"value":"/ heap.push(5).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":151407,"byte_end":151433,"line_start":183,"line_end":183,"column_start":5,"column_end":31}},{"value":"/ heap.push(1).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":151438,"byte_end":151464,"line_start":184,"line_end":184,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":151469,"byte_end":151472,"line_start":185,"line_end":185,"column_start":5,"column_end":8}},{"value":"/ assert!(!heap.is_empty());","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":151477,"byte_end":151507,"line_start":186,"line_end":186,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":151512,"byte_end":151519,"line_start":187,"line_end":187,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1320},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":152111,"byte_end":152115,"line_start":209,"line_end":209,"column_start":12,"column_end":16},"name":"iter","qualname":"<BinaryHeap<T, K, N>>::iter","value":"pub fn iter(&Self) -> slice::Iter<, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator visiting all values in the underlying vector, in arbitrary order.","sig":null,"attributes":[{"value":"/ Returns an iterator visiting all values in the underlying vector, in arbitrary order.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":151592,"byte_end":151681,"line_start":192,"line_end":192,"column_start":5,"column_end":94}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":151686,"byte_end":151689,"line_start":193,"line_end":193,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":151694,"byte_end":151701,"line_start":194,"line_end":194,"column_start":5,"column_end":12}},{"value":"/ use heapless::binary_heap::{BinaryHeap, Max};","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":151706,"byte_end":151755,"line_start":195,"line_end":195,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":151760,"byte_end":151763,"line_start":196,"line_end":196,"column_start":5,"column_end":8}},{"value":"/ let mut heap: BinaryHeap<_, Max, 8> = BinaryHeap::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":151768,"byte_end":151828,"line_start":197,"line_end":197,"column_start":5,"column_end":65}},{"value":"/ heap.push(1).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":151833,"byte_end":151859,"line_start":198,"line_end":198,"column_start":5,"column_end":31}},{"value":"/ heap.push(2).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":151864,"byte_end":151890,"line_start":199,"line_end":199,"column_start":5,"column_end":31}},{"value":"/ heap.push(3).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":151895,"byte_end":151921,"line_start":200,"line_end":200,"column_start":5,"column_end":31}},{"value":"/ heap.push(4).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":151926,"byte_end":151952,"line_start":201,"line_end":201,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":151957,"byte_end":151960,"line_start":202,"line_end":202,"column_start":5,"column_end":8}},{"value":"/ // Print 1, 2, 3, 4 in arbitrary order","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":151965,"byte_end":152007,"line_start":203,"line_end":203,"column_start":5,"column_end":47}},{"value":"/ for x in heap.iter() {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":152012,"byte_end":152038,"line_start":204,"line_end":204,"column_start":5,"column_end":31}},{"value":"/     println!(\"{}\", x);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":152043,"byte_end":152069,"line_start":205,"line_end":205,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":152074,"byte_end":152077,"line_start":206,"line_end":206,"column_start":5,"column_end":8}},{"value":"/ }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":152082,"byte_end":152087,"line_start":207,"line_end":207,"column_start":5,"column_end":10}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":152092,"byte_end":152099,"line_start":208,"line_end":208,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1321},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":152421,"byte_end":152429,"line_start":217,"line_end":217,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<BinaryHeap<T, K, N>>::iter_mut","value":"pub fn iter_mut(&mut Self) -> slice::IterMut<, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable iterator visiting all values in the underlying vector, in arbitrary order.","sig":null,"attributes":[{"value":"/ Returns a mutable iterator visiting all values in the underlying vector, in arbitrary order.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":152194,"byte_end":152290,"line_start":213,"line_end":213,"column_start":5,"column_end":101}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":152295,"byte_end":152298,"line_start":214,"line_end":214,"column_start":5,"column_end":8}},{"value":"/ **WARNING** Mutating the items in the binary heap can leave the heap in an inconsistent","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":152303,"byte_end":152394,"line_start":215,"line_end":215,"column_start":5,"column_end":96}},{"value":"/ state.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":152399,"byte_end":152409,"line_start":216,"line_end":216,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":1322},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":153000,"byte_end":153004,"line_start":235,"line_end":235,"column_start":12,"column_end":16},"name":"peek","qualname":"<BinaryHeap<T, K, N>>::peek","value":"pub fn peek(&Self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the *top* (greatest if max-heap, smallest if min-heap) item in the binary heap, or\n None if it is empty.","sig":null,"attributes":[{"value":"/ Returns the *top* (greatest if max-heap, smallest if min-heap) item in the binary heap, or","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":152523,"byte_end":152617,"line_start":221,"line_end":221,"column_start":5,"column_end":99}},{"value":"/ None if it is empty.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":152622,"byte_end":152646,"line_start":222,"line_end":222,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":152651,"byte_end":152654,"line_start":223,"line_end":223,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":152659,"byte_end":152666,"line_start":224,"line_end":224,"column_start":5,"column_end":12}},{"value":"/ use heapless::binary_heap::{BinaryHeap, Max};","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":152671,"byte_end":152720,"line_start":225,"line_end":225,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":152725,"byte_end":152728,"line_start":226,"line_end":226,"column_start":5,"column_end":8}},{"value":"/ let mut heap: BinaryHeap<_, Max, 8> = BinaryHeap::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":152733,"byte_end":152793,"line_start":227,"line_end":227,"column_start":5,"column_end":65}},{"value":"/ assert_eq!(heap.peek(), None);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":152798,"byte_end":152832,"line_start":228,"line_end":228,"column_start":5,"column_end":39}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":152837,"byte_end":152840,"line_start":229,"line_end":229,"column_start":5,"column_end":8}},{"value":"/ heap.push(1).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":152845,"byte_end":152871,"line_start":230,"line_end":230,"column_start":5,"column_end":31}},{"value":"/ heap.push(5).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":152876,"byte_end":152902,"line_start":231,"line_end":231,"column_start":5,"column_end":31}},{"value":"/ heap.push(2).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":152907,"byte_end":152933,"line_start":232,"line_end":232,"column_start":5,"column_end":31}},{"value":"/ assert_eq!(heap.peek(), Some(&5));","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":152938,"byte_end":152976,"line_start":233,"line_end":233,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":152981,"byte_end":152988,"line_start":234,"line_end":234,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1323},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":153777,"byte_end":153785,"line_start":265,"line_end":265,"column_start":12,"column_end":20},"name":"peek_mut","qualname":"<BinaryHeap<T, K, N>>::peek_mut","value":"pub fn peek_mut(&mut Self) -> Option<PeekMut<, T, K, >>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the greatest item in the binary heap, or\n `None` if it is empty.","sig":null,"attributes":[{"value":"/ Returns a mutable reference to the greatest item in the binary heap, or","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":153075,"byte_end":153150,"line_start":239,"line_end":239,"column_start":5,"column_end":80}},{"value":"/ `None` if it is empty.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":153155,"byte_end":153181,"line_start":240,"line_end":240,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":153186,"byte_end":153189,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ Note: If the `PeekMut` value is leaked, the heap may be in an","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":153194,"byte_end":153259,"line_start":242,"line_end":242,"column_start":5,"column_end":70}},{"value":"/ inconsistent state.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":153264,"byte_end":153287,"line_start":243,"line_end":243,"column_start":5,"column_end":28}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":153292,"byte_end":153295,"line_start":244,"line_end":244,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":153300,"byte_end":153314,"line_start":245,"line_end":245,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":153319,"byte_end":153322,"line_start":246,"line_end":246,"column_start":5,"column_end":8}},{"value":"/ Basic usage:","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":153327,"byte_end":153343,"line_start":247,"line_end":247,"column_start":5,"column_end":21}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":153348,"byte_end":153351,"line_start":248,"line_end":248,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":153356,"byte_end":153363,"line_start":249,"line_end":249,"column_start":5,"column_end":12}},{"value":"/ use heapless::binary_heap::{BinaryHeap, Max};","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":153368,"byte_end":153417,"line_start":250,"line_end":250,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":153422,"byte_end":153425,"line_start":251,"line_end":251,"column_start":5,"column_end":8}},{"value":"/ let mut heap: BinaryHeap<_, Max, 8> = BinaryHeap::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":153430,"byte_end":153490,"line_start":252,"line_end":252,"column_start":5,"column_end":65}},{"value":"/ assert!(heap.peek_mut().is_none());","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":153495,"byte_end":153534,"line_start":253,"line_end":253,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":153539,"byte_end":153542,"line_start":254,"line_end":254,"column_start":5,"column_end":8}},{"value":"/ heap.push(1);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":153547,"byte_end":153564,"line_start":255,"line_end":255,"column_start":5,"column_end":22}},{"value":"/ heap.push(5);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":153569,"byte_end":153586,"line_start":256,"line_end":256,"column_start":5,"column_end":22}},{"value":"/ heap.push(2);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":153591,"byte_end":153608,"line_start":257,"line_end":257,"column_start":5,"column_end":22}},{"value":"/ {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":153613,"byte_end":153618,"line_start":258,"line_end":258,"column_start":5,"column_end":10}},{"value":"/     let mut val = heap.peek_mut().unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":153623,"byte_end":153670,"line_start":259,"line_end":259,"column_start":5,"column_end":52}},{"value":"/     *val = 0;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":153675,"byte_end":153692,"line_start":260,"line_end":260,"column_start":5,"column_end":22}},{"value":"/ }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":153697,"byte_end":153702,"line_start":261,"line_end":261,"column_start":5,"column_end":10}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":153707,"byte_end":153710,"line_start":262,"line_end":262,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(heap.peek(), Some(&2));","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":153715,"byte_end":153753,"line_start":263,"line_end":263,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":153758,"byte_end":153765,"line_start":264,"line_end":264,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1324},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":154514,"byte_end":154517,"line_start":290,"line_end":290,"column_start":12,"column_end":15},"name":"pop","qualname":"<BinaryHeap<T, K, N>>::pop","value":"pub fn pop(&mut Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes the *top* (greatest if max-heap, smallest if min-heap) item from the binary heap and\n returns it, or None if it is empty.","sig":null,"attributes":[{"value":"/ Removes the *top* (greatest if max-heap, smallest if min-heap) item from the binary heap and","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":154013,"byte_end":154109,"line_start":276,"line_end":276,"column_start":5,"column_end":101}},{"value":"/ returns it, or None if it is empty.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":154114,"byte_end":154153,"line_start":277,"line_end":277,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":154158,"byte_end":154161,"line_start":278,"line_end":278,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":154166,"byte_end":154173,"line_start":279,"line_end":279,"column_start":5,"column_end":12}},{"value":"/ use heapless::binary_heap::{BinaryHeap, Max};","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":154178,"byte_end":154227,"line_start":280,"line_end":280,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":154232,"byte_end":154235,"line_start":281,"line_end":281,"column_start":5,"column_end":8}},{"value":"/ let mut heap: BinaryHeap<_, Max, 8> = BinaryHeap::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":154240,"byte_end":154300,"line_start":282,"line_end":282,"column_start":5,"column_end":65}},{"value":"/ heap.push(1).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":154305,"byte_end":154331,"line_start":283,"line_end":283,"column_start":5,"column_end":31}},{"value":"/ heap.push(3).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":154336,"byte_end":154362,"line_start":284,"line_end":284,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":154367,"byte_end":154370,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(heap.pop(), Some(3));","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":154375,"byte_end":154411,"line_start":286,"line_end":286,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(heap.pop(), Some(1));","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":154416,"byte_end":154452,"line_start":287,"line_end":287,"column_start":5,"column_end":41}},{"value":"/ assert_eq!(heap.pop(), None);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":154457,"byte_end":154490,"line_start":288,"line_end":288,"column_start":5,"column_end":38}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":154495,"byte_end":154502,"line_start":289,"line_end":289,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1325},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":154859,"byte_end":154872,"line_start":300,"line_end":300,"column_start":19,"column_end":32},"name":"pop_unchecked","qualname":"<BinaryHeap<T, K, N>>::pop_unchecked","value":"pub unsafe fn pop_unchecked(&mut Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Removes the *top* (greatest if max-heap, smallest if min-heap) item from the binary heap and\n returns it, without checking if the binary heap is empty.\n","sig":null,"attributes":[{"value":"/ Removes the *top* (greatest if max-heap, smallest if min-heap) item from the binary heap and","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":154678,"byte_end":154774,"line_start":298,"line_end":298,"column_start":5,"column_end":101}},{"value":"/ returns it, without checking if the binary heap is empty.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":154779,"byte_end":154840,"line_start":299,"line_end":299,"column_start":5,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1326},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":155518,"byte_end":155522,"line_start":323,"line_end":323,"column_start":12,"column_end":16},"name":"push","qualname":"<BinaryHeap<T, K, N>>::push","value":"pub fn push(&mut Self, T) -> Result<(), T>","parent":null,"children":[],"decl_id":null,"docs":" Pushes an item onto the binary heap.","sig":null,"attributes":[{"value":"/ Pushes an item onto the binary heap.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":155128,"byte_end":155168,"line_start":310,"line_end":310,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":155173,"byte_end":155176,"line_start":311,"line_end":311,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":155181,"byte_end":155188,"line_start":312,"line_end":312,"column_start":5,"column_end":12}},{"value":"/ use heapless::binary_heap::{BinaryHeap, Max};","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":155193,"byte_end":155242,"line_start":313,"line_end":313,"column_start":5,"column_end":54}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":155247,"byte_end":155250,"line_start":314,"line_end":314,"column_start":5,"column_end":8}},{"value":"/ let mut heap: BinaryHeap<_, Max, 8> = BinaryHeap::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":155255,"byte_end":155315,"line_start":315,"line_end":315,"column_start":5,"column_end":65}},{"value":"/ heap.push(3).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":155320,"byte_end":155346,"line_start":316,"line_end":316,"column_start":5,"column_end":31}},{"value":"/ heap.push(5).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":155351,"byte_end":155377,"line_start":317,"line_end":317,"column_start":5,"column_end":31}},{"value":"/ heap.push(1).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":155382,"byte_end":155408,"line_start":318,"line_end":318,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":155413,"byte_end":155416,"line_start":319,"line_end":319,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(heap.len(), 3);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":155421,"byte_end":155451,"line_start":320,"line_end":320,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(heap.peek(), Some(&5));","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":155456,"byte_end":155494,"line_start":321,"line_end":321,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":155499,"byte_end":155506,"line_start":322,"line_end":322,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1327},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":155802,"byte_end":155816,"line_start":333,"line_end":333,"column_start":19,"column_end":33},"name":"push_unchecked","qualname":"<BinaryHeap<T, K, N>>::push_unchecked","value":"pub unsafe fn push_unchecked(&mut Self, T)","parent":null,"children":[],"decl_id":null,"docs":" Pushes an item onto the binary heap without first checking if it's full.\n","sig":null,"attributes":[{"value":"/ Pushes an item onto the binary heap without first checking if it's full.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":155707,"byte_end":155783,"line_start":332,"line_end":332,"column_start":5,"column_end":81}}]},{"kind":"Struct","id":{"krate":0,"index":1344},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":159315,"byte_end":159322,"line_start":446,"line_end":446,"column_start":12,"column_end":19},"name":"PeekMut","qualname":"::binary_heap::PeekMut","value":"PeekMut {  }","parent":null,"children":[{"krate":0,"index":1349},{"krate":0,"index":1350}],"decl_id":null,"docs":" Structure wrapping a mutable reference to the greatest item on a\n `BinaryHeap`.","sig":null,"attributes":[{"value":"/ Structure wrapping a mutable reference to the greatest item on a","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":158998,"byte_end":159066,"line_start":438,"line_end":438,"column_start":1,"column_end":69}},{"value":"/ `BinaryHeap`.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":159067,"byte_end":159084,"line_start":439,"line_end":439,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":159085,"byte_end":159088,"line_start":440,"line_end":440,"column_start":1,"column_end":4}},{"value":"/ This `struct` is created by the [`peek_mut`] method on [`BinaryHeap`]. See","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":159089,"byte_end":159167,"line_start":441,"line_end":441,"column_start":1,"column_end":79}},{"value":"/ its documentation for more.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":159168,"byte_end":159199,"line_start":442,"line_end":442,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":159200,"byte_end":159203,"line_start":443,"line_end":443,"column_start":1,"column_end":4}},{"value":"/ [`peek_mut`]: struct.BinaryHeap.html#method.peek_mut","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":159204,"byte_end":159260,"line_start":444,"line_end":444,"column_start":1,"column_end":57}},{"value":"/ [`BinaryHeap`]: struct.BinaryHeap.html","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":159261,"byte_end":159303,"line_start":445,"line_end":445,"column_start":1,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1372},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":160450,"byte_end":160453,"line_start":498,"line_end":498,"column_start":12,"column_end":15},"name":"pop","qualname":"<PeekMut>::pop","value":"pub fn pop(PeekMut) -> T","parent":null,"children":[],"decl_id":null,"docs":" Removes the peeked value from the heap and returns it.\n","sig":null,"attributes":[{"value":"/ Removes the peeked value from the heap and returns it.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":160380,"byte_end":160438,"line_start":497,"line_end":497,"column_start":5,"column_end":63}}]},{"kind":"Mod","id":{"krate":0,"index":1405},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"mpmc","qualname":"::mpmc","value":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","parent":null,"children":[{"krate":0,"index":1406},{"krate":0,"index":1407},{"krate":0,"index":1410},{"krate":0,"index":1413},{"krate":0,"index":1414},{"krate":0,"index":1415},{"krate":0,"index":1416},{"krate":0,"index":1419},{"krate":0,"index":1422},{"krate":0,"index":1425},{"krate":0,"index":1428},{"krate":0,"index":1431},{"krate":0,"index":1434},{"krate":0,"index":1441},{"krate":0,"index":1453},{"krate":0,"index":1457},{"krate":0,"index":1460},{"krate":0,"index":1464},{"krate":0,"index":1467},{"krate":0,"index":1469}],"decl_id":null,"docs":" A fixed capacity Multiple-Producer Multiple-Consumer (MPMC) lock-free queue","sig":null,"attributes":[{"value":"cfg(all(has_cas, feature = \"cas\"))","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":3954,"byte_end":3991,"line_start":104,"line_end":104,"column_start":1,"column_end":38}},{"value":"/ A fixed capacity Multiple-Producer Multiple-Consumer (MPMC) lock-free queue","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":164960,"byte_end":165039,"line_start":1,"line_end":1,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":165040,"byte_end":165043,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ NOTE: This module is not available on targets that do *not* support CAS operations and are not","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":165044,"byte_end":165142,"line_start":3,"line_end":3,"column_start":1,"column_end":99}},{"value":"/ emulated by the [`atomic_polyfill`] crate (e.g., MSP430).","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":165143,"byte_end":165204,"line_start":4,"line_end":4,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":165205,"byte_end":165208,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ # Example","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":165209,"byte_end":165222,"line_start":6,"line_end":6,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":165223,"byte_end":165226,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ This queue can be constructed in \"const context\". Placing it in a `static` variable lets *all*","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":165227,"byte_end":165325,"line_start":8,"line_end":8,"column_start":1,"column_end":99}},{"value":"/ contexts (interrupts / threads / `main`) safely enqueue and dequeue items from it.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":165326,"byte_end":165412,"line_start":9,"line_end":9,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":165413,"byte_end":165416,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ ``` ignore","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":165417,"byte_end":165431,"line_start":11,"line_end":11,"column_start":1,"column_end":15}},{"value":"/ #![no_main]","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":165432,"byte_end":165447,"line_start":12,"line_end":12,"column_start":1,"column_end":16}},{"value":"/ #![no_std]","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":165448,"byte_end":165462,"line_start":13,"line_end":13,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":165463,"byte_end":165466,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ use panic_semihosting as _;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":165467,"byte_end":165498,"line_start":15,"line_end":15,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":165499,"byte_end":165502,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ use cortex_m::{asm, peripheral::syst::SystClkSource};","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":165503,"byte_end":165560,"line_start":17,"line_end":17,"column_start":1,"column_end":58}},{"value":"/ use cortex_m_rt::{entry, exception};","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":165561,"byte_end":165601,"line_start":18,"line_end":18,"column_start":1,"column_end":41}},{"value":"/ use cortex_m_semihosting::hprintln;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":165602,"byte_end":165641,"line_start":19,"line_end":19,"column_start":1,"column_end":40}},{"value":"/ use heapless::mpmc::Q2;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":165642,"byte_end":165669,"line_start":20,"line_end":20,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":165670,"byte_end":165673,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ static Q: Q2<u8> = Q2::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":165674,"byte_end":165707,"line_start":22,"line_end":22,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":165708,"byte_end":165711,"line_start":23,"line_end":23,"column_start":1,"column_end":4}},{"value":"/ #[entry]","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":165712,"byte_end":165724,"line_start":24,"line_end":24,"column_start":1,"column_end":13}},{"value":"/ fn main() -> ! {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":165725,"byte_end":165745,"line_start":25,"line_end":25,"column_start":1,"column_end":21}},{"value":"/     if let Some(p) = cortex_m::Peripherals::take() {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":165746,"byte_end":165802,"line_start":26,"line_end":26,"column_start":1,"column_end":57}},{"value":"/         let mut syst = p.SYST;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":165803,"byte_end":165837,"line_start":27,"line_end":27,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":165838,"byte_end":165841,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/         // configures the system timer to trigger a SysTick exception every second","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":165842,"byte_end":165928,"line_start":29,"line_end":29,"column_start":1,"column_end":87}},{"value":"/         syst.set_clock_source(SystClkSource::Core);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":165929,"byte_end":165984,"line_start":30,"line_end":30,"column_start":1,"column_end":56}},{"value":"/         syst.set_reload(12_000_000);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":165985,"byte_end":166025,"line_start":31,"line_end":31,"column_start":1,"column_end":41}},{"value":"/         syst.enable_counter();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":166026,"byte_end":166060,"line_start":32,"line_end":32,"column_start":1,"column_end":35}},{"value":"/         syst.enable_interrupt();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":166061,"byte_end":166097,"line_start":33,"line_end":33,"column_start":1,"column_end":37}},{"value":"/     }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":166098,"byte_end":166107,"line_start":34,"line_end":34,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":166108,"byte_end":166111,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/     loop {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":166112,"byte_end":166126,"line_start":36,"line_end":36,"column_start":1,"column_end":15}},{"value":"/         if let Some(x) = Q.dequeue() {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":166127,"byte_end":166169,"line_start":37,"line_end":37,"column_start":1,"column_end":43}},{"value":"/             hprintln!(\"{}\", x).ok();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":166170,"byte_end":166210,"line_start":38,"line_end":38,"column_start":1,"column_end":41}},{"value":"/         } else {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":166211,"byte_end":166231,"line_start":39,"line_end":39,"column_start":1,"column_end":21}},{"value":"/             asm::wfi();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":166232,"byte_end":166259,"line_start":40,"line_end":40,"column_start":1,"column_end":28}},{"value":"/         }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":166260,"byte_end":166273,"line_start":41,"line_end":41,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":166274,"byte_end":166283,"line_start":42,"line_end":42,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":166284,"byte_end":166289,"line_start":43,"line_end":43,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":166290,"byte_end":166293,"line_start":44,"line_end":44,"column_start":1,"column_end":4}},{"value":"/ #[exception]","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":166294,"byte_end":166310,"line_start":45,"line_end":45,"column_start":1,"column_end":17}},{"value":"/ fn SysTick() {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":166311,"byte_end":166329,"line_start":46,"line_end":46,"column_start":1,"column_end":19}},{"value":"/     static mut COUNT: u8 = 0;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":166330,"byte_end":166363,"line_start":47,"line_end":47,"column_start":1,"column_end":34}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":166364,"byte_end":166367,"line_start":48,"line_end":48,"column_start":1,"column_end":4}},{"value":"/     Q.enqueue(*COUNT).ok();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":166368,"byte_end":166399,"line_start":49,"line_end":49,"column_start":1,"column_end":32}},{"value":"/     *COUNT += 1;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":166400,"byte_end":166420,"line_start":50,"line_end":50,"column_start":1,"column_end":21}},{"value":"/ }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":166421,"byte_end":166426,"line_start":51,"line_end":51,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":166427,"byte_end":166434,"line_start":52,"line_end":52,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":166435,"byte_end":166438,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ # Benchmark","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":166439,"byte_end":166454,"line_start":54,"line_end":54,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":166455,"byte_end":166458,"line_start":55,"line_end":55,"column_start":1,"column_end":4}},{"value":"/ Measured on a ARM Cortex-M3 core running at 8 MHz and with zero Flash wait cycles","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":166459,"byte_end":166544,"line_start":56,"line_end":56,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":166545,"byte_end":166548,"line_start":57,"line_end":57,"column_start":1,"column_end":4}},{"value":"/ N| `Q8::<u8>::enqueue().ok()` (`z`) | `Q8::<u8>::dequeue()` (`z`) |","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":166549,"byte_end":166620,"line_start":58,"line_end":58,"column_start":1,"column_end":72}},{"value":"/ -|----------------------------------|-----------------------------|","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":166621,"byte_end":166692,"line_start":59,"line_end":59,"column_start":1,"column_end":72}},{"value":"/ 0|34                                |35                           |","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":166693,"byte_end":166764,"line_start":60,"line_end":60,"column_start":1,"column_end":72}},{"value":"/ 1|52                                |53                           |","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":166765,"byte_end":166836,"line_start":61,"line_end":61,"column_start":1,"column_end":72}},{"value":"/ 2|69                                |71                           |","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":166837,"byte_end":166908,"line_start":62,"line_end":62,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":166909,"byte_end":166912,"line_start":63,"line_end":63,"column_start":1,"column_end":4}},{"value":"/ - `N` denotes the number of *interruptions*. On Cortex-M, an interruption consists of an","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":166913,"byte_end":167005,"line_start":64,"line_end":64,"column_start":1,"column_end":93}},{"value":"/   interrupt handler preempting the would-be atomic section of the `enqueue` / `dequeue`","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":167006,"byte_end":167097,"line_start":65,"line_end":65,"column_start":1,"column_end":92}},{"value":"/   operation. Note that it does *not* matter if the higher priority handler uses the queue or","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":167098,"byte_end":167194,"line_start":66,"line_end":66,"column_start":1,"column_end":97}},{"value":"/   not.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":167195,"byte_end":167205,"line_start":67,"line_end":67,"column_start":1,"column_end":11}},{"value":"/ - All execution times are in clock cycles. 1 clock cycle = 125 ns.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":167206,"byte_end":167276,"line_start":68,"line_end":68,"column_start":1,"column_end":71}},{"value":"/ - Execution time is *dependent* of `mem::size_of::<T>()`. Both operations include one","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":167277,"byte_end":167366,"line_start":69,"line_end":69,"column_start":1,"column_end":90}},{"value":"/ `memcpy(T)` in their successful path.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":167367,"byte_end":167408,"line_start":70,"line_end":70,"column_start":1,"column_end":42}},{"value":"/ - The optimization level is indicated in parentheses.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":167409,"byte_end":167466,"line_start":71,"line_end":71,"column_start":1,"column_end":58}},{"value":"/ - The numbers reported correspond to the successful path (i.e. `Some` is returned by `dequeue`","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":167467,"byte_end":167565,"line_start":72,"line_end":72,"column_start":1,"column_end":99}},{"value":"/ and `Ok` is returned by `enqueue`).","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":167566,"byte_end":167605,"line_start":73,"line_end":73,"column_start":1,"column_end":40}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":167606,"byte_end":167609,"line_start":74,"line_end":74,"column_start":1,"column_end":4}},{"value":"/ # Portability","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":167610,"byte_end":167627,"line_start":75,"line_end":75,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":167628,"byte_end":167631,"line_start":76,"line_end":76,"column_start":1,"column_end":4}},{"value":"/ This module requires CAS atomic instructions which are not available on all architectures","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":167632,"byte_end":167725,"line_start":77,"line_end":77,"column_start":1,"column_end":94}},{"value":"/ (e.g.  ARMv6-M (`thumbv6m-none-eabi`) and MSP430 (`msp430-none-elf`)). These atomics can be emulated","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":167726,"byte_end":167830,"line_start":78,"line_end":78,"column_start":1,"column_end":105}},{"value":"/ however with [`atomic_polyfill`], which is enabled with the `cas` feature and is enabled by default","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":167831,"byte_end":167934,"line_start":79,"line_end":79,"column_start":1,"column_end":104}},{"value":"/ for `thumbv6m-none-eabi` and `riscv32` targets. MSP430 is currently not supported by [`atomic_polyfill`].","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":167935,"byte_end":168044,"line_start":80,"line_end":80,"column_start":1,"column_end":110}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":168045,"byte_end":168048,"line_start":81,"line_end":81,"column_start":1,"column_end":4}},{"value":"/ # References","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":168049,"byte_end":168065,"line_start":82,"line_end":82,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":168066,"byte_end":168069,"line_start":83,"line_end":83,"column_start":1,"column_end":4}},{"value":"/ This is an implementation of Dmitry Vyukov's [\"Bounded MPMC queue\"][0] minus the cache padding.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":168070,"byte_end":168169,"line_start":84,"line_end":84,"column_start":1,"column_end":100}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":168170,"byte_end":168173,"line_start":85,"line_end":85,"column_start":1,"column_end":4}},{"value":"/ [0]: http://www.1024cores.net/home/lock-free-algorithms/queues/bounded-mpmc-queue","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":168174,"byte_end":168259,"line_start":86,"line_end":86,"column_start":1,"column_end":86}}]},{"kind":"Type","id":{"krate":0,"index":1416},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":169093,"byte_end":169095,"line_start":110,"line_end":110,"column_start":10,"column_end":12},"name":"Q2","qualname":"::mpmc::Q2","value":"MpMcQueue<T, >","parent":null,"children":[],"decl_id":null,"docs":" MPMC queue with a capability for 2 elements.\n","sig":null,"attributes":[{"value":"/ MPMC queue with a capability for 2 elements.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":169035,"byte_end":169083,"line_start":109,"line_end":109,"column_start":1,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":1419},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":169177,"byte_end":169179,"line_start":113,"line_end":113,"column_start":10,"column_end":12},"name":"Q4","qualname":"::mpmc::Q4","value":"MpMcQueue<T, >","parent":null,"children":[],"decl_id":null,"docs":" MPMC queue with a capability for 4 elements.\n","sig":null,"attributes":[{"value":"/ MPMC queue with a capability for 4 elements.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":169119,"byte_end":169167,"line_start":112,"line_end":112,"column_start":1,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":1422},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":169261,"byte_end":169263,"line_start":116,"line_end":116,"column_start":10,"column_end":12},"name":"Q8","qualname":"::mpmc::Q8","value":"MpMcQueue<T, >","parent":null,"children":[],"decl_id":null,"docs":" MPMC queue with a capability for 8 elements.\n","sig":null,"attributes":[{"value":"/ MPMC queue with a capability for 8 elements.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":169203,"byte_end":169251,"line_start":115,"line_end":115,"column_start":1,"column_end":49}}]},{"kind":"Type","id":{"krate":0,"index":1425},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":169346,"byte_end":169349,"line_start":119,"line_end":119,"column_start":10,"column_end":13},"name":"Q16","qualname":"::mpmc::Q16","value":"MpMcQueue<T, >","parent":null,"children":[],"decl_id":null,"docs":" MPMC queue with a capability for 16 elements.\n","sig":null,"attributes":[{"value":"/ MPMC queue with a capability for 16 elements.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":169287,"byte_end":169336,"line_start":118,"line_end":118,"column_start":1,"column_end":50}}]},{"kind":"Type","id":{"krate":0,"index":1428},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":169433,"byte_end":169436,"line_start":122,"line_end":122,"column_start":10,"column_end":13},"name":"Q32","qualname":"::mpmc::Q32","value":"MpMcQueue<T, >","parent":null,"children":[],"decl_id":null,"docs":" MPMC queue with a capability for 32 elements.\n","sig":null,"attributes":[{"value":"/ MPMC queue with a capability for 32 elements.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":169374,"byte_end":169423,"line_start":121,"line_end":121,"column_start":1,"column_end":50}}]},{"kind":"Type","id":{"krate":0,"index":1431},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":169520,"byte_end":169523,"line_start":125,"line_end":125,"column_start":10,"column_end":13},"name":"Q64","qualname":"::mpmc::Q64","value":"MpMcQueue<T, >","parent":null,"children":[],"decl_id":null,"docs":" MPMC queue with a capability for 64 elements.\n","sig":null,"attributes":[{"value":"/ MPMC queue with a capability for 64 elements.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":169461,"byte_end":169510,"line_start":124,"line_end":124,"column_start":1,"column_end":50}}]},{"kind":"Struct","id":{"krate":0,"index":1434},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":169710,"byte_end":169719,"line_start":130,"line_end":130,"column_start":12,"column_end":21},"name":"MpMcQueue","qualname":"::mpmc::MpMcQueue","value":"MpMcQueue {  }","parent":null,"children":[{"krate":0,"index":1437},{"krate":0,"index":1439},{"krate":0,"index":1440}],"decl_id":null,"docs":" MPMC queue with a capacity for N elements\n N must be a power of 2\n The max value of N is u8::MAX - 1 if `mpmc_large` feature is not enabled.\n","sig":null,"attributes":[{"value":"/ MPMC queue with a capacity for N elements","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":169548,"byte_end":169593,"line_start":127,"line_end":127,"column_start":1,"column_end":46}},{"value":"/ N must be a power of 2","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":169594,"byte_end":169620,"line_start":128,"line_end":128,"column_start":1,"column_end":27}},{"value":"/ The max value of N is u8::MAX - 1 if `mpmc_large` feature is not enabled.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":169621,"byte_end":169698,"line_start":129,"line_end":129,"column_start":1,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":1448},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":170070,"byte_end":170073,"line_start":143,"line_end":143,"column_start":18,"column_end":21},"name":"new","qualname":"<MpMcQueue<T, N>>::new","value":"pub const fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty queue\n","sig":null,"attributes":[{"value":"/ Creates an empty queue","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":170026,"byte_end":170052,"line_start":142,"line_end":142,"column_start":5,"column_end":31}}]},{"kind":"Method","id":{"krate":0,"index":1451},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":170813,"byte_end":170820,"line_start":167,"line_end":167,"column_start":12,"column_end":19},"name":"dequeue","qualname":"<MpMcQueue<T, N>>::dequeue","value":"pub fn dequeue(&Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the item in the front of the queue, or `None` if the queue is empty\n","sig":null,"attributes":[{"value":"/ Returns the item in the front of the queue, or `None` if the queue is empty","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":170722,"byte_end":170801,"line_start":166,"line_end":166,"column_start":5,"column_end":84}}]},{"kind":"Method","id":{"krate":0,"index":1452},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":171056,"byte_end":171063,"line_start":174,"line_end":174,"column_start":12,"column_end":19},"name":"enqueue","qualname":"<MpMcQueue<T, N>>::enqueue","value":"pub fn enqueue(&Self, T) -> Result<(), T>","parent":null,"children":[],"decl_id":null,"docs":" Adds an `item` to the end of the queue","sig":null,"attributes":[{"value":"/ Adds an `item` to the end of the queue","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":170941,"byte_end":170983,"line_start":171,"line_end":171,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":170988,"byte_end":170991,"line_start":172,"line_end":172,"column_start":5,"column_end":8}},{"value":"/ Returns back the `item` if the queue is full","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":170996,"byte_end":171044,"line_start":173,"line_end":173,"column_start":5,"column_end":53}}]},{"kind":"Mod","id":{"krate":0,"index":1471},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"pool","qualname":"::pool","value":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","parent":null,"children":[{"krate":0,"index":1472},{"krate":0,"index":1473},{"krate":0,"index":1476},{"krate":0,"index":1479},{"krate":0,"index":1480},{"krate":0,"index":1483},{"krate":0,"index":1486},{"krate":0,"index":1487},{"krate":0,"index":1488},{"krate":0,"index":1490},{"krate":0,"index":1493},{"krate":0,"index":1494},{"krate":0,"index":1496},{"krate":0,"index":1499},{"krate":0,"index":1500},{"krate":0,"index":1503},{"krate":0,"index":1506},{"krate":0,"index":1507},{"krate":0,"index":1510},{"krate":0,"index":1513},{"krate":0,"index":1516},{"krate":0,"index":1517},{"krate":0,"index":1520},{"krate":0,"index":1523},{"krate":0,"index":1751},{"krate":0,"index":1784},{"krate":0,"index":1788},{"krate":0,"index":1790},{"krate":0,"index":1792},{"krate":0,"index":1801},{"krate":0,"index":1806},{"krate":0,"index":1809},{"krate":0,"index":1810},{"krate":0,"index":1811},{"krate":0,"index":1814},{"krate":0,"index":1817},{"krate":0,"index":1819},{"krate":0,"index":1823},{"krate":0,"index":1827},{"krate":0,"index":1831},{"krate":0,"index":1834},{"krate":0,"index":1837},{"krate":0,"index":1840},{"krate":0,"index":1843},{"krate":0,"index":1845},{"krate":0,"index":1848},{"krate":0,"index":1851}],"decl_id":null,"docs":" A heap-less, interrupt-safe, lock-free memory pool (\\*)","sig":null,"attributes":[{"value":"cfg(all(has_cas, feature = \"cas\"))","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":4006,"byte_end":4043,"line_start":106,"line_end":106,"column_start":1,"column_end":38}},{"value":"/ A heap-less, interrupt-safe, lock-free memory pool (\\*)","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":174767,"byte_end":174826,"line_start":1,"line_end":1,"column_start":1,"column_end":60}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":174827,"byte_end":174830,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ NOTE: This module is not available on targets that do *not* support CAS operations and are not","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":174831,"byte_end":174929,"line_start":3,"line_end":3,"column_start":1,"column_end":99}},{"value":"/ emulated by the [`atomic_polyfill`] crate (e.g., MSP430).","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":174930,"byte_end":174991,"line_start":4,"line_end":4,"column_start":1,"column_end":62}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":174992,"byte_end":174995,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ (\\*) Currently, the implementation is only lock-free *and* `Sync` on ARMv6, ARMv7-{A,R,M} & ARMv8-M","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":174996,"byte_end":175099,"line_start":6,"line_end":6,"column_start":1,"column_end":104}},{"value":"/ devices","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":175100,"byte_end":175111,"line_start":7,"line_end":7,"column_start":1,"column_end":12}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":175112,"byte_end":175115,"line_start":8,"line_end":8,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":175116,"byte_end":175130,"line_start":9,"line_end":9,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":175131,"byte_end":175134,"line_start":10,"line_end":10,"column_start":1,"column_end":4}},{"value":"/ The most common way of using this pool is as a global singleton; the singleton mode gives you","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":175135,"byte_end":175232,"line_start":11,"line_end":11,"column_start":1,"column_end":98}},{"value":"/ automatic deallocation of memory blocks on `drop`.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":175233,"byte_end":175287,"line_start":12,"line_end":12,"column_start":1,"column_end":55}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":175288,"byte_end":175291,"line_start":13,"line_end":13,"column_start":1,"column_end":4}},{"value":"/ ``` ignore","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":175292,"byte_end":175306,"line_start":14,"line_end":14,"column_start":1,"column_end":15}},{"value":"/ #![no_main]","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":175307,"byte_end":175322,"line_start":15,"line_end":15,"column_start":1,"column_end":16}},{"value":"/ #![no_std]","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":175323,"byte_end":175337,"line_start":16,"line_end":16,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":175338,"byte_end":175341,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ use heapless::{pool, pool::singleton::Box};","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":175342,"byte_end":175389,"line_start":18,"line_end":18,"column_start":1,"column_end":48}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":175390,"byte_end":175393,"line_start":19,"line_end":19,"column_start":1,"column_end":4}},{"value":"/ // instantiate a memory pool of `[u8; 128]` blocks as a global singleton","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":175394,"byte_end":175470,"line_start":20,"line_end":20,"column_start":1,"column_end":77}},{"value":"/ pool!(","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":175471,"byte_end":175481,"line_start":21,"line_end":21,"column_start":1,"column_end":11}},{"value":"/     // attributes can be used here","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":175482,"byte_end":175520,"line_start":22,"line_end":22,"column_start":1,"column_end":39}},{"value":"/     // #[link_section = \".ccram.A\"]","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":175521,"byte_end":175560,"line_start":23,"line_end":23,"column_start":1,"column_end":40}},{"value":"/     A: [u8; 128]","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":175561,"byte_end":175581,"line_start":24,"line_end":24,"column_start":1,"column_end":21}},{"value":"/ );","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":175582,"byte_end":175588,"line_start":25,"line_end":25,"column_start":1,"column_end":7}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":175589,"byte_end":175592,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ #[entry]","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":175593,"byte_end":175605,"line_start":27,"line_end":27,"column_start":1,"column_end":13}},{"value":"/ fn main() -> ! {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":175606,"byte_end":175626,"line_start":28,"line_end":28,"column_start":1,"column_end":21}},{"value":"/     static mut MEMORY: [u8; 1024] = [0; 1024];","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":175627,"byte_end":175677,"line_start":29,"line_end":29,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":175678,"byte_end":175681,"line_start":30,"line_end":30,"column_start":1,"column_end":4}},{"value":"/     // increase the capacity of the pool by ~8 blocks","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":175682,"byte_end":175739,"line_start":31,"line_end":31,"column_start":1,"column_end":58}},{"value":"/     A::grow(MEMORY);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":175740,"byte_end":175764,"line_start":32,"line_end":32,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":175765,"byte_end":175768,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/     // claim a block of memory","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":175769,"byte_end":175803,"line_start":34,"line_end":34,"column_start":1,"column_end":35}},{"value":"/     // note that the type is `Box<A>`, and not `Box<[u8; 128]>`","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":175804,"byte_end":175871,"line_start":35,"line_end":35,"column_start":1,"column_end":68}},{"value":"/     // `A` is the \"name\" of the pool","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":175872,"byte_end":175912,"line_start":36,"line_end":36,"column_start":1,"column_end":41}},{"value":"/     let x: Box<A, _> = A::alloc().unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":175913,"byte_end":175960,"line_start":37,"line_end":37,"column_start":1,"column_end":48}},{"value":"/     loop {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":175961,"byte_end":175975,"line_start":38,"line_end":38,"column_start":1,"column_end":15}},{"value":"/         // .. do stuff with `x` ..","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":175976,"byte_end":176014,"line_start":39,"line_end":39,"column_start":1,"column_end":39}},{"value":"/     }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":176015,"byte_end":176024,"line_start":40,"line_end":40,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":176025,"byte_end":176030,"line_start":41,"line_end":41,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":176031,"byte_end":176034,"line_start":42,"line_end":42,"column_start":1,"column_end":4}},{"value":"/ #[exception]","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":176035,"byte_end":176051,"line_start":43,"line_end":43,"column_start":1,"column_end":17}},{"value":"/ fn SysTick() {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":176052,"byte_end":176070,"line_start":44,"line_end":44,"column_start":1,"column_end":19}},{"value":"/     // claim a block of memory","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":176071,"byte_end":176105,"line_start":45,"line_end":45,"column_start":1,"column_end":35}},{"value":"/     let y = A::alloc().unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":176106,"byte_end":176142,"line_start":46,"line_end":46,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":176143,"byte_end":176146,"line_start":47,"line_end":47,"column_start":1,"column_end":4}},{"value":"/     // .. do stuff with `y` ..","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":176147,"byte_end":176181,"line_start":48,"line_end":48,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":176182,"byte_end":176185,"line_start":49,"line_end":49,"column_start":1,"column_end":4}},{"value":"/     // return the memory block to the pool","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":176186,"byte_end":176232,"line_start":50,"line_end":50,"column_start":1,"column_end":47}},{"value":"/     drop(y);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":176233,"byte_end":176249,"line_start":51,"line_end":51,"column_start":1,"column_end":17}},{"value":"/ }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":176250,"byte_end":176255,"line_start":52,"line_end":52,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":176256,"byte_end":176263,"line_start":53,"line_end":53,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":176264,"byte_end":176267,"line_start":54,"line_end":54,"column_start":1,"column_end":4}},{"value":"/ # Portability","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":176268,"byte_end":176285,"line_start":55,"line_end":55,"column_start":1,"column_end":18}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":176286,"byte_end":176289,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ This pool internally uses a Treiber stack which is known to be susceptible to the ABA problem.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":176290,"byte_end":176388,"line_start":57,"line_end":57,"column_start":1,"column_end":99}},{"value":"/ The only counter measure against the ABA problem that this implementation currently takes is","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":176389,"byte_end":176485,"line_start":58,"line_end":58,"column_start":1,"column_end":97}},{"value":"/ relying on LL/SC (Link-local / Store-conditional) instructions being used to implement CAS loops","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":176486,"byte_end":176586,"line_start":59,"line_end":59,"column_start":1,"column_end":101}},{"value":"/ on the target architecture (see section on ['Soundness'](#soundness) for more information). For","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":176587,"byte_end":176686,"line_start":60,"line_end":60,"column_start":1,"column_end":100}},{"value":"/ this reason, `Pool` only implements `Sync` when compiling for some ARM cores.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":176687,"byte_end":176768,"line_start":61,"line_end":61,"column_start":1,"column_end":82}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":176769,"byte_end":176772,"line_start":62,"line_end":62,"column_start":1,"column_end":4}},{"value":"/ This module requires CAS atomic instructions which are not available on all architectures","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":176773,"byte_end":176866,"line_start":63,"line_end":63,"column_start":1,"column_end":94}},{"value":"/ (e.g.  ARMv6-M (`thumbv6m-none-eabi`) and MSP430 (`msp430-none-elf`)). These atomics can be emulated","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":176867,"byte_end":176971,"line_start":64,"line_end":64,"column_start":1,"column_end":105}},{"value":"/ however with [`atomic_polyfill`], which is enabled with the `cas` feature and is enabled by default","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":176972,"byte_end":177075,"line_start":65,"line_end":65,"column_start":1,"column_end":104}},{"value":"/ for `thumbv6m-none-eabi` and `riscv32` targets. MSP430 is currently not supported by [`atomic_polyfill`].","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":177076,"byte_end":177185,"line_start":66,"line_end":66,"column_start":1,"column_end":110}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":177186,"byte_end":177189,"line_start":67,"line_end":67,"column_start":1,"column_end":4}},{"value":"/ # Soundness","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":177190,"byte_end":177205,"line_start":68,"line_end":68,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":177206,"byte_end":177209,"line_start":69,"line_end":69,"column_start":1,"column_end":4}},{"value":"/ This pool uses a Treiber stack to keep a list of free memory blocks (nodes). Each of these","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":177210,"byte_end":177304,"line_start":70,"line_end":70,"column_start":1,"column_end":95}},{"value":"/ nodes has a pointer to the next node. To claim a memory block we simply pop a node from the","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":177305,"byte_end":177400,"line_start":71,"line_end":71,"column_start":1,"column_end":96}},{"value":"/ top of the stack and use it as a memory block. The pop operation consists of swapping the","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":177401,"byte_end":177494,"line_start":72,"line_end":72,"column_start":1,"column_end":94}},{"value":"/ current head (top) node with the node below it. The Rust code for the `pop` operation is shown","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":177495,"byte_end":177593,"line_start":73,"line_end":73,"column_start":1,"column_end":99}},{"value":"/ below:","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":177594,"byte_end":177604,"line_start":74,"line_end":74,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":177605,"byte_end":177608,"line_start":75,"line_end":75,"column_start":1,"column_end":4}},{"value":"/ ``` ignore","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":177609,"byte_end":177623,"line_start":76,"line_end":76,"column_start":1,"column_end":15}},{"value":"/ fn pop(&self) -> Option<NonNull<Node<T>>> {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":177624,"byte_end":177671,"line_start":77,"line_end":77,"column_start":1,"column_end":48}},{"value":"/     let fetch_order = ..;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":177672,"byte_end":177701,"line_start":78,"line_end":78,"column_start":1,"column_end":30}},{"value":"/     let set_order = ..;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":177702,"byte_end":177729,"line_start":79,"line_end":79,"column_start":1,"column_end":28}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":177730,"byte_end":177733,"line_start":80,"line_end":80,"column_start":1,"column_end":4}},{"value":"/     // `self.head` has type `AtomicPtr<Node<T>>`","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":177734,"byte_end":177786,"line_start":81,"line_end":81,"column_start":1,"column_end":53}},{"value":"/     // where `struct Node<T> { next: AtomicPtr<Node<T>>, data: UnsafeCell<T> }`","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":177787,"byte_end":177870,"line_start":82,"line_end":82,"column_start":1,"column_end":84}},{"value":"/     let mut head = self.head.load(fetch_order);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":177871,"byte_end":177922,"line_start":83,"line_end":83,"column_start":1,"column_end":52}},{"value":"/     loop {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":177923,"byte_end":177937,"line_start":84,"line_end":84,"column_start":1,"column_end":15}},{"value":"/         if let Some(nn_head) = NonNull::new(head) {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":177938,"byte_end":177993,"line_start":85,"line_end":85,"column_start":1,"column_end":56}},{"value":"/             let next = unsafe { (*head).next.load(Ordering::Relaxed) };","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":177994,"byte_end":178069,"line_start":86,"line_end":86,"column_start":1,"column_end":76}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":178070,"byte_end":178073,"line_start":87,"line_end":87,"column_start":1,"column_end":4}},{"value":"/             // <~ preempted","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":178074,"byte_end":178105,"line_start":88,"line_end":88,"column_start":1,"column_end":32}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":178106,"byte_end":178109,"line_start":89,"line_end":89,"column_start":1,"column_end":4}},{"value":"/             match self","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":178110,"byte_end":178136,"line_start":90,"line_end":90,"column_start":1,"column_end":27}},{"value":"/                 .head","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":178137,"byte_end":178162,"line_start":91,"line_end":91,"column_start":1,"column_end":26}},{"value":"/                 .compare_exchange_weak(head, next, set_order, fetch_order)","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":178163,"byte_end":178241,"line_start":92,"line_end":92,"column_start":1,"column_end":79}},{"value":"/             {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":178242,"byte_end":178259,"line_start":93,"line_end":93,"column_start":1,"column_end":18}},{"value":"/                 Ok(_) => break Some(nn_head),","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":178260,"byte_end":178309,"line_start":94,"line_end":94,"column_start":1,"column_end":50}},{"value":"/                 // head was changed by some interrupt handler / thread","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":178310,"byte_end":178384,"line_start":95,"line_end":95,"column_start":1,"column_end":75}},{"value":"/                 Err(new_head) => head = new_head,","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":178385,"byte_end":178438,"line_start":96,"line_end":96,"column_start":1,"column_end":54}},{"value":"/             }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":178439,"byte_end":178456,"line_start":97,"line_end":97,"column_start":1,"column_end":18}},{"value":"/         } else {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":178457,"byte_end":178477,"line_start":98,"line_end":98,"column_start":1,"column_end":21}},{"value":"/             // stack is observed as empty","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":178478,"byte_end":178523,"line_start":99,"line_end":99,"column_start":1,"column_end":46}},{"value":"/             break None;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":178524,"byte_end":178551,"line_start":100,"line_end":100,"column_start":1,"column_end":28}},{"value":"/         }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":178552,"byte_end":178565,"line_start":101,"line_end":101,"column_start":1,"column_end":14}},{"value":"/     }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":178566,"byte_end":178575,"line_start":102,"line_end":102,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":178576,"byte_end":178581,"line_start":103,"line_end":103,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":178582,"byte_end":178589,"line_start":104,"line_end":104,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":178590,"byte_end":178593,"line_start":105,"line_end":105,"column_start":1,"column_end":4}},{"value":"/ In general, the `pop` operation is susceptible to the ABA problem. If this operation gets","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":178594,"byte_end":178687,"line_start":106,"line_end":106,"column_start":1,"column_end":94}},{"value":"/ preempted by some interrupt handler somewhere between the `head.load` and the","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":178688,"byte_end":178769,"line_start":107,"line_end":107,"column_start":1,"column_end":82}},{"value":"/ `compare_and_exchange_weak`, and that handler modifies the stack in such a way that the head","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":178770,"byte_end":178866,"line_start":108,"line_end":108,"column_start":1,"column_end":97}},{"value":"/ (top) of the stack remains unchanged then resuming the `pop` operation will corrupt the stack.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":178867,"byte_end":178965,"line_start":109,"line_end":109,"column_start":1,"column_end":99}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":178966,"byte_end":178969,"line_start":110,"line_end":110,"column_start":1,"column_end":4}},{"value":"/ An example: imagine we are doing on `pop` on stack that contains these nodes: `A -> B -> C`,","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":178970,"byte_end":179066,"line_start":111,"line_end":111,"column_start":1,"column_end":97}},{"value":"/ `A` is the head (top), `B` is next to `A` and `C` is next to `B`. The `pop` operation will do a","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":179067,"byte_end":179166,"line_start":112,"line_end":112,"column_start":1,"column_end":100}},{"value":"/ `CAS(&self.head, A, B)` operation to atomically change the head to `B` iff it currently is `A`.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":179167,"byte_end":179266,"line_start":113,"line_end":113,"column_start":1,"column_end":100}},{"value":"/ Now, let's say a handler preempts the `pop` operation before the `CAS` operation starts and it","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":179267,"byte_end":179365,"line_start":114,"line_end":114,"column_start":1,"column_end":99}},{"value":"/ `pop`s the stack twice and then `push`es back the `A` node; now the state of the stack is `A ->","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":179366,"byte_end":179465,"line_start":115,"line_end":115,"column_start":1,"column_end":100}},{"value":"/ C`. When the original `pop` operation is resumed it will succeed in doing the `CAS` operation","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":179466,"byte_end":179563,"line_start":116,"line_end":116,"column_start":1,"column_end":98}},{"value":"/ setting `B` as the head of the stack. However, `B` was used by the handler as a memory block and","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":179564,"byte_end":179664,"line_start":117,"line_end":117,"column_start":1,"column_end":101}},{"value":"/ no longer is a valid free node. As a result the stack, and thus the allocator, is in a invalid","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":179665,"byte_end":179763,"line_start":118,"line_end":118,"column_start":1,"column_end":99}},{"value":"/ state.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":179764,"byte_end":179774,"line_start":119,"line_end":119,"column_start":1,"column_end":11}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":179775,"byte_end":179778,"line_start":120,"line_end":120,"column_start":1,"column_end":4}},{"value":"/ However, not all is lost because ARM devices use LL/SC (Link-local / Store-conditional)","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":179779,"byte_end":179870,"line_start":121,"line_end":121,"column_start":1,"column_end":92}},{"value":"/ operations to implement CAS loops. Let's look at the actual disassembly of `pop` for the ARM","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":179871,"byte_end":179967,"line_start":122,"line_end":122,"column_start":1,"column_end":97}},{"value":"/ Cortex-M.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":179968,"byte_end":179981,"line_start":123,"line_end":123,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":179982,"byte_end":179985,"line_start":124,"line_end":124,"column_start":1,"column_end":4}},{"value":"/ ``` text","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":179986,"byte_end":179998,"line_start":125,"line_end":125,"column_start":1,"column_end":13}},{"value":"/ 08000130 <<heapless::pool::Pool<T>>::pop>:","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":179999,"byte_end":180045,"line_start":126,"line_end":126,"column_start":1,"column_end":47}},{"value":"/  8000130:       6802            ldr     r2, [r0, #0]","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":180046,"byte_end":180102,"line_start":127,"line_end":127,"column_start":1,"column_end":57}},{"value":"/  8000132:       e00c            b.n     800014e <<heapless::pool::Pool<T>>::pop+0x1e>","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":180103,"byte_end":180192,"line_start":128,"line_end":128,"column_start":1,"column_end":90}},{"value":"/  8000134:       4611            mov     r1, r2","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":180193,"byte_end":180243,"line_start":129,"line_end":129,"column_start":1,"column_end":51}},{"value":"/  8000136:       f8d2 c000       ldr.w   ip, [r2]","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":180244,"byte_end":180296,"line_start":130,"line_end":130,"column_start":1,"column_end":53}},{"value":"/  800013a:       e850 2f00       ldrex   r2, [r0]","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":180297,"byte_end":180349,"line_start":131,"line_end":131,"column_start":1,"column_end":53}},{"value":"/  800013e:       428a            cmp     r2, r1","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":180350,"byte_end":180400,"line_start":132,"line_end":132,"column_start":1,"column_end":51}},{"value":"/  8000140:       d103            bne.n   800014a <<heapless::pool::Pool<T>>::pop+0x1a>","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":180401,"byte_end":180490,"line_start":133,"line_end":133,"column_start":1,"column_end":90}},{"value":"/  8000142:       e840 c300       strex   r3, ip, [r0]","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":180491,"byte_end":180547,"line_start":134,"line_end":134,"column_start":1,"column_end":57}},{"value":"/  8000146:       b913            cbnz    r3, 800014e <<heapless::pool::Pool<T>>::pop+0x1e>","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":180548,"byte_end":180641,"line_start":135,"line_end":135,"column_start":1,"column_end":94}},{"value":"/  8000148:       e004            b.n     8000154 <<heapless::pool::Pool<T>>::pop+0x24>","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":180642,"byte_end":180731,"line_start":136,"line_end":136,"column_start":1,"column_end":90}},{"value":"/  800014a:       f3bf 8f2f       clrex","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":180732,"byte_end":180773,"line_start":137,"line_end":137,"column_start":1,"column_end":42}},{"value":"/  800014e:       2a00            cmp     r2, #0","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":180774,"byte_end":180824,"line_start":138,"line_end":138,"column_start":1,"column_end":51}},{"value":"/  8000150:       d1f0            bne.n   8000134 <<heapless::pool::Pool<T>>::pop+0x4>","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":180825,"byte_end":180913,"line_start":139,"line_end":139,"column_start":1,"column_end":89}},{"value":"/  8000152:       2100            movs    r1, #0","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":180914,"byte_end":180964,"line_start":140,"line_end":140,"column_start":1,"column_end":51}},{"value":"/  8000154:       4608            mov     r0, r1","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":180965,"byte_end":181015,"line_start":141,"line_end":141,"column_start":1,"column_end":51}},{"value":"/  8000156:       4770            bx      lr","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":181016,"byte_end":181062,"line_start":142,"line_end":142,"column_start":1,"column_end":47}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":181063,"byte_end":181070,"line_start":143,"line_end":143,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":181071,"byte_end":181074,"line_start":144,"line_end":144,"column_start":1,"column_end":4}},{"value":"/ LDREX (\"load exclusive\") is the LL instruction, and STREX (\"store exclusive\") is the SC","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":181075,"byte_end":181166,"line_start":145,"line_end":145,"column_start":1,"column_end":92}},{"value":"/ instruction (see [1](#references)). On the Cortex-M, STREX will always fail if the processor","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":181167,"byte_end":181263,"line_start":146,"line_end":146,"column_start":1,"column_end":97}},{"value":"/ takes an exception between it and its corresponding LDREX operation (see [2](#references)). If","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":181264,"byte_end":181362,"line_start":147,"line_end":147,"column_start":1,"column_end":99}},{"value":"/ STREX fails then the CAS loop is retried (see instruction @ `0x8000146`). On single core","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":181363,"byte_end":181455,"line_start":148,"line_end":148,"column_start":1,"column_end":93}},{"value":"/ systems, preemption is required to run into the ABA problem and on Cortex-M devices preemption","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":181456,"byte_end":181554,"line_start":149,"line_end":149,"column_start":1,"column_end":99}},{"value":"/ always involves taking an exception. Thus the underlying LL/SC operations prevent the ABA","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":181555,"byte_end":181648,"line_start":150,"line_end":150,"column_start":1,"column_end":94}},{"value":"/ problem on Cortex-M.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":181649,"byte_end":181673,"line_start":151,"line_end":151,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":181674,"byte_end":181677,"line_start":152,"line_end":152,"column_start":1,"column_end":4}},{"value":"/ In the case of multi-core systems if any other core successfully does a STREX op on the head","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":181678,"byte_end":181774,"line_start":153,"line_end":153,"column_start":1,"column_end":97}},{"value":"/ while the current core is somewhere between LDREX and STREX then the current core will fail its","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":181775,"byte_end":181874,"line_start":154,"line_end":154,"column_start":1,"column_end":100}},{"value":"/ STREX operation.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":181875,"byte_end":181895,"line_start":155,"line_end":155,"column_start":1,"column_end":21}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":181896,"byte_end":181899,"line_start":156,"line_end":156,"column_start":1,"column_end":4}},{"value":"/ # x86_64 support / limitations","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":181900,"byte_end":181934,"line_start":157,"line_end":157,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":181935,"byte_end":181938,"line_start":158,"line_end":158,"column_start":1,"column_end":4}},{"value":"/ *NOTE* `Pool` is only `Sync` on `x86_64` and `x86` (`i686`) if the Cargo feature \"x86-sync-pool\"","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":181939,"byte_end":182039,"line_start":159,"line_end":159,"column_start":1,"column_end":101}},{"value":"/ is enabled","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":182040,"byte_end":182054,"line_start":160,"line_end":160,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":182055,"byte_end":182058,"line_start":161,"line_end":161,"column_start":1,"column_end":4}},{"value":"/ x86_64 support is a gamble. Yes, a gamble. Do you feel lucky enough to use `Pool` on x86_64?","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":182059,"byte_end":182155,"line_start":162,"line_end":162,"column_start":1,"column_end":97}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":182156,"byte_end":182159,"line_start":163,"line_end":163,"column_start":1,"column_end":4}},{"value":"/ As it's not possible to implement *ideal* LL/SC semantics (\\*) on x86_64 the architecture is","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":182160,"byte_end":182256,"line_start":164,"line_end":164,"column_start":1,"column_end":97}},{"value":"/ susceptible to the ABA problem described above. To *reduce the chances* of ABA occurring in","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":182257,"byte_end":182352,"line_start":165,"line_end":165,"column_start":1,"column_end":96}},{"value":"/ practice we use version tags (keyword: IBM ABA-prevention tags). Again, this approach does","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":182353,"byte_end":182447,"line_start":166,"line_end":166,"column_start":1,"column_end":95}},{"value":"/ *not* fix / prevent / avoid the ABA problem; it only reduces the chance of it occurring in","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":182448,"byte_end":182542,"line_start":167,"line_end":167,"column_start":1,"column_end":95}},{"value":"/ practice but the chances of it occurring are not reduced to zero.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":182543,"byte_end":182612,"line_start":168,"line_end":168,"column_start":1,"column_end":70}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":182613,"byte_end":182616,"line_start":169,"line_end":169,"column_start":1,"column_end":4}},{"value":"/ How we have implemented version tags: instead of using an `AtomicPtr` to link the stack `Node`s","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":182617,"byte_end":182716,"line_start":170,"line_end":170,"column_start":1,"column_end":100}},{"value":"/ we use an `AtomicUsize` where the 64-bit `usize` is always comprised of a monotonically","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":182717,"byte_end":182808,"line_start":171,"line_end":171,"column_start":1,"column_end":92}},{"value":"/ increasing 32-bit tag (higher bits) and a 32-bit signed address offset. The address of a node is","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":182809,"byte_end":182909,"line_start":172,"line_end":172,"column_start":1,"column_end":101}},{"value":"/ computed by adding the 32-bit offset to an \"anchor\" address (the address of a static variable","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":182910,"byte_end":183007,"line_start":173,"line_end":173,"column_start":1,"column_end":98}},{"value":"/ that lives somewhere in the `.bss` linker section). The tag is increased every time a node is","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":183008,"byte_end":183105,"line_start":174,"line_end":174,"column_start":1,"column_end":98}},{"value":"/ popped (removed) from the stack.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":183106,"byte_end":183142,"line_start":175,"line_end":175,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":183143,"byte_end":183146,"line_start":176,"line_end":176,"column_start":1,"column_end":4}},{"value":"/ To see how version tags can prevent ABA consider the example from the previous section. Let's","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":183147,"byte_end":183244,"line_start":177,"line_end":177,"column_start":1,"column_end":98}},{"value":"/ start with a stack in this state: `(~A, 0) -> (~B, 1) -> (~C, 2)`, where `~A` represents the","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":183245,"byte_end":183341,"line_start":178,"line_end":178,"column_start":1,"column_end":97}},{"value":"/ address of node A as a 32-bit offset from the \"anchor\" and the second tuple element (e.g. `0`)","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":183342,"byte_end":183440,"line_start":179,"line_end":179,"column_start":1,"column_end":99}},{"value":"/ indicates the version of the node. For simplicity, assume a single core system: thread T1 is","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":183441,"byte_end":183537,"line_start":180,"line_end":180,"column_start":1,"column_end":97}},{"value":"/ performing `pop` and before `CAS(&self.head, (~A, 0), (~B, 1))` is executed a context switch","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":183538,"byte_end":183634,"line_start":181,"line_end":181,"column_start":1,"column_end":97}},{"value":"/ occurs and the core resumes T2. T2 pops the stack twice and pushes A back into the stack;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":183635,"byte_end":183728,"line_start":182,"line_end":182,"column_start":1,"column_end":94}},{"value":"/ because the `pop` operation increases the version the stack ends in the following state: `(~A,","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":183729,"byte_end":183827,"line_start":183,"line_end":183,"column_start":1,"column_end":99}},{"value":"/ 1) -> (~C, 2)`. Now if T1 is resumed the CAS operation will fail because `self.head` is `(~A,","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":183828,"byte_end":183925,"line_start":184,"line_end":184,"column_start":1,"column_end":98}},{"value":"/ 1)` and not `(~A, 0)`.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":183926,"byte_end":183952,"line_start":185,"line_end":185,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":183953,"byte_end":183956,"line_start":186,"line_end":186,"column_start":1,"column_end":4}},{"value":"/ When can version tags fail to prevent ABA? Using the previous example: if T2 performs a `push`","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":183957,"byte_end":184055,"line_start":187,"line_end":187,"column_start":1,"column_end":99}},{"value":"/ followed by a `pop` `(1 << 32) - 1` times before doing its original `pop` - `pop` - `push`","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":184056,"byte_end":184150,"line_start":188,"line_end":188,"column_start":1,"column_end":95}},{"value":"/ operation then ABA will occur because the version tag of node `A` will wraparound to its","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":184151,"byte_end":184243,"line_start":189,"line_end":189,"column_start":1,"column_end":93}},{"value":"/ original value of `0` and the CAS operation in T1 will succeed and corrupt the stack.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":184244,"byte_end":184333,"line_start":190,"line_end":190,"column_start":1,"column_end":90}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":184334,"byte_end":184337,"line_start":191,"line_end":191,"column_start":1,"column_end":4}},{"value":"/ It does seem unlikely that (1) a thread will perform the above operation and (2) that the above","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":184338,"byte_end":184437,"line_start":192,"line_end":192,"column_start":1,"column_end":100}},{"value":"/ operation will complete within one time slice, assuming time sliced threads. If you have thread","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":184438,"byte_end":184537,"line_start":193,"line_end":193,"column_start":1,"column_end":100}},{"value":"/ priorities then the above operation could occur during the lifetime of many high priorities","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":184538,"byte_end":184633,"line_start":194,"line_end":194,"column_start":1,"column_end":96}},{"value":"/ threads if T1 is running at low priority.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":184634,"byte_end":184679,"line_start":195,"line_end":195,"column_start":1,"column_end":46}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":184680,"byte_end":184683,"line_start":196,"line_end":196,"column_start":1,"column_end":4}},{"value":"/ Other implementations of version tags use more than 32 bits in their tags (e.g. \"Scalable","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":184684,"byte_end":184777,"line_start":197,"line_end":197,"column_start":1,"column_end":94}},{"value":"/ Lock-Free Dynamic Memory Allocation\" uses 42-bit tags in its super blocks). In theory, one could","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":184778,"byte_end":184878,"line_start":198,"line_end":198,"column_start":1,"column_end":101}},{"value":"/ use double-word CAS on x86_64 to pack a 64-bit tag and a 64-bit pointer in a double-word but","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":184879,"byte_end":184975,"line_start":199,"line_end":199,"column_start":1,"column_end":97}},{"value":"/ this CAS operation is not exposed in the standard library (and I think it's not available on","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":184976,"byte_end":185072,"line_start":200,"line_end":200,"column_start":1,"column_end":97}},{"value":"/ older x86_64 processors?)","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":185073,"byte_end":185102,"line_start":201,"line_end":201,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":185103,"byte_end":185106,"line_start":202,"line_end":202,"column_start":1,"column_end":4}},{"value":"/ (\\*) Apparently one can emulate proper LL/SC semantics on x86_64 using hazard pointers (?) --","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":185107,"byte_end":185204,"line_start":203,"line_end":203,"column_start":1,"column_end":98}},{"value":"/ the technique appears to be documented in \"ABA Prevention Using Single-Word Instructions\", which","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":185205,"byte_end":185305,"line_start":204,"line_end":204,"column_start":1,"column_end":101}},{"value":"/ is not public AFAICT -- but hazard pointers require Thread Local Storage (TLS), which is a","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":185306,"byte_end":185400,"line_start":205,"line_end":205,"column_start":1,"column_end":95}},{"value":"/ non-starter for a `no_std` library like `heapless`.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":185401,"byte_end":185456,"line_start":206,"line_end":206,"column_start":1,"column_end":56}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":185457,"byte_end":185460,"line_start":207,"line_end":207,"column_start":1,"column_end":4}},{"value":"/ ## x86_64 Limitations","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":185461,"byte_end":185486,"line_start":208,"line_end":208,"column_start":1,"column_end":26}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":185487,"byte_end":185490,"line_start":209,"line_end":209,"column_start":1,"column_end":4}},{"value":"/ *NOTE* this limitation does not apply to `x86` (32-bit address space). If you run into this","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":185491,"byte_end":185586,"line_start":210,"line_end":210,"column_start":1,"column_end":96}},{"value":"/ issue, on an x86_64 processor try running your code compiled for `x86`, e.g. `cargo run --target","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":185587,"byte_end":185687,"line_start":211,"line_end":211,"column_start":1,"column_end":101}},{"value":"/ i686-unknown-linux-musl`","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":185688,"byte_end":185716,"line_start":212,"line_end":212,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":185717,"byte_end":185720,"line_start":213,"line_end":213,"column_start":1,"column_end":4}},{"value":"/ Because stack nodes must be located within +- 2 GB of the hidden `ANCHOR` variable, which","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":185721,"byte_end":185814,"line_start":214,"line_end":214,"column_start":1,"column_end":94}},{"value":"/ lives in the `.bss` section, `Pool` may not be able to manage static references created using","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":185815,"byte_end":185912,"line_start":215,"line_end":215,"column_start":1,"column_end":98}},{"value":"/ `Box::leak` -- these heap allocated chunks of memory may live in a very different address space.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":185913,"byte_end":186013,"line_start":216,"line_end":216,"column_start":1,"column_end":101}},{"value":"/ When the `Pool` is unable to manage a node because of its address it will simply discard it:","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":186014,"byte_end":186110,"line_start":217,"line_end":217,"column_start":1,"column_end":97}},{"value":"/ `Pool::grow*` methods return the number of new memory blocks added to the pool; if these methods","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":186111,"byte_end":186211,"line_start":218,"line_end":218,"column_start":1,"column_end":101}},{"value":"/ return `0` it means the `Pool` is unable to manage the memory given to them.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":186212,"byte_end":186292,"line_start":219,"line_end":219,"column_start":1,"column_end":81}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":186293,"byte_end":186296,"line_start":220,"line_end":220,"column_start":1,"column_end":4}},{"value":"/ # References","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":186297,"byte_end":186313,"line_start":221,"line_end":221,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":186314,"byte_end":186317,"line_start":222,"line_end":222,"column_start":1,"column_end":4}},{"value":"/ 1. [Cortex-M3 Devices Generic User Guide (DUI 0552A)][0], Section 2.2.7 \"Synchronization","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":186318,"byte_end":186410,"line_start":223,"line_end":223,"column_start":1,"column_end":93}},{"value":"/ primitives\"","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":186411,"byte_end":186426,"line_start":224,"line_end":224,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":186427,"byte_end":186430,"line_start":225,"line_end":225,"column_start":1,"column_end":4}},{"value":"/ [0]: http://infocenter.arm.com/help/topic/com.arm.doc.dui0552a/DUI0552A_cortex_m3_dgug.pdf","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":186431,"byte_end":186525,"line_start":226,"line_end":226,"column_start":1,"column_end":95}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":186526,"byte_end":186529,"line_start":227,"line_end":227,"column_start":1,"column_end":4}},{"value":"/ 2. [ARMv7-M Architecture Reference Manual (DDI 0403E.b)][1], Section A3.4 \"Synchronization and","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":186530,"byte_end":186628,"line_start":228,"line_end":228,"column_start":1,"column_end":99}},{"value":"/ semaphores\"","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":186629,"byte_end":186644,"line_start":229,"line_end":229,"column_start":1,"column_end":16}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":186645,"byte_end":186648,"line_start":230,"line_end":230,"column_start":1,"column_end":4}},{"value":"/ [1]: https://static.docs.arm.com/ddi0403/eb/DDI0403E_B_armv7m_arm.pdf","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":186649,"byte_end":186722,"line_start":231,"line_end":231,"column_start":1,"column_end":74}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":186723,"byte_end":186726,"line_start":232,"line_end":232,"column_start":1,"column_end":4}},{"value":"/ 3. \"Scalable Lock-Free Dynamic Memory Allocation\" Michael, Maged M.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":186727,"byte_end":186798,"line_start":233,"line_end":233,"column_start":1,"column_end":72}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":186799,"byte_end":186802,"line_start":234,"line_end":234,"column_start":1,"column_end":4}},{"value":"/ 4. \"Hazard pointers: Safe memory reclamation for lock-free objects.\" Michael, Maged M.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":186803,"byte_end":186893,"line_start":235,"line_end":235,"column_start":1,"column_end":91}}]},{"kind":"Mod","id":{"krate":0,"index":1523},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"singleton","qualname":"::pool::singleton","value":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","parent":null,"children":[{"krate":0,"index":1524},{"krate":0,"index":1525},{"krate":0,"index":1528},{"krate":0,"index":1531},{"krate":0,"index":1534},{"krate":0,"index":1535},{"krate":0,"index":1536},{"krate":0,"index":1538},{"krate":0,"index":1541},{"krate":0,"index":1542},{"krate":0,"index":1544},{"krate":0,"index":1545},{"krate":0,"index":1548},{"krate":0,"index":1551},{"krate":0,"index":1552},{"krate":0,"index":1555},{"krate":0,"index":1558},{"krate":0,"index":1559},{"krate":0,"index":1562},{"krate":0,"index":1565},{"krate":0,"index":1566},{"krate":0,"index":1569},{"krate":0,"index":1572},{"krate":0,"index":1575},{"krate":0,"index":1680},{"krate":0,"index":1681},{"krate":0,"index":1689},{"krate":0,"index":1694},{"krate":0,"index":1697},{"krate":0,"index":1700},{"krate":0,"index":1703},{"krate":0,"index":1707},{"krate":0,"index":1710},{"krate":0,"index":1712},{"krate":0,"index":1715},{"krate":0,"index":1718},{"krate":0,"index":1722},{"krate":0,"index":1725},{"krate":0,"index":1728},{"krate":0,"index":1732},{"krate":0,"index":1736},{"krate":0,"index":1739},{"krate":0,"index":1741},{"krate":0,"index":1744},{"krate":0,"index":1747}],"decl_id":null,"docs":" `Pool` as a global singleton\n","sig":null,"attributes":[{"value":"/ `Pool` as a global singleton","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":197808,"byte_end":197840,"line_start":1,"line_end":1,"column_start":1,"column_end":33}}]},{"kind":"Mod","id":{"krate":0,"index":1575},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"arc","qualname":"::pool::singleton::arc","value":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","parent":null,"children":[{"krate":0,"index":1576},{"krate":0,"index":1577},{"krate":0,"index":1580},{"krate":0,"index":1583},{"krate":0,"index":1584},{"krate":0,"index":1585},{"krate":0,"index":1587},{"krate":0,"index":1590},{"krate":0,"index":1591},{"krate":0,"index":1593},{"krate":0,"index":1596},{"krate":0,"index":1599},{"krate":0,"index":1602},{"krate":0,"index":1603},{"krate":0,"index":1606},{"krate":0,"index":1609},{"krate":0,"index":1610},{"krate":0,"index":1613},{"krate":0,"index":1616},{"krate":0,"index":1619},{"krate":0,"index":1620},{"krate":0,"index":1623},{"krate":0,"index":1628},{"krate":0,"index":1635},{"krate":0,"index":1636},{"krate":0,"index":1639},{"krate":0,"index":1642},{"krate":0,"index":1645},{"krate":0,"index":1649},{"krate":0,"index":1652},{"krate":0,"index":1655},{"krate":0,"index":1657},{"krate":0,"index":1661},{"krate":0,"index":1664},{"krate":0,"index":1667},{"krate":0,"index":1670},{"krate":0,"index":1672},{"krate":0,"index":1674},{"krate":0,"index":1676}],"decl_id":null,"docs":" Like [`std::sync::Arc`](https://doc.rust-lang.org/std/sync/struct.Arc.html) but backed by a\n memory [`Pool`](trait.Pool.html) rather than `#[global_allocator]`","sig":null,"attributes":[{"value":"/ Like [`std::sync::Arc`](https://doc.rust-lang.org/std/sync/struct.Arc.html) but backed by a","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":207505,"byte_end":207600,"line_start":1,"line_end":1,"column_start":1,"column_end":96}},{"value":"/ memory [`Pool`](trait.Pool.html) rather than `#[global_allocator]`","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":207601,"byte_end":207671,"line_start":2,"line_end":2,"column_start":1,"column_end":71}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":207672,"byte_end":207675,"line_start":3,"line_end":3,"column_start":1,"column_end":4}},{"value":"/ Note that the same limitations that apply to [\"Box\" pool] also apply to the \"Arc\" pool.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":207676,"byte_end":207767,"line_start":4,"line_end":4,"column_start":1,"column_end":92}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":207768,"byte_end":207771,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ [\"Box\" pool]: ../../index.html","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":207772,"byte_end":207806,"line_start":6,"line_end":6,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":207807,"byte_end":207810,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":207811,"byte_end":207825,"line_start":8,"line_end":8,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":207826,"byte_end":207829,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ ``` ignore","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":207830,"byte_end":207844,"line_start":10,"line_end":10,"column_start":1,"column_end":15}},{"value":"/ use heapless::{arc_pool, Arc};","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":207845,"byte_end":207879,"line_start":11,"line_end":11,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":207880,"byte_end":207883,"line_start":12,"line_end":12,"column_start":1,"column_end":4}},{"value":"/ pub struct BigStruct { // <- does NOT implement Clone","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":207884,"byte_end":207941,"line_start":13,"line_end":13,"column_start":1,"column_end":58}},{"value":"/     data: [u8; 128],","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":207942,"byte_end":207966,"line_start":14,"line_end":14,"column_start":1,"column_end":25}},{"value":"/     // ..","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":207967,"byte_end":207980,"line_start":15,"line_end":15,"column_start":1,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":207981,"byte_end":207986,"line_start":16,"line_end":16,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":207987,"byte_end":207990,"line_start":17,"line_end":17,"column_start":1,"column_end":4}},{"value":"/ // declare a memory pool","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":207991,"byte_end":208019,"line_start":18,"line_end":18,"column_start":1,"column_end":29}},{"value":"/ arc_pool!(P: BigStruct);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":208020,"byte_end":208048,"line_start":19,"line_end":19,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":208049,"byte_end":208052,"line_start":20,"line_end":20,"column_start":1,"column_end":4}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":208053,"byte_end":208056,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ #[cortex_m_rt::entry]","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":208057,"byte_end":208082,"line_start":22,"line_end":22,"column_start":1,"column_end":26}},{"value":"/ fn main() -> ! {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":208083,"byte_end":208103,"line_start":23,"line_end":23,"column_start":1,"column_end":21}},{"value":"/     static mut MEMORY: [u8; 1024] = [0; 1024];","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":208104,"byte_end":208154,"line_start":24,"line_end":24,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":208155,"byte_end":208158,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/     // give some static memory to the pool","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":208159,"byte_end":208205,"line_start":26,"line_end":26,"column_start":1,"column_end":47}},{"value":"/     P::grow(MEMORY);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":208206,"byte_end":208230,"line_start":27,"line_end":27,"column_start":1,"column_end":25}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":208231,"byte_end":208234,"line_start":28,"line_end":28,"column_start":1,"column_end":4}},{"value":"/     let x: Arc<P> = P::alloc(BigStruct::new()).ok().expect(\"OOM\");","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":208235,"byte_end":208305,"line_start":29,"line_end":29,"column_start":1,"column_end":71}},{"value":"/     //         ^ NOTE: this is the Pool type, not the data type","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":208306,"byte_end":208373,"line_start":30,"line_end":30,"column_start":1,"column_end":68}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":208374,"byte_end":208377,"line_start":31,"line_end":31,"column_start":1,"column_end":4}},{"value":"/     // cloning is cheap; it increases the refcount","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":208378,"byte_end":208432,"line_start":32,"line_end":32,"column_start":1,"column_end":55}},{"value":"/     let y = x.clone();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":208433,"byte_end":208459,"line_start":33,"line_end":33,"column_start":1,"column_end":27}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":208460,"byte_end":208463,"line_start":34,"line_end":34,"column_start":1,"column_end":4}},{"value":"/     // same data address","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":208464,"byte_end":208492,"line_start":35,"line_end":35,"column_start":1,"column_end":29}},{"value":"/     assert_eq!(&*x as *const _, &*y as *const _);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":208493,"byte_end":208546,"line_start":36,"line_end":36,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":208547,"byte_end":208550,"line_start":37,"line_end":37,"column_start":1,"column_end":4}},{"value":"/     // auto-deref","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":208551,"byte_end":208572,"line_start":38,"line_end":38,"column_start":1,"column_end":22}},{"value":"/     let data: &[u8] = &x.data;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":208573,"byte_end":208607,"line_start":39,"line_end":39,"column_start":1,"column_end":35}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":208608,"byte_end":208611,"line_start":40,"line_end":40,"column_start":1,"column_end":4}},{"value":"/     // decrease refcount","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":208612,"byte_end":208640,"line_start":41,"line_end":41,"column_start":1,"column_end":29}},{"value":"/     drop(x);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":208641,"byte_end":208657,"line_start":42,"line_end":42,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":208658,"byte_end":208661,"line_start":43,"line_end":43,"column_start":1,"column_end":4}},{"value":"/     // refcount decreased to 0; memory is returned to the pool","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":208662,"byte_end":208728,"line_start":44,"line_end":44,"column_start":1,"column_end":67}},{"value":"/     drop(y);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":208729,"byte_end":208745,"line_start":45,"line_end":45,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":208746,"byte_end":208749,"line_start":46,"line_end":46,"column_start":1,"column_end":4}},{"value":"/     // ..","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":208750,"byte_end":208763,"line_start":47,"line_end":47,"column_start":1,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":208764,"byte_end":208769,"line_start":48,"line_end":48,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":208770,"byte_end":208777,"line_start":49,"line_end":49,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":208778,"byte_end":208781,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ The `grow_exact` API is also available on the \"Arc pool\". It requires using","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":208782,"byte_end":208861,"line_start":51,"line_end":51,"column_start":1,"column_end":80}},{"value":"/ `Node<ArcInner<Type>>` as the array element type. Example below:","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":208862,"byte_end":208930,"line_start":52,"line_end":52,"column_start":1,"column_end":69}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":208931,"byte_end":208934,"line_start":53,"line_end":53,"column_start":1,"column_end":4}},{"value":"/ ``` ignore","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":208935,"byte_end":208949,"line_start":54,"line_end":54,"column_start":1,"column_end":15}},{"value":"/ use heapless::pool::{singleton::arc::ArcInner, Node};","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":208950,"byte_end":209007,"line_start":55,"line_end":55,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":209008,"byte_end":209011,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/ pub struct BigStruct { /* .. */ }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":209012,"byte_end":209049,"line_start":57,"line_end":57,"column_start":1,"column_end":38}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":209050,"byte_end":209053,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/ arc_pool!(P: BigStruct);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":209054,"byte_end":209082,"line_start":59,"line_end":59,"column_start":1,"column_end":29}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":209083,"byte_end":209086,"line_start":60,"line_end":60,"column_start":1,"column_end":4}},{"value":"/ #[cortex_m_rt::entry]","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":209087,"byte_end":209112,"line_start":61,"line_end":61,"column_start":1,"column_end":26}},{"value":"/ fn main() -> ! {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":209113,"byte_end":209133,"line_start":62,"line_end":62,"column_start":1,"column_end":21}},{"value":"/     static mut MEMORY: MaybeUninit<[Node<ArcInner<BigStruct>>; 2]> = MaybeUninit::uninit();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":209134,"byte_end":209229,"line_start":63,"line_end":63,"column_start":1,"column_end":96}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":209230,"byte_end":209233,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/     P::grow_exact(MEMORY);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":209234,"byte_end":209264,"line_start":65,"line_end":65,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":209265,"byte_end":209268,"line_start":66,"line_end":66,"column_start":1,"column_end":4}},{"value":"/     // 2 allocations are guaranteed to work","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":209269,"byte_end":209316,"line_start":67,"line_end":67,"column_start":1,"column_end":48}},{"value":"/     let x = P::alloc(BigStruct::new()).ok().expect(\"OOM\");","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":209317,"byte_end":209379,"line_start":68,"line_end":68,"column_start":1,"column_end":63}},{"value":"/     let y = P::alloc(BigStruct::new()).ok().expect(\"OOM\");","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":209380,"byte_end":209442,"line_start":69,"line_end":69,"column_start":1,"column_end":63}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":209443,"byte_end":209446,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/     // ..","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":209447,"byte_end":209460,"line_start":71,"line_end":71,"column_start":1,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":209461,"byte_end":209466,"line_start":72,"line_end":72,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":209467,"byte_end":209474,"line_start":73,"line_end":73,"column_start":1,"column_end":8}}]},{"kind":"Trait","id":{"krate":0,"index":1620},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":211979,"byte_end":211983,"line_start":157,"line_end":157,"column_start":11,"column_end":15},"name":"Pool","qualname":"::pool::singleton::arc::Pool","value":"Pool","parent":null,"children":[{"krate":0,"index":1621},{"krate":0,"index":1622}],"decl_id":null,"docs":" Pool of Arc pointers\n","sig":null,"attributes":[{"value":"/ Pool of Arc pointers","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":211944,"byte_end":211968,"line_start":156,"line_end":156,"column_start":1,"column_end":25}}]},{"kind":"Type","id":{"krate":0,"index":1621},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":212035,"byte_end":212039,"line_start":159,"line_end":159,"column_start":10,"column_end":14},"name":"Data","qualname":"::pool::singleton::arc::Pool::Data","value":"type Data: 'static;","parent":{"krate":0,"index":1620},"children":[],"decl_id":null,"docs":" The data behind the Arc pointer\n","sig":null,"attributes":[{"value":"/ The data behind the Arc pointer","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":211990,"byte_end":212025,"line_start":158,"line_end":158,"column_start":5,"column_end":40}}]},{"kind":"Method","id":{"krate":0,"index":1622},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":212077,"byte_end":212080,"line_start":162,"line_end":162,"column_start":8,"column_end":11},"name":"ptr","qualname":"::pool::singleton::arc::Pool::ptr","value":"pub fn ptr() -> &'static pool::Pool<ArcInner<Self::Data>>","parent":{"krate":0,"index":1620},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1623},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":212593,"byte_end":212596,"line_start":174,"line_end":174,"column_start":12,"column_end":15},"name":"Arc","qualname":"::pool::singleton::arc::Arc","value":"Arc {  }","parent":null,"children":[{"krate":0,"index":1625},{"krate":0,"index":1626},{"krate":0,"index":1627}],"decl_id":null,"docs":" `std::sync::Arc` but backed by a memory [`Pool`] rather than `#[global_allocator]`","sig":null,"attributes":[{"value":"/ `std::sync::Arc` but backed by a memory [`Pool`] rather than `#[global_allocator]`","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":212273,"byte_end":212359,"line_start":168,"line_end":168,"column_start":1,"column_end":87}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":212360,"byte_end":212363,"line_start":169,"line_end":169,"column_start":1,"column_end":4}},{"value":"/ [`Pool`]: trait.Pool.html","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":212364,"byte_end":212393,"line_start":170,"line_end":170,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":212394,"byte_end":212397,"line_start":171,"line_end":171,"column_start":1,"column_end":4}},{"value":"/ An example and more details can be found in the [module level documentation](index.html).","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":212398,"byte_end":212491,"line_start":172,"line_end":172,"column_start":1,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":1630},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":212923,"byte_end":212926,"line_start":191,"line_end":191,"column_start":12,"column_end":15},"name":"new","qualname":"<Arc<P>>::new","value":"pub fn new(P::Data) -> Result<Self, P::Data>","parent":null,"children":[],"decl_id":null,"docs":" Constructs a new `Arc`","sig":null,"attributes":[{"value":"/ Constructs a new `Arc`","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":212774,"byte_end":212800,"line_start":187,"line_end":187,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":212805,"byte_end":212808,"line_start":188,"line_end":188,"column_start":5,"column_end":8}},{"value":"/ Returns an `Err`or if the backing memory pool is empty","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":212813,"byte_end":212871,"line_start":189,"line_end":189,"column_start":5,"column_end":63}}]},{"kind":"Struct","id":{"krate":0,"index":1676},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":216820,"byte_end":216828,"line_start":387,"line_end":387,"column_start":12,"column_end":20},"name":"ArcInner","qualname":"::pool::singleton::arc::ArcInner","value":"ArcInner {  }","parent":null,"children":[{"krate":0,"index":1678},{"krate":0,"index":1679}],"decl_id":null,"docs":" Unfortunate implementation detail required to use the `grow_exact` API\n","sig":null,"attributes":[{"value":"/ Unfortunate implementation detail required to use the `grow_exact` API","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":216734,"byte_end":216808,"line_start":386,"line_end":386,"column_start":1,"column_end":75}}]},{"kind":"Trait","id":{"krate":0,"index":1681},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":198884,"byte_end":198888,"line_start":50,"line_end":50,"column_start":11,"column_end":15},"name":"Pool","qualname":"::pool::singleton::Pool","value":"Pool","parent":null,"children":[{"krate":0,"index":1682},{"krate":0,"index":1683},{"krate":0,"index":1684},{"krate":0,"index":1686},{"krate":0,"index":1687}],"decl_id":null,"docs":" A global singleton memory pool\n","sig":null,"attributes":[{"value":"/ A global singleton memory pool","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":198839,"byte_end":198873,"line_start":49,"line_end":49,"column_start":1,"column_end":35}}]},{"kind":"Type","id":{"krate":0,"index":1682},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":198960,"byte_end":198964,"line_start":52,"line_end":52,"column_start":10,"column_end":14},"name":"Data","qualname":"::pool::singleton::Pool::Data","value":"type Data: 'static;","parent":{"krate":0,"index":1681},"children":[],"decl_id":null,"docs":" The type of data that can be allocated on this pool\n","sig":null,"attributes":[{"value":"/ The type of data that can be allocated on this pool","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":198895,"byte_end":198950,"line_start":51,"line_end":51,"column_start":5,"column_end":60}}]},{"kind":"Method","id":{"krate":0,"index":1683},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":199002,"byte_end":199005,"line_start":55,"line_end":55,"column_start":8,"column_end":11},"name":"ptr","qualname":"::pool::singleton::Pool::ptr","value":"pub fn ptr() -> &'static super::Pool<Self::Data>","parent":{"krate":0,"index":1681},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1684},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":199271,"byte_end":199276,"line_start":62,"line_end":62,"column_start":8,"column_end":13},"name":"alloc","qualname":"::pool::singleton::Pool::alloc","value":"pub fn alloc() -> Option<Box<Self, Uninit>> where Self: Sized","parent":{"krate":0,"index":1681},"children":[],"decl_id":null,"docs":" Claims a memory block from the pool","sig":null,"attributes":[{"value":"/ Claims a memory block from the pool","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":199050,"byte_end":199089,"line_start":57,"line_end":57,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":199094,"byte_end":199097,"line_start":58,"line_end":58,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the pool is observed as exhausted","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":199102,"byte_end":199159,"line_start":59,"line_end":59,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":199164,"byte_end":199167,"line_start":60,"line_end":60,"column_start":5,"column_end":8}},{"value":"/ *NOTE:* This method does *not* have bounded execution time; i.e. it contains a CAS loop","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":199172,"byte_end":199263,"line_start":61,"line_end":61,"column_start":5,"column_end":96}}]},{"kind":"Method","id":{"krate":0,"index":1686},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":199703,"byte_end":199707,"line_start":77,"line_end":77,"column_start":8,"column_end":12},"name":"grow","qualname":"::pool::singleton::Pool::grow","value":"pub fn grow(&'static mut [u8]) -> usize","parent":{"krate":0,"index":1681},"children":[],"decl_id":null,"docs":" Increases the capacity of the pool","sig":null,"attributes":[{"value":"/ Increases the capacity of the pool","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":199464,"byte_end":199502,"line_start":72,"line_end":72,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":199507,"byte_end":199510,"line_start":73,"line_end":73,"column_start":5,"column_end":8}},{"value":"/ This method might *not* fully utilize the given memory block due to alignment requirements","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":199515,"byte_end":199609,"line_start":74,"line_end":74,"column_start":5,"column_end":99}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":199614,"byte_end":199617,"line_start":75,"line_end":75,"column_start":5,"column_end":8}},{"value":"/ This method returns the number of *new* blocks that can be allocated.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":199622,"byte_end":199695,"line_start":76,"line_end":76,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":1687},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":199966,"byte_end":199976,"line_start":85,"line_end":85,"column_start":8,"column_end":18},"name":"grow_exact","qualname":"::pool::singleton::Pool::grow_exact","value":"pub fn grow_exact<A>(&'static mut MaybeUninit<A>) -> usize where\nA: AsMut<[Node<Self::Data>]>","parent":{"krate":0,"index":1681},"children":[],"decl_id":null,"docs":" Increases the capacity of the pool","sig":null,"attributes":[{"value":"/ Increases the capacity of the pool","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":199790,"byte_end":199828,"line_start":81,"line_end":81,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":199833,"byte_end":199836,"line_start":82,"line_end":82,"column_start":5,"column_end":8}},{"value":"/ Unlike [`Pool.grow`](trait.Pool.html#method.grow_exact) this method fully utilizes the given","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":199841,"byte_end":199937,"line_start":83,"line_end":83,"column_start":5,"column_end":101}},{"value":"/ memory block","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":199942,"byte_end":199958,"line_start":84,"line_end":84,"column_start":5,"column_end":21}}]},{"kind":"Struct","id":{"krate":0,"index":1689},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":200205,"byte_end":200208,"line_start":94,"line_end":94,"column_start":12,"column_end":15},"name":"Box","qualname":"::pool::singleton::Box","value":"Box {  }","parent":null,"children":[{"krate":0,"index":1692},{"krate":0,"index":1693}],"decl_id":null,"docs":" A memory block that belongs to the global memory pool, `POOL`\n","sig":null,"attributes":[{"value":"/ A memory block that belongs to the global memory pool, `POOL`","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":200128,"byte_end":200193,"line_start":93,"line_end":93,"column_start":1,"column_end":66}}]},{"kind":"Method","id":{"krate":0,"index":1696},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":200441,"byte_end":200445,"line_start":108,"line_end":108,"column_start":12,"column_end":16},"name":"init","qualname":"<Box<P, Uninit>>::init","value":"pub fn init(Self, P::Data) -> Box<P, Init>","parent":null,"children":[],"decl_id":null,"docs":" Initializes this memory block\n","sig":null,"attributes":[{"value":"/ Initializes this memory block","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":200396,"byte_end":200429,"line_start":107,"line_end":107,"column_start":5,"column_end":38}}]},{"kind":"Method","id":{"krate":0,"index":1699},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":201467,"byte_end":201473,"line_start":145,"line_end":145,"column_start":12,"column_end":18},"name":"freeze","qualname":"<Box<P, Uninit>>::freeze","value":"pub fn freeze(Self) -> Box<P, Init>","parent":null,"children":[],"decl_id":null,"docs":" (DO NOT USE, SEE DEPRECATION) Freezes the contents of this memory block","sig":null,"attributes":[{"value":"deprecated(since = \"0.7.3\", note =\n             \"This can access uninitialized memory, use `init(..)` instead (https://github.com/japaric/heapless/issues/212)\")","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":201101,"byte_end":201273,"line_start":138,"line_end":141,"column_start":5,"column_end":7}},{"value":"/ (DO NOT USE, SEE DEPRECATION) Freezes the contents of this memory block","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":201278,"byte_end":201353,"line_start":142,"line_end":142,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":201358,"byte_end":201361,"line_start":143,"line_end":143,"column_start":5,"column_end":8}},{"value":"/ See [rust-lang/rust#58363](https://github.com/rust-lang/rust/pull/58363) for details.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":201366,"byte_end":201455,"line_start":144,"line_end":144,"column_start":5,"column_end":94}}]},{"kind":"Method","id":{"krate":0,"index":1702},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":202304,"byte_end":202310,"line_start":173,"line_end":173,"column_start":12,"column_end":18},"name":"forget","qualname":"<Box<P, Init>>::forget","value":"pub fn forget(Self) -> Box<P, Uninit>","parent":null,"children":[],"decl_id":null,"docs":" Forgets the contents of this memory block without running its destructor.","sig":null,"attributes":[{"value":"/ Forgets the contents of this memory block without running its destructor.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":202060,"byte_end":202137,"line_start":169,"line_end":169,"column_start":5,"column_end":82}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":202142,"byte_end":202145,"line_start":170,"line_end":170,"column_start":5,"column_end":8}},{"value":"/ Note that this this does not return the memory block to the pool. The","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":202150,"byte_end":202223,"line_start":171,"line_end":171,"column_start":5,"column_end":78}},{"value":"/ block can be reused, or returned to the pool by dropping it.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":202228,"byte_end":202292,"line_start":172,"line_end":172,"column_start":5,"column_end":69}}]},{"kind":"Struct","id":{"krate":0,"index":1769},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/llsc.rs","byte_start":217334,"byte_end":217338,"line_start":14,"line_end":14,"column_start":12,"column_end":16},"name":"Node","qualname":"::pool::stack::Node","value":"Node {  }","parent":null,"children":[{"krate":0,"index":1771},{"krate":0,"index":1772}],"decl_id":null,"docs":" Unfortunate implementation detail required to use the\n [`Pool.grow_exact`](struct.Pool.html#method.grow_exact) method\n","sig":null,"attributes":[{"value":"/ Unfortunate implementation detail required to use the","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/llsc.rs","byte_start":217198,"byte_end":217255,"line_start":12,"line_end":12,"column_start":1,"column_end":58}},{"value":"/ [`Pool.grow_exact`](struct.Pool.html#method.grow_exact) method","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/llsc.rs","byte_start":217256,"byte_end":217322,"line_start":13,"line_end":13,"column_start":1,"column_end":67}}]},{"kind":"Struct","id":{"krate":0,"index":1784},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":187373,"byte_end":187377,"line_start":259,"line_end":259,"column_start":12,"column_end":16},"name":"Pool","qualname":"::pool::Pool","value":"Pool {  }","parent":null,"children":[{"krate":0,"index":1786},{"krate":0,"index":1787}],"decl_id":null,"docs":" A lock-free memory pool\n","sig":null,"attributes":[{"value":"/ A lock-free memory pool","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":187334,"byte_end":187361,"line_start":258,"line_end":258,"column_start":1,"column_end":28}}]},{"kind":"Method","id":{"krate":0,"index":1794},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":188024,"byte_end":188027,"line_start":286,"line_end":286,"column_start":18,"column_end":21},"name":"new","qualname":"<Pool<T>>::new","value":"pub const fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty pool\n","sig":null,"attributes":[{"value":"/ Creates a new empty pool","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":187978,"byte_end":188006,"line_start":285,"line_end":285,"column_start":5,"column_end":33}}]},{"kind":"Method","id":{"krate":0,"index":1795},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":188381,"byte_end":188386,"line_start":299,"line_end":299,"column_start":12,"column_end":17},"name":"alloc","qualname":"<Pool<T>>::alloc","value":"pub fn alloc(&Self) -> Option<Box<T, Uninit>>","parent":null,"children":[],"decl_id":null,"docs":" Claims a memory block from the pool","sig":null,"attributes":[{"value":"/ Claims a memory block from the pool","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":188154,"byte_end":188193,"line_start":294,"line_end":294,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":188198,"byte_end":188201,"line_start":295,"line_end":295,"column_start":5,"column_end":8}},{"value":"/ Returns `None` when the pool is observed as exhausted","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":188206,"byte_end":188263,"line_start":296,"line_end":296,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":188268,"byte_end":188271,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ *NOTE:* This method does *not* have bounded execution time because it contains a CAS loop","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":188276,"byte_end":188369,"line_start":298,"line_end":298,"column_start":5,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":1796},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":189371,"byte_end":189375,"line_start":327,"line_end":327,"column_start":12,"column_end":16},"name":"free","qualname":"<Pool<T>>::free","value":"pub fn free<S>(&Self, Box<T, S>) where S: 'static","parent":null,"children":[],"decl_id":null,"docs":" Returns a memory block to the pool","sig":null,"attributes":[{"value":"/ Returns a memory block to the pool","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":189130,"byte_end":189168,"line_start":322,"line_end":322,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":189173,"byte_end":189176,"line_start":323,"line_end":323,"column_start":5,"column_end":8}},{"value":"/ *NOTE*: `T`'s destructor (if any) will run on `value` iff `S = Init`","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":189181,"byte_end":189253,"line_start":324,"line_end":324,"column_start":5,"column_end":77}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":189258,"byte_end":189261,"line_start":325,"line_end":325,"column_start":5,"column_end":8}},{"value":"/ *NOTE:* This method does *not* have bounded execution time because it contains a CAS loop","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":189266,"byte_end":189359,"line_start":326,"line_end":326,"column_start":5,"column_end":98}}]},{"kind":"Method","id":{"krate":0,"index":1798},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":190226,"byte_end":190230,"line_start":356,"line_end":356,"column_start":12,"column_end":16},"name":"grow","qualname":"<Pool<T>>::grow","value":"pub fn grow(&Self, &'static mut [u8]) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Increases the capacity of the pool","sig":null,"attributes":[{"value":"/ Increases the capacity of the pool","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":189982,"byte_end":190020,"line_start":351,"line_end":351,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":190025,"byte_end":190028,"line_start":352,"line_end":352,"column_start":5,"column_end":8}},{"value":"/ This method might *not* fully utilize the given memory block due to alignment requirements.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":190033,"byte_end":190128,"line_start":353,"line_end":353,"column_start":5,"column_end":100}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":190133,"byte_end":190136,"line_start":354,"line_end":354,"column_start":5,"column_end":8}},{"value":"/ This method returns the number of *new* blocks that can be allocated.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":190141,"byte_end":190214,"line_start":355,"line_end":355,"column_start":5,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":1799},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":191762,"byte_end":191772,"line_start":409,"line_end":409,"column_start":12,"column_end":22},"name":"grow_exact","qualname":"<Pool<T>>::grow_exact","value":"pub fn grow_exact<A>(&Self, &'static mut MaybeUninit<A>) -> usize where\nA: AsMut<[Node<T>]>","parent":null,"children":[],"decl_id":null,"docs":" Increases the capacity of the pool","sig":null,"attributes":[{"value":"/ Increases the capacity of the pool","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":191587,"byte_end":191625,"line_start":405,"line_end":405,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":191630,"byte_end":191633,"line_start":406,"line_end":406,"column_start":5,"column_end":8}},{"value":"/ Unlike [`Pool.grow`](struct.Pool.html#method.grow) this method fully utilizes the given","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":191638,"byte_end":191729,"line_start":407,"line_end":407,"column_start":5,"column_end":96}},{"value":"/ memory block","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":191734,"byte_end":191750,"line_start":408,"line_end":408,"column_start":5,"column_end":21}}]},{"kind":"Struct","id":{"krate":0,"index":1801},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":192559,"byte_end":192562,"line_start":437,"line_end":437,"column_start":12,"column_end":15},"name":"Box","qualname":"::pool::Box","value":"Box {  }","parent":null,"children":[{"krate":0,"index":1804},{"krate":0,"index":1805}],"decl_id":null,"docs":" A memory block\n","sig":null,"attributes":[{"value":"/ A memory block","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":192529,"byte_end":192547,"line_start":436,"line_end":436,"column_start":1,"column_end":19}}]},{"kind":"Method","id":{"krate":0,"index":1808},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":192715,"byte_end":192719,"line_start":444,"line_end":444,"column_start":12,"column_end":16},"name":"init","qualname":"<Box<T, Uninit>>::init","value":"pub fn init(Self, T) -> Box<T, Init>","parent":null,"children":[],"decl_id":null,"docs":" Initializes this memory block\n","sig":null,"attributes":[{"value":"/ Initializes this memory block","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":192670,"byte_end":192703,"line_start":443,"line_end":443,"column_start":5,"column_end":38}}]},{"kind":"Enum","id":{"krate":0,"index":1809},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":193191,"byte_end":193197,"line_start":463,"line_end":463,"column_start":10,"column_end":16},"name":"Uninit","qualname":"::pool::Uninit","value":"pub enum Uninit { }","parent":null,"children":[],"decl_id":null,"docs":" Uninitialized type state\n","sig":null,"attributes":[{"value":"/ Uninitialized type state","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":193153,"byte_end":193181,"line_start":462,"line_end":462,"column_start":1,"column_end":29}}]},{"kind":"Enum","id":{"krate":0,"index":1810},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":193238,"byte_end":193242,"line_start":466,"line_end":466,"column_start":10,"column_end":14},"name":"Init","qualname":"::pool::Init","value":"pub enum Init { }","parent":null,"children":[],"decl_id":null,"docs":" Initialized type state\n","sig":null,"attributes":[{"value":"/ Initialized type state","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":193202,"byte_end":193228,"line_start":465,"line_end":465,"column_start":1,"column_end":27}}]},{"kind":"Mod","id":{"krate":0,"index":1855},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"sorted_linked_list","qualname":"::sorted_linked_list","value":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","parent":null,"children":[{"krate":0,"index":1856},{"krate":0,"index":1859},{"krate":0,"index":1862},{"krate":0,"index":1863},{"krate":0,"index":1865},{"krate":0,"index":1868},{"krate":0,"index":1869},{"krate":0,"index":1872},{"krate":0,"index":1875},{"krate":0,"index":1878},{"krate":0,"index":1883},{"krate":0,"index":1885},{"krate":0,"index":1887},{"krate":0,"index":1889},{"krate":0,"index":1891},{"krate":0,"index":1893},{"krate":0,"index":1895},{"krate":0,"index":1896},{"krate":0,"index":1897},{"krate":0,"index":1902},{"krate":0,"index":1912},{"krate":0,"index":2331},{"krate":0,"index":2334},{"krate":0,"index":2336},{"krate":0,"index":2338},{"krate":0,"index":2339},{"krate":0,"index":2340},{"krate":0,"index":2343},{"krate":0,"index":2344},{"krate":0,"index":2346},{"krate":0,"index":2348},{"krate":0,"index":2315},{"krate":0,"index":2320},{"krate":0,"index":2323},{"krate":0,"index":2366},{"krate":0,"index":2369},{"krate":0,"index":2371},{"krate":0,"index":2373},{"krate":0,"index":2374},{"krate":0,"index":2375},{"krate":0,"index":2378},{"krate":0,"index":2379},{"krate":0,"index":2381},{"krate":0,"index":2383},{"krate":0,"index":2350},{"krate":0,"index":2355},{"krate":0,"index":2358},{"krate":0,"index":2401},{"krate":0,"index":2404},{"krate":0,"index":2406},{"krate":0,"index":2408},{"krate":0,"index":2409},{"krate":0,"index":2410},{"krate":0,"index":2413},{"krate":0,"index":2414},{"krate":0,"index":2416},{"krate":0,"index":2418},{"krate":0,"index":2385},{"krate":0,"index":2390},{"krate":0,"index":2393},{"krate":0,"index":1913},{"krate":0,"index":1924},{"krate":0,"index":1940},{"krate":0,"index":1948},{"krate":0,"index":1956},{"krate":0,"index":1967},{"krate":0,"index":1976},{"krate":0,"index":1982},{"krate":0,"index":1989},{"krate":0,"index":1995},{"krate":0,"index":2001}],"decl_id":null,"docs":" A fixed sorted priority linked list, similar to [`BinaryHeap`] but with different properties\n on `push`, `pop`, etc.\n For example, the sorting of the list will never `memcpy` the underlying value, so having large\n objects in the list will not cause a performance hit.","sig":null,"attributes":[{"value":"/ A fixed sorted priority linked list, similar to [`BinaryHeap`] but with different properties","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":219275,"byte_end":219371,"line_start":1,"line_end":1,"column_start":1,"column_end":97}},{"value":"/ on `push`, `pop`, etc.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":219372,"byte_end":219398,"line_start":2,"line_end":2,"column_start":1,"column_end":27}},{"value":"/ For example, the sorting of the list will never `memcpy` the underlying value, so having large","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":219399,"byte_end":219497,"line_start":3,"line_end":3,"column_start":1,"column_end":99}},{"value":"/ objects in the list will not cause a performance hit.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":219498,"byte_end":219555,"line_start":4,"line_end":4,"column_start":1,"column_end":58}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":219556,"byte_end":219559,"line_start":5,"line_end":5,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":219560,"byte_end":219574,"line_start":6,"line_end":6,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":219575,"byte_end":219578,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":219579,"byte_end":219586,"line_start":8,"line_end":8,"column_start":1,"column_end":8}},{"value":"/ use heapless::sorted_linked_list::{SortedLinkedList, Max};","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":219587,"byte_end":219649,"line_start":9,"line_end":9,"column_start":1,"column_end":63}},{"value":"/ let mut ll: SortedLinkedList<_, _, Max, 3> = SortedLinkedList::new_usize();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":219650,"byte_end":219729,"line_start":10,"line_end":10,"column_start":1,"column_end":80}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":219730,"byte_end":219733,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ // The largest value will always be first","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":219734,"byte_end":219779,"line_start":12,"line_end":12,"column_start":1,"column_end":46}},{"value":"/ ll.push(1).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":219780,"byte_end":219804,"line_start":13,"line_end":13,"column_start":1,"column_end":25}},{"value":"/ assert_eq!(ll.peek(), Some(&1));","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":219805,"byte_end":219841,"line_start":14,"line_end":14,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":219842,"byte_end":219845,"line_start":15,"line_end":15,"column_start":1,"column_end":4}},{"value":"/ ll.push(2).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":219846,"byte_end":219870,"line_start":16,"line_end":16,"column_start":1,"column_end":25}},{"value":"/ assert_eq!(ll.peek(), Some(&2));","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":219871,"byte_end":219907,"line_start":17,"line_end":17,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":219908,"byte_end":219911,"line_start":18,"line_end":18,"column_start":1,"column_end":4}},{"value":"/ ll.push(3).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":219912,"byte_end":219936,"line_start":19,"line_end":19,"column_start":1,"column_end":25}},{"value":"/ assert_eq!(ll.peek(), Some(&3));","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":219937,"byte_end":219973,"line_start":20,"line_end":20,"column_start":1,"column_end":37}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":219974,"byte_end":219977,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ // This will not fit in the queue.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":219978,"byte_end":220016,"line_start":22,"line_end":22,"column_start":1,"column_end":39}},{"value":"/ assert_eq!(ll.push(4), Err(4));","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":220017,"byte_end":220052,"line_start":23,"line_end":23,"column_start":1,"column_end":36}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":220053,"byte_end":220060,"line_start":24,"line_end":24,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":220061,"byte_end":220064,"line_start":25,"line_end":25,"column_start":1,"column_end":4}},{"value":"/ [`BinaryHeap`]: `crate::binary_heap::BinaryHeap`","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":220065,"byte_end":220117,"line_start":26,"line_end":26,"column_start":1,"column_end":53}}]},{"kind":"Trait","id":{"krate":0,"index":1878},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":220359,"byte_end":220380,"line_start":36,"line_end":36,"column_start":11,"column_end":32},"name":"SortedLinkedListIndex","qualname":"::sorted_linked_list::SortedLinkedListIndex","value":"SortedLinkedListIndex: Copy","parent":null,"children":[{"krate":0,"index":1879},{"krate":0,"index":1880},{"krate":0,"index":1881},{"krate":0,"index":1882}],"decl_id":null,"docs":" Trait for defining an index for the linked list, never implemented by users.\n","sig":null,"attributes":[{"value":"/ Trait for defining an index for the linked list, never implemented by users.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":220268,"byte_end":220348,"line_start":35,"line_end":35,"column_start":1,"column_end":81}}]},{"kind":"Method","id":{"krate":0,"index":1879},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":220422,"byte_end":220435,"line_start":38,"line_end":38,"column_start":15,"column_end":28},"name":"new_unchecked","qualname":"::sorted_linked_list::SortedLinkedListIndex::new_unchecked","value":"pub unsafe fn new_unchecked(usize) -> Self","parent":{"krate":0,"index":1878},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1880},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":220490,"byte_end":220503,"line_start":40,"line_end":40,"column_start":15,"column_end":28},"name":"get_unchecked","qualname":"::sorted_linked_list::SortedLinkedListIndex::get_unchecked","value":"pub unsafe fn get_unchecked(Self) -> usize","parent":{"krate":0,"index":1878},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1881},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":220546,"byte_end":220552,"line_start":42,"line_end":42,"column_start":8,"column_end":14},"name":"option","qualname":"::sorted_linked_list::SortedLinkedListIndex::option","value":"pub fn option(Self) -> Option<usize>","parent":{"krate":0,"index":1878},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1882},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":220603,"byte_end":220607,"line_start":44,"line_end":44,"column_start":8,"column_end":12},"name":"none","qualname":"::sorted_linked_list::SortedLinkedListIndex::none","value":"pub fn none() -> Self","parent":{"krate":0,"index":1878},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1883},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":220681,"byte_end":220684,"line_start":48,"line_end":48,"column_start":12,"column_end":15},"name":"Min","qualname":"::sorted_linked_list::Min","value":"","parent":null,"children":[],"decl_id":null,"docs":" Marker for Min sorted [`SortedLinkedList`].\n","sig":null,"attributes":[{"value":"/ Marker for Min sorted [`SortedLinkedList`].","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":220622,"byte_end":220669,"line_start":47,"line_end":47,"column_start":1,"column_end":48}}]},{"kind":"Struct","id":{"krate":0,"index":1885},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":220746,"byte_end":220749,"line_start":51,"line_end":51,"column_start":12,"column_end":15},"name":"Max","qualname":"::sorted_linked_list::Max","value":"","parent":null,"children":[],"decl_id":null,"docs":" Marker for Max sorted [`SortedLinkedList`].\n","sig":null,"attributes":[{"value":"/ Marker for Max sorted [`SortedLinkedList`].","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":220687,"byte_end":220734,"line_start":50,"line_end":50,"column_start":1,"column_end":48}}]},{"kind":"Trait","id":{"krate":0,"index":1887},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":220809,"byte_end":220813,"line_start":54,"line_end":54,"column_start":11,"column_end":15},"name":"Kind","qualname":"::sorted_linked_list::Kind","value":"Kind: private::Sealed","parent":null,"children":[{"krate":0,"index":1888}],"decl_id":null,"docs":" The linked list kind: min-list or max-list\n","sig":null,"attributes":[{"value":"/ The linked list kind: min-list or max-list","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":220752,"byte_end":220798,"line_start":53,"line_end":53,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1888},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":220859,"byte_end":220867,"line_start":56,"line_end":56,"column_start":8,"column_end":16},"name":"ordering","qualname":"::sorted_linked_list::Kind::ordering","value":"pub fn ordering() -> Ordering","parent":{"krate":0,"index":1887},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1894},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":221103,"byte_end":221109,"line_start":73,"line_end":73,"column_start":15,"column_end":21},"name":"Sealed","qualname":"::sorted_linked_list::private::Sealed","value":"Sealed","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1897},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":221232,"byte_end":221236,"line_start":80,"line_end":80,"column_start":12,"column_end":16},"name":"Node","qualname":"::sorted_linked_list::Node","value":"Node {  }","parent":null,"children":[{"krate":0,"index":1900},{"krate":0,"index":1901}],"decl_id":null,"docs":" A node in the [`SortedLinkedList`].\n","sig":null,"attributes":[{"value":"/ A node in the [`SortedLinkedList`].","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":221181,"byte_end":221220,"line_start":79,"line_end":79,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":1902},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":221322,"byte_end":221338,"line_start":86,"line_end":86,"column_start":12,"column_end":28},"name":"SortedLinkedList","qualname":"::sorted_linked_list::SortedLinkedList","value":"SortedLinkedList {  }","parent":null,"children":[{"krate":0,"index":1907},{"krate":0,"index":1909},{"krate":0,"index":1910},{"krate":0,"index":1911}],"decl_id":null,"docs":" The linked list.\n","sig":null,"attributes":[{"value":"/ The linked list.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":221290,"byte_end":221310,"line_start":85,"line_end":85,"column_start":1,"column_end":21}}]},{"kind":"Struct","id":{"krate":0,"index":2331},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":224124,"byte_end":224137,"line_start":181,"line_end":181,"column_start":27,"column_end":40},"name":"LinkedIndexU8","qualname":"::sorted_linked_list::LinkedIndexU8","value":"","parent":null,"children":[],"decl_id":null,"docs":" Index for the [`SortedLinkedList`] with specific backing storage.\n","sig":null,"attributes":[{"value":"/ Index for the [`SortedLinkedList`] with specific backing storage.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":221703,"byte_end":221772,"line_start":99,"line_end":99,"column_start":9,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":2328},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":224143,"byte_end":224149,"line_start":181,"line_end":181,"column_start":46,"column_end":52},"name":"new_u8","qualname":"<SortedLinkedList<T, LinkedIndexU8, K, N>>::new_u8","value":"pub const fn new_u8() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new linked list.\n","sig":null,"attributes":[{"value":"/ Create a new linked list.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":223225,"byte_end":223254,"line_start":150,"line_end":150,"column_start":13,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":2366},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":224221,"byte_end":224235,"line_start":182,"line_end":182,"column_start":27,"column_end":41},"name":"LinkedIndexU16","qualname":"::sorted_linked_list::LinkedIndexU16","value":"","parent":null,"children":[],"decl_id":null,"docs":" Index for the [`SortedLinkedList`] with specific backing storage.\n","sig":null,"attributes":[{"value":"/ Index for the [`SortedLinkedList`] with specific backing storage.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":221703,"byte_end":221772,"line_start":99,"line_end":99,"column_start":9,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":2363},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":224242,"byte_end":224249,"line_start":182,"line_end":182,"column_start":48,"column_end":55},"name":"new_u16","qualname":"<SortedLinkedList<T, LinkedIndexU16, K, N>>::new_u16","value":"pub const fn new_u16() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new linked list.\n","sig":null,"attributes":[{"value":"/ Create a new linked list.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":223225,"byte_end":223254,"line_start":150,"line_end":150,"column_start":13,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":2401},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":224305,"byte_end":224321,"line_start":183,"line_end":183,"column_start":27,"column_end":43},"name":"LinkedIndexUsize","qualname":"::sorted_linked_list::LinkedIndexUsize","value":"","parent":null,"children":[],"decl_id":null,"docs":" Index for the [`SortedLinkedList`] with specific backing storage.\n","sig":null,"attributes":[{"value":"/ Index for the [`SortedLinkedList`] with specific backing storage.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":221703,"byte_end":221772,"line_start":99,"line_end":99,"column_start":9,"column_end":78}}]},{"kind":"Method","id":{"krate":0,"index":2398},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":224330,"byte_end":224339,"line_start":183,"line_end":183,"column_start":52,"column_end":61},"name":"new_usize","qualname":"<SortedLinkedList<T, LinkedIndexUsize, K, N>>::new_usize","value":"pub const fn new_usize() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Create a new linked list.\n","sig":null,"attributes":[{"value":"/ Create a new linked list.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":223225,"byte_end":223254,"line_start":150,"line_end":150,"column_start":13,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":1929},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":226480,"byte_end":226494,"line_start":247,"line_end":247,"column_start":19,"column_end":33},"name":"push_unchecked","qualname":"<SortedLinkedList<T, Idx, K, N>>::push_unchecked","value":"pub unsafe fn push_unchecked(&mut Self, T)","parent":null,"children":[],"decl_id":null,"docs":" Pushes a value onto the list without checking if the list is full.","sig":null,"attributes":[{"value":"/ Pushes a value onto the list without checking if the list is full.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":226266,"byte_end":226336,"line_start":240,"line_end":240,"column_start":5,"column_end":75}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":226341,"byte_end":226344,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ Complexity is worst-case `O(N)`.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":226349,"byte_end":226385,"line_start":242,"line_end":242,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":226390,"byte_end":226393,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":226398,"byte_end":226410,"line_start":244,"line_end":244,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":226415,"byte_end":226418,"line_start":245,"line_end":245,"column_start":5,"column_end":8}},{"value":"/ Assumes that the list is not full.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":226423,"byte_end":226461,"line_start":246,"line_end":246,"column_start":5,"column_end":43}}]},{"kind":"Method","id":{"krate":0,"index":1930},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":228621,"byte_end":228625,"line_start":311,"line_end":311,"column_start":12,"column_end":16},"name":"push","qualname":"<SortedLinkedList<T, Idx, K, N>>::push","value":"pub fn push(&mut Self, T) -> Result<(), T>","parent":null,"children":[],"decl_id":null,"docs":" Pushes an element to the linked list and sorts it into place.","sig":null,"attributes":[{"value":"/ Pushes an element to the linked list and sorts it into place.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":227911,"byte_end":227976,"line_start":288,"line_end":288,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":227981,"byte_end":227984,"line_start":289,"line_end":289,"column_start":5,"column_end":8}},{"value":"/ Complexity is worst-case `O(N)`.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":227989,"byte_end":228025,"line_start":290,"line_end":290,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":228030,"byte_end":228033,"line_start":291,"line_end":291,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":228038,"byte_end":228051,"line_start":292,"line_end":292,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":228056,"byte_end":228059,"line_start":293,"line_end":293,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":228064,"byte_end":228071,"line_start":294,"line_end":294,"column_start":5,"column_end":12}},{"value":"/ use heapless::sorted_linked_list::{SortedLinkedList, Max};","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":228076,"byte_end":228138,"line_start":295,"line_end":295,"column_start":5,"column_end":67}},{"value":"/ let mut ll: SortedLinkedList<_, _, Max, 3> = SortedLinkedList::new_usize();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":228143,"byte_end":228222,"line_start":296,"line_end":296,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":228227,"byte_end":228230,"line_start":297,"line_end":297,"column_start":5,"column_end":8}},{"value":"/ // The largest value will always be first","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":228235,"byte_end":228280,"line_start":298,"line_end":298,"column_start":5,"column_end":50}},{"value":"/ ll.push(1).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":228285,"byte_end":228309,"line_start":299,"line_end":299,"column_start":5,"column_end":29}},{"value":"/ assert_eq!(ll.peek(), Some(&1));","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":228314,"byte_end":228350,"line_start":300,"line_end":300,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":228355,"byte_end":228358,"line_start":301,"line_end":301,"column_start":5,"column_end":8}},{"value":"/ ll.push(2).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":228363,"byte_end":228387,"line_start":302,"line_end":302,"column_start":5,"column_end":29}},{"value":"/ assert_eq!(ll.peek(), Some(&2));","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":228392,"byte_end":228428,"line_start":303,"line_end":303,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":228433,"byte_end":228436,"line_start":304,"line_end":304,"column_start":5,"column_end":8}},{"value":"/ ll.push(3).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":228441,"byte_end":228465,"line_start":305,"line_end":305,"column_start":5,"column_end":29}},{"value":"/ assert_eq!(ll.peek(), Some(&3));","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":228470,"byte_end":228506,"line_start":306,"line_end":306,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":228511,"byte_end":228514,"line_start":307,"line_end":307,"column_start":5,"column_end":8}},{"value":"/ // This will not fit in the queue.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":228519,"byte_end":228557,"line_start":308,"line_end":308,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(ll.push(4), Err(4));","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":228562,"byte_end":228597,"line_start":309,"line_end":309,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":228602,"byte_end":228609,"line_start":310,"line_end":310,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1931},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":229313,"byte_end":229317,"line_start":336,"line_end":336,"column_start":12,"column_end":16},"name":"iter","qualname":"<SortedLinkedList<T, Idx, K, N>>::iter","value":"pub fn iter(&Self) -> Iter<, T, Idx, K, >","parent":null,"children":[],"decl_id":null,"docs":" Get an iterator over the sorted list.","sig":null,"attributes":[{"value":"/ Get an iterator over the sorted list.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":228810,"byte_end":228851,"line_start":319,"line_end":319,"column_start":5,"column_end":46}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":228856,"byte_end":228859,"line_start":320,"line_end":320,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":228864,"byte_end":228877,"line_start":321,"line_end":321,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":228882,"byte_end":228885,"line_start":322,"line_end":322,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":228890,"byte_end":228897,"line_start":323,"line_end":323,"column_start":5,"column_end":12}},{"value":"/ use heapless::sorted_linked_list::{SortedLinkedList, Max};","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":228902,"byte_end":228964,"line_start":324,"line_end":324,"column_start":5,"column_end":67}},{"value":"/ let mut ll: SortedLinkedList<_, _, Max, 3> = SortedLinkedList::new_usize();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":228969,"byte_end":229048,"line_start":325,"line_end":325,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":229053,"byte_end":229056,"line_start":326,"line_end":326,"column_start":5,"column_end":8}},{"value":"/ ll.push(1).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":229061,"byte_end":229085,"line_start":327,"line_end":327,"column_start":5,"column_end":29}},{"value":"/ ll.push(2).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":229090,"byte_end":229114,"line_start":328,"line_end":328,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":229119,"byte_end":229122,"line_start":329,"line_end":329,"column_start":5,"column_end":8}},{"value":"/ let mut iter = ll.iter();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":229127,"byte_end":229156,"line_start":330,"line_end":330,"column_start":5,"column_end":34}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":229161,"byte_end":229164,"line_start":331,"line_end":331,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(iter.next(), Some(&2));","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":229169,"byte_end":229207,"line_start":332,"line_end":332,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(iter.next(), Some(&1));","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":229212,"byte_end":229250,"line_start":333,"line_end":333,"column_start":5,"column_end":43}},{"value":"/ assert_eq!(iter.next(), None);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":229255,"byte_end":229289,"line_start":334,"line_end":334,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":229294,"byte_end":229301,"line_start":335,"line_end":335,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1932},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":230135,"byte_end":230143,"line_start":365,"line_end":365,"column_start":12,"column_end":20},"name":"find_mut","qualname":"<SortedLinkedList<T, Idx, K, N>>::find_mut","value":"pub fn find_mut<F>(&mut Self, F) -> Option<FindMut<, T, Idx, K, >> where\nF: FnMut(&T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Find an element in the list that can be changed and resorted.","sig":null,"attributes":[{"value":"/ Find an element in the list that can be changed and resorted.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":229443,"byte_end":229508,"line_start":343,"line_end":343,"column_start":5,"column_end":70}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":229513,"byte_end":229516,"line_start":344,"line_end":344,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":229521,"byte_end":229534,"line_start":345,"line_end":345,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":229539,"byte_end":229542,"line_start":346,"line_end":346,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":229547,"byte_end":229554,"line_start":347,"line_end":347,"column_start":5,"column_end":12}},{"value":"/ use heapless::sorted_linked_list::{SortedLinkedList, Max};","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":229559,"byte_end":229621,"line_start":348,"line_end":348,"column_start":5,"column_end":67}},{"value":"/ let mut ll: SortedLinkedList<_, _, Max, 3> = SortedLinkedList::new_usize();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":229626,"byte_end":229705,"line_start":349,"line_end":349,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":229710,"byte_end":229713,"line_start":350,"line_end":350,"column_start":5,"column_end":8}},{"value":"/ ll.push(1).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":229718,"byte_end":229742,"line_start":351,"line_end":351,"column_start":5,"column_end":29}},{"value":"/ ll.push(2).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":229747,"byte_end":229771,"line_start":352,"line_end":352,"column_start":5,"column_end":29}},{"value":"/ ll.push(3).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":229776,"byte_end":229800,"line_start":353,"line_end":353,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":229805,"byte_end":229808,"line_start":354,"line_end":354,"column_start":5,"column_end":8}},{"value":"/ // Find a value and update it","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":229813,"byte_end":229846,"line_start":355,"line_end":355,"column_start":5,"column_end":38}},{"value":"/ let mut find = ll.find_mut(|v| *v == 2).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":229851,"byte_end":229904,"line_start":356,"line_end":356,"column_start":5,"column_end":58}},{"value":"/ *find += 1000;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":229909,"byte_end":229927,"line_start":357,"line_end":357,"column_start":5,"column_end":23}},{"value":"/ find.finish();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":229932,"byte_end":229950,"line_start":358,"line_end":358,"column_start":5,"column_end":23}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":229955,"byte_end":229958,"line_start":359,"line_end":359,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(ll.pop(), Ok(1002));","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":229963,"byte_end":229998,"line_start":360,"line_end":360,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(ll.pop(), Ok(3));","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":230003,"byte_end":230035,"line_start":361,"line_end":361,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(ll.pop(), Ok(1));","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":230040,"byte_end":230072,"line_start":362,"line_end":362,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(ll.pop(), Err(()));","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":230077,"byte_end":230111,"line_start":363,"line_end":363,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":230116,"byte_end":230123,"line_start":364,"line_end":364,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1934},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":232089,"byte_end":232093,"line_start":427,"line_end":427,"column_start":12,"column_end":16},"name":"peek","qualname":"<SortedLinkedList<T, Idx, K, N>>::peek","value":"pub fn peek(&Self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Peek at the first element.","sig":null,"attributes":[{"value":"/ Peek at the first element.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":231148,"byte_end":231178,"line_start":401,"line_end":401,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":231183,"byte_end":231186,"line_start":402,"line_end":402,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":231191,"byte_end":231204,"line_start":403,"line_end":403,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":231209,"byte_end":231212,"line_start":404,"line_end":404,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":231217,"byte_end":231224,"line_start":405,"line_end":405,"column_start":5,"column_end":12}},{"value":"/ use heapless::sorted_linked_list::{SortedLinkedList, Max, Min};","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":231229,"byte_end":231296,"line_start":406,"line_end":406,"column_start":5,"column_end":72}},{"value":"/ let mut ll_max: SortedLinkedList<_, _, Max, 3> = SortedLinkedList::new_usize();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":231301,"byte_end":231384,"line_start":407,"line_end":407,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":231389,"byte_end":231392,"line_start":408,"line_end":408,"column_start":5,"column_end":8}},{"value":"/ // The largest value will always be first","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":231397,"byte_end":231442,"line_start":409,"line_end":409,"column_start":5,"column_end":50}},{"value":"/ ll_max.push(1).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":231447,"byte_end":231475,"line_start":410,"line_end":410,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(ll_max.peek(), Some(&1));","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":231480,"byte_end":231520,"line_start":411,"line_end":411,"column_start":5,"column_end":45}},{"value":"/ ll_max.push(2).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":231525,"byte_end":231553,"line_start":412,"line_end":412,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(ll_max.peek(), Some(&2));","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":231558,"byte_end":231598,"line_start":413,"line_end":413,"column_start":5,"column_end":45}},{"value":"/ ll_max.push(3).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":231603,"byte_end":231631,"line_start":414,"line_end":414,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(ll_max.peek(), Some(&3));","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":231636,"byte_end":231676,"line_start":415,"line_end":415,"column_start":5,"column_end":45}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":231681,"byte_end":231684,"line_start":416,"line_end":416,"column_start":5,"column_end":8}},{"value":"/ let mut ll_min: SortedLinkedList<_, _, Min, 3> = SortedLinkedList::new_usize();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":231689,"byte_end":231772,"line_start":417,"line_end":417,"column_start":5,"column_end":88}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":231777,"byte_end":231780,"line_start":418,"line_end":418,"column_start":5,"column_end":8}},{"value":"/ // The Smallest value will always be first","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":231785,"byte_end":231831,"line_start":419,"line_end":419,"column_start":5,"column_end":51}},{"value":"/ ll_min.push(3).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":231836,"byte_end":231864,"line_start":420,"line_end":420,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(ll_min.peek(), Some(&3));","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":231869,"byte_end":231909,"line_start":421,"line_end":421,"column_start":5,"column_end":45}},{"value":"/ ll_min.push(2).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":231914,"byte_end":231942,"line_start":422,"line_end":422,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(ll_min.peek(), Some(&2));","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":231947,"byte_end":231987,"line_start":423,"line_end":423,"column_start":5,"column_end":45}},{"value":"/ ll_min.push(1).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":231992,"byte_end":232020,"line_start":424,"line_end":424,"column_start":5,"column_end":33}},{"value":"/ assert_eq!(ll_min.peek(), Some(&1));","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":232025,"byte_end":232065,"line_start":425,"line_end":425,"column_start":5,"column_end":45}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":232070,"byte_end":232077,"line_start":426,"line_end":426,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1936},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":232396,"byte_end":232409,"line_start":438,"line_end":438,"column_start":19,"column_end":32},"name":"pop_unchecked","qualname":"<SortedLinkedList<T, Idx, K, N>>::pop_unchecked","value":"pub unsafe fn pop_unchecked(&mut Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Pop an element from the list without checking so the list is not empty.","sig":null,"attributes":[{"value":"/ Pop an element from the list without checking so the list is not empty.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":232225,"byte_end":232300,"line_start":433,"line_end":433,"column_start":5,"column_end":80}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":232305,"byte_end":232308,"line_start":434,"line_end":434,"column_start":5,"column_end":8}},{"value":"/ # Safety","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":232313,"byte_end":232325,"line_start":435,"line_end":435,"column_start":5,"column_end":17}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":232330,"byte_end":232333,"line_start":436,"line_end":436,"column_start":5,"column_end":8}},{"value":"/ Assumes that the list is not empty.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":232338,"byte_end":232377,"line_start":437,"line_end":437,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":1937},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":233202,"byte_end":233205,"line_start":465,"line_end":465,"column_start":12,"column_end":15},"name":"pop","qualname":"<SortedLinkedList<T, Idx, K, N>>::pop","value":"pub fn pop(&mut Self) -> Result<T, ()>","parent":null,"children":[],"decl_id":null,"docs":" Pops the first element in the list.","sig":null,"attributes":[{"value":"/ Pops the first element in the list.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":232706,"byte_end":232745,"line_start":448,"line_end":448,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":232750,"byte_end":232753,"line_start":449,"line_end":449,"column_start":5,"column_end":8}},{"value":"/ Complexity is worst-case `O(1)`.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":232758,"byte_end":232794,"line_start":450,"line_end":450,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":232799,"byte_end":232802,"line_start":451,"line_end":451,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":232807,"byte_end":232820,"line_start":452,"line_end":452,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":232825,"byte_end":232828,"line_start":453,"line_end":453,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":232833,"byte_end":232840,"line_start":454,"line_end":454,"column_start":5,"column_end":12}},{"value":"/ use heapless::sorted_linked_list::{SortedLinkedList, Max};","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":232845,"byte_end":232907,"line_start":455,"line_end":455,"column_start":5,"column_end":67}},{"value":"/ let mut ll: SortedLinkedList<_, _, Max, 3> = SortedLinkedList::new_usize();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":232912,"byte_end":232991,"line_start":456,"line_end":456,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":232996,"byte_end":232999,"line_start":457,"line_end":457,"column_start":5,"column_end":8}},{"value":"/ ll.push(1).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":233004,"byte_end":233028,"line_start":458,"line_end":458,"column_start":5,"column_end":29}},{"value":"/ ll.push(2).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":233033,"byte_end":233057,"line_start":459,"line_end":459,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":233062,"byte_end":233065,"line_start":460,"line_end":460,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(ll.pop(), Ok(2));","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":233070,"byte_end":233102,"line_start":461,"line_end":461,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(ll.pop(), Ok(1));","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":233107,"byte_end":233139,"line_start":462,"line_end":462,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(ll.pop(), Err(()));","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":233144,"byte_end":233178,"line_start":463,"line_end":463,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":233183,"byte_end":233190,"line_start":464,"line_end":464,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":1938},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":233911,"byte_end":233918,"line_start":491,"line_end":491,"column_start":12,"column_end":19},"name":"is_full","qualname":"<SortedLinkedList<T, Idx, K, N>>::is_full","value":"pub fn is_full(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks if the linked list is full.","sig":null,"attributes":[{"value":"/ Checks if the linked list is full.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":233372,"byte_end":233410,"line_start":473,"line_end":473,"column_start":5,"column_end":43}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":233415,"byte_end":233418,"line_start":474,"line_end":474,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":233423,"byte_end":233436,"line_start":475,"line_end":475,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":233441,"byte_end":233444,"line_start":476,"line_end":476,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":233449,"byte_end":233456,"line_start":477,"line_end":477,"column_start":5,"column_end":12}},{"value":"/ use heapless::sorted_linked_list::{SortedLinkedList, Max};","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":233461,"byte_end":233523,"line_start":478,"line_end":478,"column_start":5,"column_end":67}},{"value":"/ let mut ll: SortedLinkedList<_, _, Max, 3> = SortedLinkedList::new_usize();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":233528,"byte_end":233607,"line_start":479,"line_end":479,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":233612,"byte_end":233615,"line_start":480,"line_end":480,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(ll.is_full(), false);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":233620,"byte_end":233656,"line_start":481,"line_end":481,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":233661,"byte_end":233664,"line_start":482,"line_end":482,"column_start":5,"column_end":8}},{"value":"/ ll.push(1).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":233669,"byte_end":233693,"line_start":483,"line_end":483,"column_start":5,"column_end":29}},{"value":"/ assert_eq!(ll.is_full(), false);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":233698,"byte_end":233734,"line_start":484,"line_end":484,"column_start":5,"column_end":41}},{"value":"/ ll.push(2).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":233739,"byte_end":233763,"line_start":485,"line_end":485,"column_start":5,"column_end":29}},{"value":"/ assert_eq!(ll.is_full(), false);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":233768,"byte_end":233804,"line_start":486,"line_end":486,"column_start":5,"column_end":41}},{"value":"/ ll.push(3).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":233809,"byte_end":233833,"line_start":487,"line_end":487,"column_start":5,"column_end":29}},{"value":"/ assert_eq!(ll.is_full(), true);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":233838,"byte_end":233873,"line_start":488,"line_end":488,"column_start":5,"column_end":40}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":233878,"byte_end":233885,"line_start":489,"line_end":489,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":233890,"byte_end":233899,"line_start":490,"line_end":490,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1939},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":234386,"byte_end":234394,"line_start":509,"line_end":509,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<SortedLinkedList<T, Idx, K, N>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks if the linked list is empty.","sig":null,"attributes":[{"value":"/ Checks if the linked list is empty.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":233984,"byte_end":234023,"line_start":495,"line_end":495,"column_start":5,"column_end":44}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":234028,"byte_end":234031,"line_start":496,"line_end":496,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":234036,"byte_end":234049,"line_start":497,"line_end":497,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":234054,"byte_end":234057,"line_start":498,"line_end":498,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":234062,"byte_end":234069,"line_start":499,"line_end":499,"column_start":5,"column_end":12}},{"value":"/ use heapless::sorted_linked_list::{SortedLinkedList, Max};","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":234074,"byte_end":234136,"line_start":500,"line_end":500,"column_start":5,"column_end":67}},{"value":"/ let mut ll: SortedLinkedList<_, _, Max, 3> = SortedLinkedList::new_usize();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":234141,"byte_end":234220,"line_start":501,"line_end":501,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":234225,"byte_end":234228,"line_start":502,"line_end":502,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(ll.is_empty(), true);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":234233,"byte_end":234269,"line_start":503,"line_end":503,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":234274,"byte_end":234277,"line_start":504,"line_end":504,"column_start":5,"column_end":8}},{"value":"/ ll.push(1).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":234282,"byte_end":234306,"line_start":505,"line_end":505,"column_start":5,"column_end":29}},{"value":"/ assert_eq!(ll.is_empty(), false);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":234311,"byte_end":234348,"line_start":506,"line_end":506,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":234353,"byte_end":234360,"line_start":507,"line_end":507,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":234365,"byte_end":234374,"line_start":508,"line_end":508,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1940},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":234503,"byte_end":234507,"line_start":515,"line_end":515,"column_start":12,"column_end":16},"name":"Iter","qualname":"::sorted_linked_list::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":1946},{"krate":0,"index":1947}],"decl_id":null,"docs":" Iterator for the linked list.\n","sig":null,"attributes":[{"value":"/ Iterator for the linked list.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":234458,"byte_end":234491,"line_start":514,"line_end":514,"column_start":1,"column_end":34}}]},{"kind":"Struct","id":{"krate":0,"index":1956},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":235117,"byte_end":235124,"line_start":544,"line_end":544,"column_start":12,"column_end":19},"name":"FindMut","qualname":"::sorted_linked_list::FindMut","value":"FindMut {  }","parent":null,"children":[{"krate":0,"index":1962},{"krate":0,"index":1963},{"krate":0,"index":1964},{"krate":0,"index":1965},{"krate":0,"index":1966}],"decl_id":null,"docs":" Comes from [`SortedLinkedList::find_mut`].\n","sig":null,"attributes":[{"value":"/ Comes from [`SortedLinkedList::find_mut`].","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":235059,"byte_end":235105,"line_start":543,"line_end":543,"column_start":1,"column_end":47}}]},{"kind":"Method","id":{"krate":0,"index":1974},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":236868,"byte_end":236871,"line_start":606,"line_end":606,"column_start":12,"column_end":15},"name":"pop","qualname":"<FindMut>::pop","value":"pub fn pop(Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" This will pop the element from the list.","sig":null,"attributes":[{"value":"/ This will pop the element from the list.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":236200,"byte_end":236244,"line_start":583,"line_end":583,"column_start":5,"column_end":49}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":236249,"byte_end":236252,"line_start":584,"line_end":584,"column_start":5,"column_end":8}},{"value":"/ Complexity is worst-case `O(1)`.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":236257,"byte_end":236293,"line_start":585,"line_end":585,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":236298,"byte_end":236301,"line_start":586,"line_end":586,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":236306,"byte_end":236319,"line_start":587,"line_end":587,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":236324,"byte_end":236327,"line_start":588,"line_end":588,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":236332,"byte_end":236339,"line_start":589,"line_end":589,"column_start":5,"column_end":12}},{"value":"/ use heapless::sorted_linked_list::{SortedLinkedList, Max};","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":236344,"byte_end":236406,"line_start":590,"line_end":590,"column_start":5,"column_end":67}},{"value":"/ let mut ll: SortedLinkedList<_, _, Max, 3> = SortedLinkedList::new_usize();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":236411,"byte_end":236490,"line_start":591,"line_end":591,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":236495,"byte_end":236498,"line_start":592,"line_end":592,"column_start":5,"column_end":8}},{"value":"/ ll.push(1).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":236503,"byte_end":236527,"line_start":593,"line_end":593,"column_start":5,"column_end":29}},{"value":"/ ll.push(2).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":236532,"byte_end":236556,"line_start":594,"line_end":594,"column_start":5,"column_end":29}},{"value":"/ ll.push(3).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":236561,"byte_end":236585,"line_start":595,"line_end":595,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":236590,"byte_end":236593,"line_start":596,"line_end":596,"column_start":5,"column_end":8}},{"value":"/ // Find a value and update it","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":236598,"byte_end":236631,"line_start":597,"line_end":597,"column_start":5,"column_end":38}},{"value":"/ let mut find = ll.find_mut(|v| *v == 2).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":236636,"byte_end":236689,"line_start":598,"line_end":598,"column_start":5,"column_end":58}},{"value":"/ find.pop();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":236694,"byte_end":236709,"line_start":599,"line_end":599,"column_start":5,"column_end":20}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":236714,"byte_end":236717,"line_start":600,"line_end":600,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(ll.pop(), Ok(3));","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":236722,"byte_end":236754,"line_start":601,"line_end":601,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(ll.pop(), Ok(1));","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":236759,"byte_end":236791,"line_start":602,"line_end":602,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(ll.pop(), Err(()));","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":236796,"byte_end":236830,"line_start":603,"line_end":603,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":236835,"byte_end":236842,"line_start":604,"line_end":604,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":236847,"byte_end":236856,"line_start":605,"line_end":605,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1975},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":237967,"byte_end":237973,"line_start":640,"line_end":640,"column_start":12,"column_end":18},"name":"finish","qualname":"<FindMut>::finish","value":"pub fn finish(Self)","parent":null,"children":[],"decl_id":null,"docs":" This will resort the element into the correct position in the list if needed. The resorting\n will only happen if the element has been accessed mutably.","sig":null,"attributes":[{"value":"/ This will resort the element into the correct position in the list if needed. The resorting","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":236928,"byte_end":237023,"line_start":610,"line_end":610,"column_start":5,"column_end":100}},{"value":"/ will only happen if the element has been accessed mutably.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":237028,"byte_end":237090,"line_start":611,"line_end":611,"column_start":5,"column_end":67}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":237095,"byte_end":237098,"line_start":612,"line_end":612,"column_start":5,"column_end":8}},{"value":"/ Same as calling `drop`.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":237103,"byte_end":237130,"line_start":613,"line_end":613,"column_start":5,"column_end":32}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":237135,"byte_end":237138,"line_start":614,"line_end":614,"column_start":5,"column_end":8}},{"value":"/ Complexity is worst-case `O(N)`.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":237143,"byte_end":237179,"line_start":615,"line_end":615,"column_start":5,"column_end":41}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":237184,"byte_end":237187,"line_start":616,"line_end":616,"column_start":5,"column_end":8}},{"value":"/ # Example","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":237192,"byte_end":237205,"line_start":617,"line_end":617,"column_start":5,"column_end":18}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":237210,"byte_end":237213,"line_start":618,"line_end":618,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":237218,"byte_end":237225,"line_start":619,"line_end":619,"column_start":5,"column_end":12}},{"value":"/ use heapless::sorted_linked_list::{SortedLinkedList, Max};","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":237230,"byte_end":237292,"line_start":620,"line_end":620,"column_start":5,"column_end":67}},{"value":"/ let mut ll: SortedLinkedList<_, _, Max, 3> = SortedLinkedList::new_usize();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":237297,"byte_end":237376,"line_start":621,"line_end":621,"column_start":5,"column_end":84}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":237381,"byte_end":237384,"line_start":622,"line_end":622,"column_start":5,"column_end":8}},{"value":"/ ll.push(1).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":237389,"byte_end":237413,"line_start":623,"line_end":623,"column_start":5,"column_end":29}},{"value":"/ ll.push(2).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":237418,"byte_end":237442,"line_start":624,"line_end":624,"column_start":5,"column_end":29}},{"value":"/ ll.push(3).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":237447,"byte_end":237471,"line_start":625,"line_end":625,"column_start":5,"column_end":29}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":237476,"byte_end":237479,"line_start":626,"line_end":626,"column_start":5,"column_end":8}},{"value":"/ let mut find = ll.find_mut(|v| *v == 2).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":237484,"byte_end":237537,"line_start":627,"line_end":627,"column_start":5,"column_end":58}},{"value":"/ find.finish(); // No resort, we did not access the value.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":237542,"byte_end":237603,"line_start":628,"line_end":628,"column_start":5,"column_end":66}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":237608,"byte_end":237611,"line_start":629,"line_end":629,"column_start":5,"column_end":8}},{"value":"/ let mut find = ll.find_mut(|v| *v == 2).unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":237616,"byte_end":237669,"line_start":630,"line_end":630,"column_start":5,"column_end":58}},{"value":"/ *find += 1000;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":237674,"byte_end":237692,"line_start":631,"line_end":631,"column_start":5,"column_end":23}},{"value":"/ find.finish(); // Will resort, we accessed (and updated) the value.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":237697,"byte_end":237768,"line_start":632,"line_end":632,"column_start":5,"column_end":76}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":237773,"byte_end":237776,"line_start":633,"line_end":633,"column_start":5,"column_end":8}},{"value":"/ assert_eq!(ll.pop(), Ok(1002));","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":237781,"byte_end":237816,"line_start":634,"line_end":634,"column_start":5,"column_end":40}},{"value":"/ assert_eq!(ll.pop(), Ok(3));","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":237821,"byte_end":237853,"line_start":635,"line_end":635,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(ll.pop(), Ok(1));","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":237858,"byte_end":237890,"line_start":636,"line_end":636,"column_start":5,"column_end":37}},{"value":"/ assert_eq!(ll.pop(), Err(()));","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":237895,"byte_end":237929,"line_start":637,"line_end":637,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":237934,"byte_end":237941,"line_start":638,"line_end":638,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":237946,"byte_end":237955,"line_start":639,"line_end":639,"column_start":5,"column_end":14}}]},{"kind":"Mod","id":{"krate":0,"index":2007},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"spsc","qualname":"::spsc","value":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","parent":null,"children":[{"krate":0,"index":2008},{"krate":0,"index":2009},{"krate":0,"index":2012},{"krate":0,"index":2015},{"krate":0,"index":2018},{"krate":0,"index":2021},{"krate":0,"index":2024},{"krate":0,"index":2025},{"krate":0,"index":2028},{"krate":0,"index":2031},{"krate":0,"index":2038},{"krate":0,"index":2061},{"krate":0,"index":2065},{"krate":0,"index":2069},{"krate":0,"index":2075},{"krate":0,"index":2078},{"krate":0,"index":2085},{"krate":0,"index":2090},{"krate":0,"index":2097},{"krate":0,"index":2103},{"krate":0,"index":2109},{"krate":0,"index":2114},{"krate":0,"index":2119},{"krate":0,"index":2123},{"krate":0,"index":2127},{"krate":0,"index":2132},{"krate":0,"index":2137},{"krate":0,"index":2144},{"krate":0,"index":2151},{"krate":0,"index":2156},{"krate":0,"index":2160},{"krate":0,"index":2165},{"krate":0,"index":2169},{"krate":0,"index":2179}],"decl_id":null,"docs":" Fixed capacity Single Producer Single Consumer (SPSC) queue","sig":null,"attributes":[{"value":"cfg(has_atomics)","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":4086,"byte_end":4105,"line_start":109,"line_end":109,"column_start":1,"column_end":20}},{"value":"/ Fixed capacity Single Producer Single Consumer (SPSC) queue","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":243842,"byte_end":243905,"line_start":1,"line_end":1,"column_start":1,"column_end":64}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":243906,"byte_end":243909,"line_start":2,"line_end":2,"column_start":1,"column_end":4}},{"value":"/ Implementation based on <https://www.codeproject.com/Articles/43510/Lock-Free-Single-Producer-Single-Consumer-Circular>","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":243910,"byte_end":244033,"line_start":3,"line_end":3,"column_start":1,"column_end":124}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":244034,"byte_end":244037,"line_start":4,"line_end":4,"column_start":1,"column_end":4}},{"value":"/ NOTE: This module is not available on targets that do *not* support atomic loads and are not","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":244038,"byte_end":244134,"line_start":5,"line_end":5,"column_start":1,"column_end":97}},{"value":"/ supported by [`atomic_polyfill`]. (e.g., MSP430).","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":244135,"byte_end":244188,"line_start":6,"line_end":6,"column_start":1,"column_end":54}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":244189,"byte_end":244192,"line_start":7,"line_end":7,"column_start":1,"column_end":4}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":244193,"byte_end":244207,"line_start":8,"line_end":8,"column_start":1,"column_end":15}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":244208,"byte_end":244211,"line_start":9,"line_end":9,"column_start":1,"column_end":4}},{"value":"/ - `Queue` can be used as a plain queue","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":244212,"byte_end":244254,"line_start":10,"line_end":10,"column_start":1,"column_end":43}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":244255,"byte_end":244258,"line_start":11,"line_end":11,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":244259,"byte_end":244266,"line_start":12,"line_end":12,"column_start":1,"column_end":8}},{"value":"/ use heapless::spsc::Queue;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":244267,"byte_end":244297,"line_start":13,"line_end":13,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":244298,"byte_end":244301,"line_start":14,"line_end":14,"column_start":1,"column_end":4}},{"value":"/ let mut rb: Queue<u8, 4> = Queue::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":244302,"byte_end":244346,"line_start":15,"line_end":15,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":244347,"byte_end":244350,"line_start":16,"line_end":16,"column_start":1,"column_end":4}},{"value":"/ assert!(rb.enqueue(0).is_ok());","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":244351,"byte_end":244386,"line_start":17,"line_end":17,"column_start":1,"column_end":36}},{"value":"/ assert!(rb.enqueue(1).is_ok());","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":244387,"byte_end":244422,"line_start":18,"line_end":18,"column_start":1,"column_end":36}},{"value":"/ assert!(rb.enqueue(2).is_ok());","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":244423,"byte_end":244458,"line_start":19,"line_end":19,"column_start":1,"column_end":36}},{"value":"/ assert!(rb.enqueue(3).is_err()); // full","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":244459,"byte_end":244503,"line_start":20,"line_end":20,"column_start":1,"column_end":45}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":244504,"byte_end":244507,"line_start":21,"line_end":21,"column_start":1,"column_end":4}},{"value":"/ assert_eq!(rb.dequeue(), Some(0));","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":244508,"byte_end":244546,"line_start":22,"line_end":22,"column_start":1,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":244547,"byte_end":244554,"line_start":23,"line_end":23,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":244555,"byte_end":244558,"line_start":24,"line_end":24,"column_start":1,"column_end":4}},{"value":"/ - `Queue` can be `split` and then be used in Single Producer Single Consumer mode","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":244559,"byte_end":244644,"line_start":25,"line_end":25,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":244645,"byte_end":244648,"line_start":26,"line_end":26,"column_start":1,"column_end":4}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":244649,"byte_end":244656,"line_start":27,"line_end":27,"column_start":1,"column_end":8}},{"value":"/ use heapless::spsc::Queue;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":244657,"byte_end":244687,"line_start":28,"line_end":28,"column_start":1,"column_end":31}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":244688,"byte_end":244691,"line_start":29,"line_end":29,"column_start":1,"column_end":4}},{"value":"/ // Notice, type signature needs to be explicit for now.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":244692,"byte_end":244751,"line_start":30,"line_end":30,"column_start":1,"column_end":60}},{"value":"/ // (min_const_eval, does not allow for default type assignments)","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":244752,"byte_end":244820,"line_start":31,"line_end":31,"column_start":1,"column_end":69}},{"value":"/ static mut Q: Queue<Event, 4> = Queue::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":244821,"byte_end":244870,"line_start":32,"line_end":32,"column_start":1,"column_end":50}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":244871,"byte_end":244874,"line_start":33,"line_end":33,"column_start":1,"column_end":4}},{"value":"/ enum Event { A, B }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":244875,"byte_end":244898,"line_start":34,"line_end":34,"column_start":1,"column_end":24}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":244899,"byte_end":244902,"line_start":35,"line_end":35,"column_start":1,"column_end":4}},{"value":"/ fn main() {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":244903,"byte_end":244918,"line_start":36,"line_end":36,"column_start":1,"column_end":16}},{"value":"/     // NOTE(unsafe) beware of aliasing the `consumer` end point","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":244919,"byte_end":244986,"line_start":37,"line_end":37,"column_start":1,"column_end":68}},{"value":"/     let mut consumer = unsafe { Q.split().1 };","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":244987,"byte_end":245037,"line_start":38,"line_end":38,"column_start":1,"column_end":51}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":245038,"byte_end":245041,"line_start":39,"line_end":39,"column_start":1,"column_end":4}},{"value":"/     loop {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":245042,"byte_end":245056,"line_start":40,"line_end":40,"column_start":1,"column_end":15}},{"value":"/         // `dequeue` is a lockless operation","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":245057,"byte_end":245105,"line_start":41,"line_end":41,"column_start":1,"column_end":49}},{"value":"/         match consumer.dequeue() {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":245106,"byte_end":245144,"line_start":42,"line_end":42,"column_start":1,"column_end":39}},{"value":"/             Some(Event::A) => { /* .. */ },","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":245145,"byte_end":245192,"line_start":43,"line_end":43,"column_start":1,"column_end":48}},{"value":"/             Some(Event::B) => { /* .. */ },","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":245193,"byte_end":245240,"line_start":44,"line_end":44,"column_start":1,"column_end":48}},{"value":"/             None => { /* sleep */ },","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":245241,"byte_end":245281,"line_start":45,"line_end":45,"column_start":1,"column_end":41}},{"value":"/         }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":245282,"byte_end":245295,"line_start":46,"line_end":46,"column_start":1,"column_end":14}},{"value":"/ #       break","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":245296,"byte_end":245313,"line_start":47,"line_end":47,"column_start":1,"column_end":18}},{"value":"/     }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":245314,"byte_end":245323,"line_start":48,"line_end":48,"column_start":1,"column_end":10}},{"value":"/ }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":245324,"byte_end":245329,"line_start":49,"line_end":49,"column_start":1,"column_end":6}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":245330,"byte_end":245333,"line_start":50,"line_end":50,"column_start":1,"column_end":4}},{"value":"/ // this is a different execution context that can preempt `main`","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":245334,"byte_end":245402,"line_start":51,"line_end":51,"column_start":1,"column_end":69}},{"value":"/ fn interrupt_handler() {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":245403,"byte_end":245431,"line_start":52,"line_end":52,"column_start":1,"column_end":29}},{"value":"/     // NOTE(unsafe) beware of aliasing the `producer` end point","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":245432,"byte_end":245499,"line_start":53,"line_end":53,"column_start":1,"column_end":68}},{"value":"/     let mut producer = unsafe { Q.split().0 };","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":245500,"byte_end":245550,"line_start":54,"line_end":54,"column_start":1,"column_end":51}},{"value":"/ #   let condition = true;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":245551,"byte_end":245580,"line_start":55,"line_end":55,"column_start":1,"column_end":30}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":245581,"byte_end":245584,"line_start":56,"line_end":56,"column_start":1,"column_end":4}},{"value":"/     // ..","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":245585,"byte_end":245598,"line_start":57,"line_end":57,"column_start":1,"column_end":14}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":245599,"byte_end":245602,"line_start":58,"line_end":58,"column_start":1,"column_end":4}},{"value":"/     if condition {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":245603,"byte_end":245625,"line_start":59,"line_end":59,"column_start":1,"column_end":23}},{"value":"/         producer.enqueue(Event::A).ok().unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":245626,"byte_end":245679,"line_start":60,"line_end":60,"column_start":1,"column_end":54}},{"value":"/     } else {","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":245680,"byte_end":245696,"line_start":61,"line_end":61,"column_start":1,"column_end":17}},{"value":"/         producer.enqueue(Event::B).ok().unwrap();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":245697,"byte_end":245750,"line_start":62,"line_end":62,"column_start":1,"column_end":54}},{"value":"/     }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":245751,"byte_end":245760,"line_start":63,"line_end":63,"column_start":1,"column_end":10}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":245761,"byte_end":245764,"line_start":64,"line_end":64,"column_start":1,"column_end":4}},{"value":"/     // ..","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":245765,"byte_end":245778,"line_start":65,"line_end":65,"column_start":1,"column_end":14}},{"value":"/ }","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":245779,"byte_end":245784,"line_start":66,"line_end":66,"column_start":1,"column_end":6}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":245785,"byte_end":245792,"line_start":67,"line_end":67,"column_start":1,"column_end":8}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":245793,"byte_end":245796,"line_start":68,"line_end":68,"column_start":1,"column_end":4}},{"value":"/ # Benchmarks","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":245797,"byte_end":245813,"line_start":69,"line_end":69,"column_start":1,"column_end":17}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":245814,"byte_end":245817,"line_start":70,"line_end":70,"column_start":1,"column_end":4}},{"value":"/ Measured on a ARM Cortex-M3 core running at 8 MHz and with zero Flash wait cycles","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":245818,"byte_end":245903,"line_start":71,"line_end":71,"column_start":1,"column_end":86}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":245904,"byte_end":245907,"line_start":72,"line_end":72,"column_start":1,"column_end":4}},{"value":"/ `-C opt-level`         |`3`|","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":245908,"byte_end":245940,"line_start":73,"line_end":73,"column_start":1,"column_end":33}},{"value":"/ -----------------------|---|","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":245941,"byte_end":245973,"line_start":74,"line_end":74,"column_start":1,"column_end":33}},{"value":"/ `Consumer<u8>::dequeue`| 15|","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":245974,"byte_end":246006,"line_start":75,"line_end":75,"column_start":1,"column_end":33}},{"value":"/ `Queue<u8>::dequeue`   | 12|","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":246007,"byte_end":246039,"line_start":76,"line_end":76,"column_start":1,"column_end":33}},{"value":"/ `Producer<u8>::enqueue`| 16|","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":246040,"byte_end":246072,"line_start":77,"line_end":77,"column_start":1,"column_end":33}},{"value":"/ `Queue<u8>::enqueue`   | 14|","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":246073,"byte_end":246105,"line_start":78,"line_end":78,"column_start":1,"column_end":33}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":246106,"byte_end":246109,"line_start":79,"line_end":79,"column_start":1,"column_end":4}},{"value":"/ - All execution times are in clock cycles. 1 clock cycle = 125 ns.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":246110,"byte_end":246180,"line_start":80,"line_end":80,"column_start":1,"column_end":71}},{"value":"/ - Execution time is *dependent* of `mem::size_of::<T>()`. Both operations include one","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":246181,"byte_end":246270,"line_start":81,"line_end":81,"column_start":1,"column_end":90}},{"value":"/ `memcpy(T)` in their successful path.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":246271,"byte_end":246312,"line_start":82,"line_end":82,"column_start":1,"column_end":42}},{"value":"/ - The optimization level is indicated in the first row.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":246313,"byte_end":246372,"line_start":83,"line_end":83,"column_start":1,"column_end":60}},{"value":"/ - The numbers reported correspond to the successful path (i.e. `Some` is returned by `dequeue`","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":246373,"byte_end":246471,"line_start":84,"line_end":84,"column_start":1,"column_end":99}},{"value":"/ and `Ok` is returned by `enqueue`).","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":246472,"byte_end":246511,"line_start":85,"line_end":85,"column_start":1,"column_end":40}}]},{"kind":"Struct","id":{"krate":0,"index":2031},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":246966,"byte_end":246971,"line_start":98,"line_end":98,"column_start":12,"column_end":17},"name":"Queue","qualname":"::spsc::Queue","value":"Queue {  }","parent":null,"children":[{"krate":0,"index":2034},{"krate":0,"index":2035},{"krate":0,"index":2036}],"decl_id":null,"docs":" A statically allocated single producer single consumer queue with a capacity of `N - 1` elements","sig":null,"attributes":[{"value":"/ A statically allocated single producer single consumer queue with a capacity of `N - 1` elements","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":246737,"byte_end":246837,"line_start":94,"line_end":94,"column_start":1,"column_end":101}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":246838,"byte_end":246841,"line_start":95,"line_end":95,"column_start":1,"column_end":4}},{"value":"/ *IMPORTANT*: To get better performance use a value for `N` that is a power of 2 (e.g. `16`, `32`,","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":246842,"byte_end":246943,"line_start":96,"line_end":96,"column_start":1,"column_end":102}},{"value":"/ etc.).","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":246944,"byte_end":246954,"line_start":97,"line_end":97,"column_start":1,"column_end":11}}]},{"kind":"Method","id":{"krate":0,"index":2043},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":247495,"byte_end":247498,"line_start":117,"line_end":117,"column_start":18,"column_end":21},"name":"new","qualname":"<Queue<T, N>>::new","value":"pub const fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty queue with a fixed capacity of `N - 1`\n","sig":null,"attributes":[{"value":"/ Creates an empty queue with a fixed capacity of `N - 1`","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":247418,"byte_end":247477,"line_start":116,"line_end":116,"column_start":5,"column_end":64}}]},{"kind":"Method","id":{"krate":0,"index":2045},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":247833,"byte_end":247841,"line_start":130,"line_end":130,"column_start":18,"column_end":26},"name":"capacity","qualname":"<Queue<T, N>>::capacity","value":"pub const fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the maximum number of elements the queue can hold\n","sig":null,"attributes":[{"value":"/ Returns the maximum number of elements the queue can hold","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":247740,"byte_end":247801,"line_start":128,"line_end":128,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":247806,"byte_end":247815,"line_start":129,"line_end":129,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2046},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":247958,"byte_end":247961,"line_start":136,"line_end":136,"column_start":12,"column_end":15},"name":"len","qualname":"<Queue<T, N>>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in the queue\n","sig":null,"attributes":[{"value":"/ Returns the number of elements in the queue","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":247885,"byte_end":247932,"line_start":134,"line_end":134,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":247937,"byte_end":247946,"line_start":135,"line_end":135,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2047},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":248250,"byte_end":248258,"line_start":145,"line_end":145,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<Queue<T, N>>::is_empty","value":"pub fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the queue is empty\n","sig":null,"attributes":[{"value":"/ Returns `true` if the queue is empty","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":248184,"byte_end":248224,"line_start":143,"line_end":143,"column_start":5,"column_end":45}},{"value":"inline","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":248229,"byte_end":248238,"line_start":144,"line_end":144,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2048},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":248431,"byte_end":248438,"line_start":151,"line_end":151,"column_start":12,"column_end":19},"name":"is_full","qualname":"<Queue<T, N>>::is_full","value":"pub fn is_full(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the queue is full\n","sig":null,"attributes":[{"value":"/ Returns `true` if the queue is full","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":248366,"byte_end":248405,"line_start":149,"line_end":149,"column_start":5,"column_end":44}},{"value":"inline","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":248410,"byte_end":248419,"line_start":150,"line_end":150,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2049},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":248627,"byte_end":248631,"line_start":156,"line_end":156,"column_start":12,"column_end":16},"name":"iter","qualname":"<Queue<T, N>>::iter","value":"pub fn iter(&Self) -> Iter<, T, >","parent":null,"children":[],"decl_id":null,"docs":" Iterates from the front of the queue to the back\n","sig":null,"attributes":[{"value":"/ Iterates from the front of the queue to the back","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":248563,"byte_end":248615,"line_start":155,"line_end":155,"column_start":5,"column_end":57}}]},{"kind":"Method","id":{"krate":0,"index":2050},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":248836,"byte_end":248844,"line_start":165,"line_end":165,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<Queue<T, N>>::iter_mut","value":"pub fn iter_mut(&mut Self) -> IterMut<, T, >","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator that allows modifying each value\n","sig":null,"attributes":[{"value":"/ Returns an iterator that allows modifying each value","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":248768,"byte_end":248824,"line_start":164,"line_end":164,"column_start":5,"column_end":61}}]},{"kind":"Method","id":{"krate":0,"index":2051},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":249138,"byte_end":249145,"line_start":178,"line_end":178,"column_start":12,"column_end":19},"name":"enqueue","qualname":"<Queue<T, N>>::enqueue","value":"pub fn enqueue(&mut Self, T) -> Result<(), T>","parent":null,"children":[],"decl_id":null,"docs":" Adds an `item` to the end of the queue","sig":null,"attributes":[{"value":"/ Adds an `item` to the end of the queue","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":249009,"byte_end":249051,"line_start":174,"line_end":174,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":249056,"byte_end":249059,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ Returns back the `item` if the queue is full","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":249064,"byte_end":249112,"line_start":176,"line_end":176,"column_start":5,"column_end":53}},{"value":"inline","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":249117,"byte_end":249126,"line_start":177,"line_end":177,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2052},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":249343,"byte_end":249350,"line_start":184,"line_end":184,"column_start":12,"column_end":19},"name":"dequeue","qualname":"<Queue<T, N>>::dequeue","value":"pub fn dequeue(&mut Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the item in the front of the queue, or `None` if the queue is empty\n","sig":null,"attributes":[{"value":"/ Returns the item in the front of the queue, or `None` if the queue is empty","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":249238,"byte_end":249317,"line_start":182,"line_end":182,"column_start":5,"column_end":84}},{"value":"inline","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":249322,"byte_end":249331,"line_start":183,"line_end":183,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2053},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":249978,"byte_end":249982,"line_start":203,"line_end":203,"column_start":12,"column_end":16},"name":"peek","qualname":"<Queue<T, N>>::peek","value":"pub fn peek(&Self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the item in the front of the queue without dequeuing, or\n `None` if the queue is empty.","sig":null,"attributes":[{"value":"/ Returns a reference to the item in the front of the queue without dequeuing, or","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":249428,"byte_end":249511,"line_start":188,"line_end":188,"column_start":5,"column_end":88}},{"value":"/ `None` if the queue is empty.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":249516,"byte_end":249549,"line_start":189,"line_end":189,"column_start":5,"column_end":38}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":249554,"byte_end":249557,"line_start":190,"line_end":190,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":249562,"byte_end":249576,"line_start":191,"line_end":191,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":249581,"byte_end":249588,"line_start":192,"line_end":192,"column_start":5,"column_end":12}},{"value":"/ use heapless::spsc::Queue;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":249593,"byte_end":249623,"line_start":193,"line_end":193,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":249628,"byte_end":249631,"line_start":194,"line_end":194,"column_start":5,"column_end":8}},{"value":"/ let mut queue: Queue<u8, 235> = Queue::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":249636,"byte_end":249685,"line_start":195,"line_end":195,"column_start":5,"column_end":54}},{"value":"/ let (mut producer, mut consumer) = queue.split();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":249690,"byte_end":249743,"line_start":196,"line_end":196,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(None, consumer.peek());","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":249748,"byte_end":249786,"line_start":197,"line_end":197,"column_start":5,"column_end":43}},{"value":"/ producer.enqueue(1);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":249791,"byte_end":249815,"line_start":198,"line_end":198,"column_start":5,"column_end":29}},{"value":"/ assert_eq!(Some(&1), consumer.peek());","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":249820,"byte_end":249862,"line_start":199,"line_end":199,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(Some(1), consumer.dequeue());","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":249867,"byte_end":249911,"line_start":200,"line_end":200,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(None, consumer.peek());","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":249916,"byte_end":249954,"line_start":201,"line_end":201,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":249959,"byte_end":249966,"line_start":202,"line_end":202,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":2056},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":251919,"byte_end":251936,"line_start":248,"line_end":248,"column_start":19,"column_end":36},"name":"enqueue_unchecked","qualname":"<Queue<T, N>>::enqueue_unchecked","value":"pub unsafe fn enqueue_unchecked(&mut Self, T)","parent":null,"children":[],"decl_id":null,"docs":" Adds an `item` to the end of the queue, without checking if it's full","sig":null,"attributes":[{"value":"/ Adds an `item` to the end of the queue, without checking if it's full","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":251501,"byte_end":251574,"line_start":240,"line_end":240,"column_start":5,"column_end":78}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":251579,"byte_end":251582,"line_start":241,"line_end":241,"column_start":5,"column_end":8}},{"value":"/ # Unsafety","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":251587,"byte_end":251601,"line_start":242,"line_end":242,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":251606,"byte_end":251609,"line_start":243,"line_end":243,"column_start":5,"column_end":8}},{"value":"/ If the queue is full this operation will leak a value (T's destructor won't run on","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":251614,"byte_end":251700,"line_start":244,"line_end":244,"column_start":5,"column_end":91}},{"value":"/ the value that got overwritten by `item`), *and* will allow the `dequeue` operation","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":251705,"byte_end":251792,"line_start":245,"line_end":245,"column_start":5,"column_end":92}},{"value":"/ to create a copy of `item`, which could result in `T`'s destructor running on `item`","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":251797,"byte_end":251885,"line_start":246,"line_end":246,"column_start":5,"column_end":93}},{"value":"/ twice.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":251890,"byte_end":251900,"line_start":247,"line_end":247,"column_start":5,"column_end":15}}]},{"kind":"Method","id":{"krate":0,"index":2059},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":253495,"byte_end":253512,"line_start":289,"line_end":289,"column_start":19,"column_end":36},"name":"dequeue_unchecked","qualname":"<Queue<T, N>>::dequeue_unchecked","value":"pub unsafe fn dequeue_unchecked(&mut Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the item in the front of the queue, without checking if there is something in the\n queue","sig":null,"attributes":[{"value":"/ Returns the item in the front of the queue, without checking if there is something in the","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":253255,"byte_end":253348,"line_start":283,"line_end":283,"column_start":5,"column_end":98}},{"value":"/ queue","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":253353,"byte_end":253362,"line_start":284,"line_end":284,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":253367,"byte_end":253370,"line_start":285,"line_end":285,"column_start":5,"column_end":8}},{"value":"/ # Unsafety","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":253375,"byte_end":253389,"line_start":286,"line_end":286,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":253394,"byte_end":253397,"line_start":287,"line_end":287,"column_start":5,"column_end":8}},{"value":"/ If the queue is empty this operation will return uninitialized memory.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":253402,"byte_end":253476,"line_start":288,"line_end":288,"column_start":5,"column_end":79}}]},{"kind":"Method","id":{"krate":0,"index":2060},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":253648,"byte_end":253653,"line_start":294,"line_end":294,"column_start":12,"column_end":17},"name":"split","qualname":"<Queue<T, N>>::split","value":"pub fn split(&mut Self) -> (Producer<, T, >, Consumer<, T, >)","parent":null,"children":[],"decl_id":null,"docs":" Splits a queue into producer and consumer endpoints\n","sig":null,"attributes":[{"value":"/ Splits a queue into producer and consumer endpoints","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":253581,"byte_end":253636,"line_start":293,"line_end":293,"column_start":5,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":2078},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":254666,"byte_end":254670,"line_start":336,"line_end":336,"column_start":12,"column_end":16},"name":"Iter","qualname":"::spsc::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":2082},{"krate":0,"index":2083},{"krate":0,"index":2084}],"decl_id":null,"docs":" An iterator over the items of a queue\n","sig":null,"attributes":[{"value":"/ An iterator over the items of a queue","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":254613,"byte_end":254654,"line_start":335,"line_end":335,"column_start":1,"column_end":42}}]},{"kind":"Struct","id":{"krate":0,"index":2090},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":255020,"byte_end":255027,"line_start":353,"line_end":353,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::spsc::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":2094},{"krate":0,"index":2095},{"krate":0,"index":2096}],"decl_id":null,"docs":" A mutable iterator over the items of a queue\n","sig":null,"attributes":[{"value":"/ A mutable iterator over the items of a queue","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":254960,"byte_end":255008,"line_start":352,"line_end":352,"column_start":1,"column_end":49}}]},{"kind":"Struct","id":{"krate":0,"index":2151},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":258469,"byte_end":258477,"line_start":486,"line_end":486,"column_start":12,"column_end":20},"name":"Consumer","qualname":"::spsc::Consumer","value":"Consumer {  }","parent":null,"children":[{"krate":0,"index":2155}],"decl_id":null,"docs":" A queue \"consumer\"; it can dequeue items from the queue\n NOTE the consumer semantically owns the `head` pointer of the queue\n","sig":null,"attributes":[{"value":"/ A queue \"consumer\"; it can dequeue items from the queue","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":258326,"byte_end":258385,"line_start":484,"line_end":484,"column_start":1,"column_end":60}},{"value":"/ NOTE the consumer semantically owns the `head` pointer of the queue","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":258386,"byte_end":258457,"line_start":485,"line_end":485,"column_start":1,"column_end":72}}]},{"kind":"Struct","id":{"krate":0,"index":2160},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":258755,"byte_end":258763,"line_start":494,"line_end":494,"column_start":12,"column_end":20},"name":"Producer","qualname":"::spsc::Producer","value":"Producer {  }","parent":null,"children":[{"krate":0,"index":2164}],"decl_id":null,"docs":" A queue \"producer\"; it can enqueue items into the queue\n NOTE the producer semantically owns the `tail` pointer of the queue\n","sig":null,"attributes":[{"value":"/ A queue \"producer\"; it can enqueue items into the queue","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":258612,"byte_end":258671,"line_start":492,"line_end":492,"column_start":1,"column_end":60}},{"value":"/ NOTE the producer semantically owns the `tail` pointer of the queue","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":258672,"byte_end":258743,"line_start":493,"line_end":493,"column_start":1,"column_end":72}}]},{"kind":"Method","id":{"krate":0,"index":2173},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":259056,"byte_end":259063,"line_start":503,"line_end":503,"column_start":12,"column_end":19},"name":"dequeue","qualname":"<Consumer>::dequeue","value":"pub fn dequeue(&mut Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the item in the front of the queue, or `None` if the queue is empty\n","sig":null,"attributes":[{"value":"/ Returns the item in the front of the queue, or `None` if the queue is empty","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":258951,"byte_end":259030,"line_start":501,"line_end":501,"column_start":5,"column_end":84}},{"value":"inline","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":259035,"byte_end":259044,"line_start":502,"line_end":502,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2174},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":259344,"byte_end":259361,"line_start":512,"line_end":512,"column_start":19,"column_end":36},"name":"dequeue_unchecked","qualname":"<Consumer>::dequeue_unchecked","value":"pub unsafe fn dequeue_unchecked(&mut Self) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the item in the front of the queue, without checking if there are elements in the\n queue","sig":null,"attributes":[{"value":"/ Returns the item in the front of the queue, without checking if there are elements in the","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":259144,"byte_end":259237,"line_start":507,"line_end":507,"column_start":5,"column_end":98}},{"value":"/ queue","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":259242,"byte_end":259251,"line_start":508,"line_end":508,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":259256,"byte_end":259259,"line_start":509,"line_end":509,"column_start":5,"column_end":8}},{"value":"/ See [`Queue::dequeue_unchecked`] for safety","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":259264,"byte_end":259311,"line_start":510,"line_end":510,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":259316,"byte_end":259325,"line_start":511,"line_end":511,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2175},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":259590,"byte_end":259595,"line_start":519,"line_end":519,"column_start":12,"column_end":17},"name":"ready","qualname":"<Consumer>::ready","value":"pub fn ready(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns if there are any items to dequeue. When this returns `true`, at least the\n first subsequent dequeue will succeed\n","sig":null,"attributes":[{"value":"/ Returns if there are any items to dequeue. When this returns `true`, at least the","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":259433,"byte_end":259518,"line_start":516,"line_end":516,"column_start":5,"column_end":90}},{"value":"/ first subsequent dequeue will succeed","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":259523,"byte_end":259564,"line_start":517,"line_end":517,"column_start":5,"column_end":46}},{"value":"inline","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":259569,"byte_end":259578,"line_start":518,"line_end":518,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2176},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":259725,"byte_end":259728,"line_start":525,"line_end":525,"column_start":12,"column_end":15},"name":"len","qualname":"<Consumer>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in the queue\n","sig":null,"attributes":[{"value":"/ Returns the number of elements in the queue","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":259652,"byte_end":259699,"line_start":523,"line_end":523,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":259704,"byte_end":259713,"line_start":524,"line_end":524,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2177},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":259867,"byte_end":259875,"line_start":531,"line_end":531,"column_start":12,"column_end":20},"name":"capacity","qualname":"<Consumer>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the maximum number of elements the queue can hold\n","sig":null,"attributes":[{"value":"/ Returns the maximum number of elements the queue can hold","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":259780,"byte_end":259841,"line_start":529,"line_end":529,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":259846,"byte_end":259855,"line_start":530,"line_end":530,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2178},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":260480,"byte_end":260484,"line_start":551,"line_end":551,"column_start":12,"column_end":16},"name":"peek","qualname":"<Consumer>::peek","value":"pub fn peek(&Self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Returns the item in the front of the queue without dequeuing, or `None` if the queue is\n empty","sig":null,"attributes":[{"value":"/ Returns the item in the front of the queue without dequeuing, or `None` if the queue is","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":259932,"byte_end":260023,"line_start":535,"line_end":535,"column_start":5,"column_end":96}},{"value":"/ empty","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":260028,"byte_end":260037,"line_start":536,"line_end":536,"column_start":5,"column_end":14}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":260042,"byte_end":260045,"line_start":537,"line_end":537,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":260050,"byte_end":260064,"line_start":538,"line_end":538,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":260069,"byte_end":260076,"line_start":539,"line_end":539,"column_start":5,"column_end":12}},{"value":"/ use heapless::spsc::Queue;","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":260081,"byte_end":260111,"line_start":540,"line_end":540,"column_start":5,"column_end":35}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":260116,"byte_end":260119,"line_start":541,"line_end":541,"column_start":5,"column_end":8}},{"value":"/ let mut queue: Queue<u8, 235> = Queue::new();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":260124,"byte_end":260173,"line_start":542,"line_end":542,"column_start":5,"column_end":54}},{"value":"/ let (mut producer, mut consumer) = queue.split();","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":260178,"byte_end":260231,"line_start":543,"line_end":543,"column_start":5,"column_end":58}},{"value":"/ assert_eq!(None, consumer.peek());","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":260236,"byte_end":260274,"line_start":544,"line_end":544,"column_start":5,"column_end":43}},{"value":"/ producer.enqueue(1);","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":260279,"byte_end":260303,"line_start":545,"line_end":545,"column_start":5,"column_end":29}},{"value":"/ assert_eq!(Some(&1), consumer.peek());","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":260308,"byte_end":260350,"line_start":546,"line_end":546,"column_start":5,"column_end":47}},{"value":"/ assert_eq!(Some(1), consumer.dequeue());","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":260355,"byte_end":260399,"line_start":547,"line_end":547,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(None, consumer.peek());","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":260404,"byte_end":260442,"line_start":548,"line_end":548,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":260447,"byte_end":260454,"line_start":549,"line_end":549,"column_start":5,"column_end":12}},{"value":"inline","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":260459,"byte_end":260468,"line_start":550,"line_end":550,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2183},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":260707,"byte_end":260714,"line_start":559,"line_end":559,"column_start":12,"column_end":19},"name":"enqueue","qualname":"<Producer>::enqueue","value":"pub fn enqueue(&mut Self, T) -> Result<(), T>","parent":null,"children":[],"decl_id":null,"docs":" Adds an `item` to the end of the queue, returns back the `item` if the queue is full\n","sig":null,"attributes":[{"value":"/ Adds an `item` to the end of the queue, returns back the `item` if the queue is full","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":260593,"byte_end":260681,"line_start":557,"line_end":557,"column_start":5,"column_end":93}},{"value":"inline","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":260686,"byte_end":260695,"line_start":558,"line_end":558,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2184},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":260984,"byte_end":261001,"line_start":567,"line_end":567,"column_start":19,"column_end":36},"name":"enqueue_unchecked","qualname":"<Producer>::enqueue_unchecked","value":"pub unsafe fn enqueue_unchecked(&mut Self, T)","parent":null,"children":[],"decl_id":null,"docs":" Adds an `item` to the end of the queue, without checking if the queue is full","sig":null,"attributes":[{"value":"/ Adds an `item` to the end of the queue, without checking if the queue is full","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":260810,"byte_end":260891,"line_start":563,"line_end":563,"column_start":5,"column_end":86}},{"value":"/","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":260896,"byte_end":260899,"line_start":564,"line_end":564,"column_start":5,"column_end":8}},{"value":"/ See [`Queue::enqueue_unchecked`] for safety","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":260904,"byte_end":260951,"line_start":565,"line_end":565,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":260956,"byte_end":260965,"line_start":566,"line_end":566,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2185},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":261245,"byte_end":261250,"line_start":574,"line_end":574,"column_start":12,"column_end":17},"name":"ready","qualname":"<Producer>::ready","value":"pub fn ready(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns if there is any space to enqueue a new item. When this returns true, at\n least the first subsequent enqueue will succeed.\n","sig":null,"attributes":[{"value":"/ Returns if there is any space to enqueue a new item. When this returns true, at","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":261079,"byte_end":261162,"line_start":571,"line_end":571,"column_start":5,"column_end":88}},{"value":"/ least the first subsequent enqueue will succeed.","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":261167,"byte_end":261219,"line_start":572,"line_end":572,"column_start":5,"column_end":57}},{"value":"inline","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":261224,"byte_end":261233,"line_start":573,"line_end":573,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2186},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":261379,"byte_end":261382,"line_start":580,"line_end":580,"column_start":12,"column_end":15},"name":"len","qualname":"<Producer>::len","value":"pub fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in the queue\n","sig":null,"attributes":[{"value":"/ Returns the number of elements in the queue","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":261306,"byte_end":261353,"line_start":578,"line_end":578,"column_start":5,"column_end":52}},{"value":"inline","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":261358,"byte_end":261367,"line_start":579,"line_end":579,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":2187},"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":261521,"byte_end":261529,"line_start":586,"line_end":586,"column_start":12,"column_end":20},"name":"capacity","qualname":"<Producer>::capacity","value":"pub fn capacity(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the maximum number of elements the queue can hold\n","sig":null,"attributes":[{"value":"/ Returns the maximum number of elements the queue can hold","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":261434,"byte_end":261495,"line_start":584,"line_end":584,"column_start":5,"column_end":66}},{"value":"inline","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":261500,"byte_end":261509,"line_start":585,"line_end":585,"column_start":5,"column_end":14}}]}],"impls":[{"id":0,"kind":"Inherent","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":5642,"byte_end":5647,"line_start":54,"line_end":54,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88},{"krate":0,"index":89},{"krate":0,"index":90},{"krate":0,"index":91},{"krate":0,"index":92},{"krate":0,"index":93},{"krate":0,"index":94},{"krate":0,"index":95},{"krate":0,"index":96},{"krate":0,"index":97},{"krate":0,"index":98},{"krate":0,"index":99},{"krate":0,"index":100},{"krate":0,"index":101},{"krate":0,"index":102},{"krate":0,"index":103},{"krate":0,"index":104},{"krate":0,"index":105},{"krate":0,"index":106}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":15145,"byte_end":15150,"line_start":363,"line_end":363,"column_start":37,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":110}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":15248,"byte_end":15253,"line_start":369,"line_end":369,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":114}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":15560,"byte_end":15565,"line_start":377,"line_end":377,"column_start":52,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":118}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":15931,"byte_end":15939,"line_start":392,"line_end":392,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":122},{"krate":0,"index":123}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":16095,"byte_end":16100,"line_start":399,"line_end":399,"column_start":42,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":127},{"krate":0,"index":128},{"krate":0,"index":129}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":16583,"byte_end":16587,"line_start":420,"line_end":420,"column_start":42,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":134},{"krate":0,"index":135},{"krate":0,"index":136}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":17332,"byte_end":17336,"line_start":448,"line_end":448,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":141}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":17749,"byte_end":17753,"line_start":462,"line_end":462,"column_start":51,"column_end":55},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":17813,"byte_end":17817,"line_start":463,"line_end":463,"column_start":47,"column_end":51},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":18153,"byte_end":18160,"line_start":476,"line_end":476,"column_start":42,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":163},{"krate":0,"index":164},{"krate":0,"index":165}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":18911,"byte_end":18918,"line_start":504,"line_end":504,"column_start":53,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":170}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":19333,"byte_end":19340,"line_start":518,"line_end":518,"column_start":51,"column_end":58},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":19400,"byte_end":19407,"line_start":519,"line_end":519,"column_start":47,"column_end":54},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":19861,"byte_end":19866,"line_start":539,"line_end":539,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":196}],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":29465,"byte_end":29478,"line_start":43,"line_end":43,"column_start":25,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":223},{"krate":0,"index":224},{"krate":0,"index":226}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":30340,"byte_end":30353,"line_start":78,"line_end":78,"column_start":25,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":230},{"krate":0,"index":232}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Inherent","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":31133,"byte_end":31146,"line_start":109,"line_end":109,"column_start":25,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":236},{"krate":0,"index":237},{"krate":0,"index":238},{"krate":0,"index":239},{"krate":0,"index":240},{"krate":0,"index":241},{"krate":0,"index":242}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":34282,"byte_end":34295,"line_start":218,"line_end":218,"column_start":39,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":247}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":34526,"byte_end":34539,"line_start":229,"line_end":229,"column_start":47,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":253}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":34754,"byte_end":34767,"line_start":241,"line_end":241,"column_start":34,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":258}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":35026,"byte_end":35039,"line_start":252,"line_end":252,"column_start":35,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":262},{"krate":0,"index":263}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":35174,"byte_end":35187,"line_start":260,"line_end":260,"column_start":40,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":267}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":35302,"byte_end":35315,"line_start":267,"line_end":267,"column_start":40,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":271}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":35499,"byte_end":35512,"line_start":276,"line_end":276,"column_start":37,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":275}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":35833,"byte_end":35846,"line_start":290,"line_end":290,"column_start":42,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":280},{"krate":0,"index":281}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":41553,"byte_end":41562,"line_start":53,"line_end":53,"column_start":6,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":329},{"krate":0,"index":330}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":42332,"byte_end":42335,"line_start":81,"line_end":81,"column_start":6,"column_end":9},"value":"","parent":null,"children":[{"krate":0,"index":332},{"krate":0,"index":333},{"krate":0,"index":334}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Inherent","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":43325,"byte_end":43332,"line_start":125,"line_end":125,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":356}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Inherent","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":43543,"byte_end":43550,"line_start":136,"line_end":136,"column_start":28,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":363},{"krate":0,"index":364},{"krate":0,"index":365},{"krate":0,"index":367},{"krate":0,"index":368},{"krate":0,"index":369},{"krate":0,"index":370}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":49474,"byte_end":49481,"line_start":303,"line_end":303,"column_start":38,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":375}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Inherent","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":51736,"byte_end":51744,"line_start":368,"line_end":368,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":388}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Inherent","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":52119,"byte_end":52127,"line_start":382,"line_end":382,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":394},{"krate":0,"index":395},{"krate":0,"index":398},{"krate":0,"index":401},{"krate":0,"index":404},{"krate":0,"index":405},{"krate":0,"index":406},{"krate":0,"index":407},{"krate":0,"index":408},{"krate":0,"index":409},{"krate":0,"index":412},{"krate":0,"index":414},{"krate":0,"index":417},{"krate":0,"index":418},{"krate":0,"index":420},{"krate":0,"index":423},{"krate":0,"index":425}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":62222,"byte_end":62230,"line_start":730,"line_end":730,"column_start":60,"column_end":68},"value":"","parent":null,"children":[{"krate":0,"index":433},{"krate":0,"index":434}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":62504,"byte_end":62512,"line_start":743,"line_end":743,"column_start":63,"column_end":71},"value":"","parent":null,"children":[{"krate":0,"index":442}],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":62758,"byte_end":62766,"line_start":754,"line_end":754,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":448}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":63040,"byte_end":63048,"line_start":768,"line_end":768,"column_start":46,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":454}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":63305,"byte_end":63313,"line_start":779,"line_end":779,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":460}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":63616,"byte_end":63624,"line_start":793,"line_end":793,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":468}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":63982,"byte_end":63990,"line_start":808,"line_end":808,"column_start":38,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":64112,"byte_end":64120,"line_start":816,"line_end":816,"column_start":50,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":481}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":64434,"byte_end":64442,"line_start":831,"line_end":831,"column_start":62,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":489}],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":64767,"byte_end":64775,"line_start":845,"line_end":845,"column_start":56,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":497}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":65676,"byte_end":65680,"line_start":890,"line_end":890,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":526},{"krate":0,"index":527}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":65875,"byte_end":65879,"line_start":898,"line_end":898,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":533}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":66099,"byte_end":66106,"line_start":910,"line_end":910,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":543},{"krate":0,"index":544}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Inherent","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":70409,"byte_end":70417,"line_start":81,"line_end":81,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":592}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Inherent","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":70617,"byte_end":70625,"line_start":90,"line_end":90,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":597},{"krate":0,"index":598},{"krate":0,"index":599},{"krate":0,"index":603},{"krate":0,"index":608},{"krate":0,"index":612},{"krate":0,"index":617},{"krate":0,"index":618},{"krate":0,"index":619},{"krate":0,"index":620},{"krate":0,"index":622},{"krate":0,"index":626},{"krate":0,"index":630},{"krate":0,"index":633},{"krate":0,"index":636}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":81029,"byte_end":81037,"line_start":455,"line_end":455,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":642}],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":81236,"byte_end":81244,"line_start":467,"line_end":467,"column_start":43,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":647}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":81476,"byte_end":81484,"line_start":477,"line_end":477,"column_start":40,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":652}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":81737,"byte_end":81745,"line_start":490,"line_end":490,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":659}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":81990,"byte_end":81998,"line_start":501,"line_end":501,"column_start":42,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":664}],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":82267,"byte_end":82275,"line_start":514,"line_end":514,"column_start":50,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":672}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":82546,"byte_end":82554,"line_start":527,"line_end":527,"column_start":48,"column_end":56},"value":"","parent":null,"children":[{"krate":0,"index":678}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":83133,"byte_end":83137,"line_start":559,"line_end":559,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":695},{"krate":0,"index":696}],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":83290,"byte_end":83294,"line_start":567,"line_end":567,"column_start":23,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":701}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":83603,"byte_end":83613,"line_start":584,"line_end":584,"column_start":45,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":714},{"krate":0,"index":715}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":84110,"byte_end":84122,"line_start":610,"line_end":610,"column_start":45,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":728},{"krate":0,"index":729}],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Inherent","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":84796,"byte_end":84805,"line_start":12,"line_end":12,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":762}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Inherent","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":85294,"byte_end":85303,"line_start":31,"line_end":31,"column_start":28,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":767},{"krate":0,"index":768},{"krate":0,"index":769},{"krate":0,"index":770},{"krate":0,"index":774},{"krate":0,"index":778},{"krate":0,"index":779},{"krate":0,"index":781},{"krate":0,"index":782},{"krate":0,"index":783},{"krate":0,"index":784},{"krate":0,"index":787},{"krate":0,"index":792},{"krate":0,"index":795}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":93447,"byte_end":93456,"line_start":348,"line_end":348,"column_start":57,"column_end":66},"value":"","parent":null,"children":[{"krate":0,"index":804},{"krate":0,"index":805}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":93699,"byte_end":93708,"line_start":360,"line_end":360,"column_start":60,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":812}],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":93925,"byte_end":93934,"line_start":370,"line_end":370,"column_start":40,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":817}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":94056,"byte_end":94065,"line_start":379,"line_end":379,"column_start":38,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":822}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":94263,"byte_end":94272,"line_start":391,"line_end":391,"column_start":43,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":827}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":94509,"byte_end":94518,"line_start":401,"line_end":401,"column_start":53,"column_end":62},"value":"","parent":null,"children":[{"krate":0,"index":832}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":94888,"byte_end":94896,"line_start":422,"line_end":422,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":843},{"krate":0,"index":844}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":95356,"byte_end":95360,"line_start":448,"line_end":448,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":862},{"krate":0,"index":863}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":95542,"byte_end":95546,"line_start":456,"line_end":456,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":869}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":95696,"byte_end":95705,"line_start":464,"line_end":464,"column_start":37,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":874}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":96027,"byte_end":96034,"line_start":477,"line_end":477,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":884},{"krate":0,"index":885}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":96282,"byte_end":96291,"line_start":485,"line_end":485,"column_start":80,"column_end":89},"value":"","parent":null,"children":[{"krate":0,"index":892}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":96599,"byte_end":96608,"line_start":498,"line_end":498,"column_start":35,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Inherent","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":97791,"byte_end":97797,"line_start":12,"line_end":12,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":930},{"krate":0,"index":931},{"krate":0,"index":932},{"krate":0,"index":933},{"krate":0,"index":934},{"krate":0,"index":935},{"krate":0,"index":936},{"krate":0,"index":937},{"krate":0,"index":940},{"krate":0,"index":941},{"krate":0,"index":942}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":104572,"byte_end":104578,"line_start":286,"line_end":286,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":945}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":104683,"byte_end":104689,"line_start":292,"line_end":292,"column_start":44,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":949}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":104859,"byte_end":104865,"line_start":300,"line_end":300,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":952},{"krate":0,"index":953}],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":105064,"byte_end":105070,"line_start":310,"line_end":310,"column_start":32,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":956}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":105211,"byte_end":105217,"line_start":318,"line_end":318,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":959}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":105375,"byte_end":105381,"line_start":324,"line_end":324,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":962}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":105539,"byte_end":105545,"line_start":330,"line_end":330,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":965}],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":105714,"byte_end":105720,"line_start":337,"line_end":337,"column_start":39,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":969}],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":105891,"byte_end":105897,"line_start":344,"line_end":344,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":973},{"krate":0,"index":975}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":106180,"byte_end":106186,"line_start":354,"line_end":354,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":979},{"krate":0,"index":980}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":106316,"byte_end":106322,"line_start":362,"line_end":362,"column_start":40,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":983}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":106441,"byte_end":106447,"line_start":368,"line_end":368,"column_start":37,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":986}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":106557,"byte_end":106563,"line_start":375,"line_end":375,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":989}],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":106713,"byte_end":106719,"line_start":382,"line_end":382,"column_start":66,"column_end":72},"value":"","parent":null,"children":[{"krate":0,"index":993},{"krate":0,"index":994}],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":106958,"byte_end":106964,"line_start":393,"line_end":393,"column_start":41,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":997},{"krate":0,"index":998}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":107234,"byte_end":107240,"line_start":405,"line_end":405,"column_start":42,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1001},{"krate":0,"index":1002}],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":108050,"byte_end":108056,"line_start":440,"line_end":440,"column_start":29,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":108130,"byte_end":108136,"line_start":442,"line_end":442,"column_start":67,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":1016}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":108314,"byte_end":108320,"line_start":449,"line_end":449,"column_start":30,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1019}],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Inherent","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":114608,"byte_end":114611,"line_start":41,"line_end":41,"column_start":25,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":1062},{"krate":0,"index":1063},{"krate":0,"index":1065},{"krate":0,"index":1066},{"krate":0,"index":1067},{"krate":0,"index":1068},{"krate":0,"index":1072},{"krate":0,"index":1073},{"krate":0,"index":1074},{"krate":0,"index":1075},{"krate":0,"index":1077},{"krate":0,"index":1078},{"krate":0,"index":1079},{"krate":0,"index":1080},{"krate":0,"index":1081},{"krate":0,"index":1082},{"krate":0,"index":1083},{"krate":0,"index":1084},{"krate":0,"index":1085},{"krate":0,"index":1086},{"krate":0,"index":1087},{"krate":0,"index":1088},{"krate":0,"index":1089},{"krate":0,"index":1090},{"krate":0,"index":1091}],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":129982,"byte_end":129985,"line_start":542,"line_end":542,"column_start":37,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1095}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":130089,"byte_end":130092,"line_start":548,"line_end":548,"column_start":40,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1099}],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":130276,"byte_end":130279,"line_start":557,"line_end":557,"column_start":37,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1102}],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":130517,"byte_end":130520,"line_start":566,"line_end":566,"column_start":34,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1106}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":130776,"byte_end":130779,"line_start":575,"line_end":575,"column_start":57,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":1111},{"krate":0,"index":1112}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":130951,"byte_end":130954,"line_start":583,"line_end":583,"column_start":39,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1116}],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":131132,"byte_end":131135,"line_start":592,"line_end":592,"column_start":47,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1122}],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":131355,"byte_end":131358,"line_start":604,"line_end":604,"column_start":40,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1127}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":131548,"byte_end":131551,"line_start":613,"line_end":613,"column_start":42,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1132}],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":132153,"byte_end":132156,"line_start":640,"line_end":640,"column_start":45,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1151}],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":132734,"byte_end":132742,"line_start":664,"line_end":664,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1161},{"krate":0,"index":1162}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":133133,"byte_end":133141,"line_start":679,"line_end":679,"column_start":35,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1166}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":133625,"byte_end":133633,"line_start":700,"line_end":700,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":1170}],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":133972,"byte_end":133975,"line_start":711,"line_end":711,"column_start":42,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1174},{"krate":0,"index":1175},{"krate":0,"index":1176}],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":134203,"byte_end":134206,"line_start":720,"line_end":720,"column_start":72,"column_end":75},"value":"","parent":null,"children":[{"krate":0,"index":1182}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":134399,"byte_end":134402,"line_start":730,"line_end":730,"column_start":47,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1187}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":134591,"byte_end":134594,"line_start":740,"line_end":740,"column_start":48,"column_end":51},"value":"","parent":null,"children":[{"krate":0,"index":1192}],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":134792,"byte_end":134795,"line_start":750,"line_end":750,"column_start":52,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":1197}],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":135053,"byte_end":135056,"line_start":761,"line_end":761,"column_start":66,"column_end":69},"value":"","parent":null,"children":[{"krate":0,"index":1204}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":135314,"byte_end":135317,"line_start":772,"line_end":772,"column_start":67,"column_end":70},"value":"","parent":null,"children":[{"krate":0,"index":1212}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":135515,"byte_end":135518,"line_start":782,"line_end":782,"column_start":32,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":135610,"byte_end":135613,"line_start":784,"line_end":784,"column_start":70,"column_end":73},"value":"","parent":null,"children":[{"krate":0,"index":1221}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":135808,"byte_end":135811,"line_start":793,"line_end":793,"column_start":33,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1225}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":135982,"byte_end":135985,"line_start":803,"line_end":803,"column_start":40,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1229},{"krate":0,"index":1230}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":136123,"byte_end":136126,"line_start":811,"line_end":811,"column_start":43,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1234}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":136259,"byte_end":136262,"line_start":817,"line_end":817,"column_start":46,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1238}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":136384,"byte_end":136387,"line_start":824,"line_end":824,"column_start":46,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1242}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":136511,"byte_end":136514,"line_start":831,"line_end":831,"column_start":40,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1246}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":136629,"byte_end":136632,"line_start":838,"line_end":838,"column_start":40,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":1250}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":136750,"byte_end":136753,"line_start":845,"line_end":845,"column_start":35,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1254}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":147541,"byte_end":147544,"line_start":34,"line_end":34,"column_start":15,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1294}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":147625,"byte_end":147628,"line_start":40,"line_end":40,"column_start":15,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1296}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":147782,"byte_end":147785,"line_start":51,"line_end":51,"column_start":26,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":147814,"byte_end":147817,"line_start":52,"line_end":52,"column_start":26,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Inherent","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":149489,"byte_end":149499,"line_start":106,"line_end":106,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1311}],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Inherent","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":150114,"byte_end":150124,"line_start":128,"line_end":128,"column_start":28,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1316},{"krate":0,"index":1317},{"krate":0,"index":1318},{"krate":0,"index":1319},{"krate":0,"index":1320},{"krate":0,"index":1321},{"krate":0,"index":1322},{"krate":0,"index":1323},{"krate":0,"index":1324},{"krate":0,"index":1325},{"krate":0,"index":1326},{"krate":0,"index":1327},{"krate":0,"index":1328},{"krate":0,"index":1329}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Inherent","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":157574,"byte_end":157578,"line_start":388,"line_end":388,"column_start":13,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1339},{"krate":0,"index":1340},{"krate":0,"index":1341},{"krate":0,"index":1342},{"krate":0,"index":1343}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":159476,"byte_end":159483,"line_start":455,"line_end":455,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1355}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":159680,"byte_end":159687,"line_start":467,"line_end":467,"column_start":38,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":1360},{"krate":0,"index":1361}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":160006,"byte_end":160013,"line_start":480,"line_end":480,"column_start":41,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1366}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Inherent","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":160322,"byte_end":160329,"line_start":492,"line_end":492,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1372}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":160610,"byte_end":160614,"line_start":505,"line_end":505,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1376}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":160882,"byte_end":160892,"line_start":516,"line_end":516,"column_start":40,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1381}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":161028,"byte_end":161038,"line_start":526,"line_end":526,"column_start":38,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1386}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":161257,"byte_end":161267,"line_start":539,"line_end":539,"column_start":37,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":1391}],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":161419,"byte_end":161429,"line_start":545,"line_end":545,"column_start":43,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1396}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Inherent","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":169876,"byte_end":169885,"line_start":136,"line_end":136,"column_start":25,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1444},{"krate":0,"index":1445},{"krate":0,"index":1446},{"krate":0,"index":1448},{"krate":0,"index":1451},{"krate":0,"index":1452}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":171336,"byte_end":171345,"line_start":186,"line_end":186,"column_start":37,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1456}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":171450,"byte_end":171459,"line_start":192,"line_end":192,"column_start":41,"column_end":50},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Inherent","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":171570,"byte_end":171574,"line_start":199,"line_end":199,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1466}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Inherent","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":212742,"byte_end":212745,"line_start":183,"line_end":183,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1630},{"krate":0,"index":1631},{"krate":0,"index":1632},{"krate":0,"index":1633},{"krate":0,"index":1634}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":214302,"byte_end":214305,"line_start":243,"line_end":243,"column_start":28,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1638}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":214495,"byte_end":214498,"line_start":254,"line_end":254,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1641}],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":214848,"byte_end":214851,"line_start":270,"line_end":270,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1644}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":215027,"byte_end":215030,"line_start":280,"line_end":280,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1647},{"krate":0,"index":1648}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":215178,"byte_end":215181,"line_start":291,"line_end":291,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1651}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":215435,"byte_end":215438,"line_start":302,"line_end":302,"column_start":18,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1654}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":215713,"byte_end":215716,"line_start":319,"line_end":319,"column_start":16,"column_end":19},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":215778,"byte_end":215781,"line_start":326,"line_end":326,"column_start":18,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1659}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":215951,"byte_end":215954,"line_start":339,"line_end":339,"column_start":17,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1663}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":216110,"byte_end":216113,"line_start":349,"line_end":349,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1666}],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":216361,"byte_end":216364,"line_start":360,"line_end":360,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1669}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":216553,"byte_end":216556,"line_start":370,"line_end":370,"column_start":25,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":216634,"byte_end":216637,"line_start":377,"line_end":377,"column_start":25,"column_end":28},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":216709,"byte_end":216712,"line_start":384,"line_end":384,"column_start":19,"column_end":22},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Inherent","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":200356,"byte_end":200359,"line_start":103,"line_end":103,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1696}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Inherent","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":201035,"byte_end":201038,"line_start":133,"line_end":133,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1699}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Inherent","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":202022,"byte_end":202025,"line_start":165,"line_end":165,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1702}],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":202799,"byte_end":202802,"line_start":193,"line_end":193,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1705},{"krate":0,"index":1706}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":202946,"byte_end":202949,"line_start":204,"line_end":204,"column_start":22,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1709}],"docs":"","sig":null,"attributes":[]},{"id":166,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":203117,"byte_end":203120,"line_start":213,"line_end":213,"column_start":58,"column_end":61},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":167,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":203151,"byte_end":203154,"line_start":215,"line_end":215,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1714}],"docs":"","sig":null,"attributes":[]},{"id":168,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":203347,"byte_end":203350,"line_start":225,"line_end":225,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1717}],"docs":"","sig":null,"attributes":[]},{"id":169,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":203542,"byte_end":203545,"line_start":235,"line_end":235,"column_start":21,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":1721}],"docs":"","sig":null,"attributes":[]},{"id":170,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":204166,"byte_end":204169,"line_start":259,"line_end":259,"column_start":28,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":171,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":204246,"byte_end":204249,"line_start":266,"line_end":266,"column_start":28,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":172,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":204325,"byte_end":204328,"line_start":273,"line_end":273,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1731}],"docs":"","sig":null,"attributes":[]},{"id":173,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":204474,"byte_end":204477,"line_start":283,"line_end":283,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1735}],"docs":"","sig":null,"attributes":[]},{"id":174,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":204631,"byte_end":204634,"line_start":293,"line_end":293,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1738}],"docs":"","sig":null,"attributes":[]},{"id":175,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":204794,"byte_end":204797,"line_start":303,"line_end":303,"column_start":16,"column_end":19},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":176,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":204865,"byte_end":204868,"line_start":310,"line_end":310,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1743}],"docs":"","sig":null,"attributes":[]},{"id":177,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":205066,"byte_end":205069,"line_start":320,"line_end":320,"column_start":17,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1746}],"docs":"","sig":null,"attributes":[]},{"id":178,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":205230,"byte_end":205233,"line_start":330,"line_end":330,"column_start":18,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1749}],"docs":"","sig":null,"attributes":[]},{"id":179,"kind":"Inherent","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/llsc.rs","byte_start":217421,"byte_end":217425,"line_start":19,"line_end":19,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1775}],"docs":"","sig":null,"attributes":[]},{"id":180,"kind":"Inherent","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/llsc.rs","byte_start":217566,"byte_end":217571,"line_start":29,"line_end":29,"column_start":9,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":1781},{"krate":0,"index":1782},{"krate":0,"index":1783}],"docs":"","sig":null,"attributes":[]},{"id":181,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":187908,"byte_end":187912,"line_start":280,"line_end":280,"column_start":25,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":182,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":187944,"byte_end":187948,"line_start":282,"line_end":282,"column_start":25,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":183,"kind":"Inherent","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":187964,"byte_end":187968,"line_start":284,"line_end":284,"column_start":9,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":1794},{"krate":0,"index":1795},{"krate":0,"index":1796},{"krate":0,"index":1798},{"krate":0,"index":1799}],"docs":"","sig":null,"attributes":[]},{"id":184,"kind":"Inherent","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":192649,"byte_end":192652,"line_start":442,"line_end":442,"column_start":9,"column_end":12},"value":"","parent":null,"children":[{"krate":0,"index":1808}],"docs":"","sig":null,"attributes":[]},{"id":185,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":193274,"byte_end":193277,"line_start":468,"line_end":468,"column_start":28,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":186,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":193329,"byte_end":193332,"line_start":470,"line_end":470,"column_start":28,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":187,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":193408,"byte_end":193411,"line_start":472,"line_end":472,"column_start":52,"column_end":55},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":188,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":193445,"byte_end":193448,"line_start":474,"line_end":474,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1822}],"docs":"","sig":null,"attributes":[]},{"id":189,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":193575,"byte_end":193578,"line_start":483,"line_end":483,"column_start":27,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1826}],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":193709,"byte_end":193712,"line_start":492,"line_end":492,"column_start":19,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":1829},{"krate":0,"index":1830}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":194015,"byte_end":194018,"line_start":505,"line_end":505,"column_start":22,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":1833}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":194321,"byte_end":194324,"line_start":516,"line_end":516,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1836}],"docs":"","sig":null,"attributes":[]},{"id":193,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":194492,"byte_end":194495,"line_start":525,"line_end":525,"column_start":26,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":1839}],"docs":"","sig":null,"attributes":[]},{"id":194,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":194664,"byte_end":194667,"line_start":534,"line_end":534,"column_start":23,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":1842}],"docs":"","sig":null,"attributes":[]},{"id":195,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":194802,"byte_end":194805,"line_start":543,"line_end":543,"column_start":16,"column_end":19},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":196,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":194848,"byte_end":194851,"line_start":545,"line_end":545,"column_start":24,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1847}],"docs":"","sig":null,"attributes":[]},{"id":197,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":195024,"byte_end":195027,"line_start":554,"line_end":554,"column_start":17,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1850}],"docs":"","sig":null,"attributes":[]},{"id":198,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":195163,"byte_end":195166,"line_start":563,"line_end":563,"column_start":18,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":1853}],"docs":"","sig":null,"attributes":[]},{"id":199,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":220900,"byte_end":220903,"line_start":59,"line_end":59,"column_start":15,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1890}],"docs":"","sig":null,"attributes":[]},{"id":200,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":220984,"byte_end":220987,"line_start":65,"line_end":65,"column_start":15,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":1892}],"docs":"","sig":null,"attributes":[]},{"id":201,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":221141,"byte_end":221144,"line_start":76,"line_end":76,"column_start":26,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":202,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":221173,"byte_end":221176,"line_start":77,"line_end":77,"column_start":26,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":203,"kind":"Inherent","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":224409,"byte_end":224425,"line_start":185,"line_end":185,"column_start":33,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1918},{"krate":0,"index":1919},{"krate":0,"index":1920},{"krate":0,"index":1921},{"krate":0,"index":1922},{"krate":0,"index":1923}],"docs":"","sig":null,"attributes":[]},{"id":204,"kind":"Inherent","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":226166,"byte_end":226182,"line_start":234,"line_end":234,"column_start":33,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1929},{"krate":0,"index":1930},{"krate":0,"index":1931},{"krate":0,"index":1932},{"krate":0,"index":1934},{"krate":0,"index":1936},{"krate":0,"index":1937},{"krate":0,"index":1938},{"krate":0,"index":1939}],"docs":"","sig":null,"attributes":[]},{"id":205,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":234718,"byte_end":234722,"line_start":525,"line_end":525,"column_start":50,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":1954},{"krate":0,"index":1955}],"docs":"","sig":null,"attributes":[]},{"id":206,"kind":"Inherent","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":235391,"byte_end":235398,"line_start":557,"line_end":557,"column_start":37,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1973},{"krate":0,"index":1974},{"krate":0,"index":1975}],"docs":"","sig":null,"attributes":[]},{"id":207,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":238051,"byte_end":238058,"line_start":645,"line_end":645,"column_start":42,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":1981}],"docs":"","sig":null,"attributes":[]},{"id":208,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":238416,"byte_end":238423,"line_start":660,"line_end":660,"column_start":43,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":1987},{"krate":0,"index":1988}],"docs":"","sig":null,"attributes":[]},{"id":209,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":238713,"byte_end":238720,"line_start":674,"line_end":674,"column_start":46,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":1994}],"docs":"","sig":null,"attributes":[]},{"id":210,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":239877,"byte_end":239893,"line_start":712,"line_end":712,"column_start":48,"column_end":64},"value":"","parent":null,"children":[{"krate":0,"index":2000}],"docs":"","sig":null,"attributes":[]},{"id":211,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":240158,"byte_end":240174,"line_start":723,"line_end":723,"column_start":42,"column_end":58},"value":"","parent":null,"children":[{"krate":0,"index":2006}],"docs":"","sig":null,"attributes":[]},{"id":212,"kind":"Inherent","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":247231,"byte_end":247236,"line_start":108,"line_end":108,"column_start":25,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":2041},{"krate":0,"index":2042},{"krate":0,"index":2043},{"krate":0,"index":2045},{"krate":0,"index":2046},{"krate":0,"index":2047},{"krate":0,"index":2048},{"krate":0,"index":2049},{"krate":0,"index":2050},{"krate":0,"index":2051},{"krate":0,"index":2052},{"krate":0,"index":2053},{"krate":0,"index":2054},{"krate":0,"index":2055},{"krate":0,"index":2056},{"krate":0,"index":2057},{"krate":0,"index":2058},{"krate":0,"index":2059},{"krate":0,"index":2060}],"docs":"","sig":null,"attributes":[]},{"id":213,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":253811,"byte_end":253816,"line_start":299,"line_end":299,"column_start":37,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":2064}],"docs":"","sig":null,"attributes":[]},{"id":214,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":253915,"byte_end":253920,"line_start":305,"line_end":305,"column_start":35,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":2068}],"docs":"","sig":null,"attributes":[]},{"id":215,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":254366,"byte_end":254371,"line_start":324,"line_end":324,"column_start":70,"column_end":75},"value":"","parent":null,"children":[{"krate":0,"index":2073}],"docs":"","sig":null,"attributes":[]},{"id":216,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":254585,"byte_end":254590,"line_start":333,"line_end":333,"column_start":32,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":217,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":254796,"byte_end":254800,"line_start":342,"line_end":342,"column_start":39,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":2089}],"docs":"","sig":null,"attributes":[]},{"id":218,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":255160,"byte_end":255164,"line_start":359,"line_end":359,"column_start":42,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":2101},{"krate":0,"index":2102}],"docs":"","sig":null,"attributes":[]},{"id":219,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":255597,"byte_end":255604,"line_start":376,"line_end":376,"column_start":42,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":2107},{"krate":0,"index":2108}],"docs":"","sig":null,"attributes":[]},{"id":220,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":256054,"byte_end":256058,"line_start":393,"line_end":393,"column_start":53,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":2113}],"docs":"","sig":null,"attributes":[]},{"id":221,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":256549,"byte_end":256556,"line_start":408,"line_end":408,"column_start":53,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":2118}],"docs":"","sig":null,"attributes":[]},{"id":222,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":257030,"byte_end":257035,"line_start":423,"line_end":423,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":2122}],"docs":"","sig":null,"attributes":[]},{"id":223,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":257231,"byte_end":257236,"line_start":433,"line_end":433,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2126}],"docs":"","sig":null,"attributes":[]},{"id":224,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":257434,"byte_end":257439,"line_start":442,"line_end":442,"column_start":40,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":2130}],"docs":"","sig":null,"attributes":[]},{"id":225,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":257695,"byte_end":257700,"line_start":454,"line_end":454,"column_start":42,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":2135}],"docs":"","sig":null,"attributes":[]},{"id":226,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":258575,"byte_end":258583,"line_start":490,"line_end":490,"column_start":45,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":227,"kind":"Direct","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":258861,"byte_end":258869,"line_start":498,"line_end":498,"column_start":45,"column_end":53},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":228,"kind":"Inherent","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":258926,"byte_end":258934,"line_start":500,"line_end":500,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2173},{"krate":0,"index":2174},{"krate":0,"index":2175},{"krate":0,"index":2176},{"krate":0,"index":2177},{"krate":0,"index":2178}],"docs":"","sig":null,"attributes":[]},{"id":229,"kind":"Inherent","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":260568,"byte_end":260576,"line_start":556,"line_end":556,"column_start":29,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":2183},{"krate":0,"index":2184},{"krate":0,"index":2185},{"krate":0,"index":2186},{"krate":0,"index":2187}],"docs":"","sig":null,"attributes":[]},{"id":230,"kind":"Inherent","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sealed.rs","byte_start":270430,"byte_end":270436,"line_start":37,"line_end":37,"column_start":38,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":2212},{"krate":0,"index":2213},{"krate":0,"index":2214},{"krate":0,"index":2215},{"krate":0,"index":2216},{"krate":0,"index":2217},{"krate":0,"index":2218}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":3899,"byte_end":3910,"line_start":101,"line_end":101,"column_start":9,"column_end":20},"ref_id":{"krate":0,"index":1255}},{"kind":"Mod","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":4000,"byte_end":4004,"line_start":105,"line_end":105,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1405}},{"kind":"Mod","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":4052,"byte_end":4056,"line_start":107,"line_end":107,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":1471}},{"kind":"Mod","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":187137,"byte_end":187146,"line_start":250,"line_end":250,"column_start":9,"column_end":18},"ref_id":{"krate":0,"index":1523}},{"kind":"Mod","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":198066,"byte_end":198069,"line_start":15,"line_end":15,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":1575}},{"kind":"Mod","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":4066,"byte_end":4084,"line_start":108,"line_end":108,"column_start":9,"column_end":27},"ref_id":{"krate":0,"index":1855}},{"kind":"Mod","span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/lib.rs","byte_start":4114,"byte_end":4118,"line_start":110,"line_end":110,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":2007}}],"macro_refs":[],"relations":[{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":5642,"byte_end":5647,"line_start":54,"line_end":54,"column_start":25,"column_end":30},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":69},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":15145,"byte_end":15150,"line_start":363,"line_end":363,"column_start":37,"column_end":42},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":69},"to":{"krate":1,"index":2997}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":15248,"byte_end":15253,"line_start":369,"line_end":369,"column_start":34,"column_end":39},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":69},"to":{"krate":1,"index":3258}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":15560,"byte_end":15565,"line_start":377,"line_end":377,"column_start":52,"column_end":57},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":69},"to":{"krate":1,"index":9558}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":15931,"byte_end":15939,"line_start":392,"line_end":392,"column_start":38,"column_end":46},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":2219},"to":{"krate":1,"index":7829}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":16095,"byte_end":16100,"line_start":399,"line_end":399,"column_start":42,"column_end":47},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":69},"to":{"krate":1,"index":7640}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":16583,"byte_end":16587,"line_start":420,"line_end":420,"column_start":42,"column_end":46},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":2229},"to":{"krate":1,"index":7829}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":17332,"byte_end":17336,"line_start":448,"line_end":448,"column_start":53,"column_end":57},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":2229},"to":{"krate":1,"index":7684}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":17749,"byte_end":17753,"line_start":462,"line_end":462,"column_start":51,"column_end":55},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":2229},"to":{"krate":1,"index":7709}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":17813,"byte_end":17817,"line_start":463,"line_end":463,"column_start":47,"column_end":51},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":2229},"to":{"krate":1,"index":8099}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":18153,"byte_end":18160,"line_start":476,"line_end":476,"column_start":42,"column_end":49},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":150},"to":{"krate":1,"index":7829}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":18911,"byte_end":18918,"line_start":504,"line_end":504,"column_start":53,"column_end":60},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":150},"to":{"krate":1,"index":7684}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":19333,"byte_end":19340,"line_start":518,"line_end":518,"column_start":51,"column_end":58},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":150},"to":{"krate":1,"index":7709}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":19400,"byte_end":19407,"line_start":519,"line_end":519,"column_start":47,"column_end":54},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":150},"to":{"krate":1,"index":8099}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/deque.rs","byte_start":19861,"byte_end":19866,"line_start":539,"line_end":539,"column_start":35,"column_end":40},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":69},"to":{"krate":1,"index":2640}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":29465,"byte_end":29478,"line_start":43,"line_end":43,"column_start":25,"column_end":38},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":213},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":30340,"byte_end":30353,"line_start":78,"line_end":78,"column_start":25,"column_end":38},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":213},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":31133,"byte_end":31146,"line_start":109,"line_end":109,"column_start":25,"column_end":38},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":213},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":34282,"byte_end":34295,"line_start":218,"line_end":218,"column_start":39,"column_end":52},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":213},"to":{"krate":1,"index":7649}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":34526,"byte_end":34539,"line_start":229,"line_end":229,"column_start":47,"column_end":60},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":213},"to":{"krate":1,"index":7649}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":34754,"byte_end":34767,"line_start":241,"line_end":241,"column_start":34,"column_end":47},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":213},"to":{"krate":1,"index":3258}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":35026,"byte_end":35039,"line_start":252,"line_end":252,"column_start":35,"column_end":48},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":213},"to":{"krate":1,"index":3234}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":35174,"byte_end":35187,"line_start":260,"line_end":260,"column_start":40,"column_end":53},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":213},"to":{"krate":1,"index":2916}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":35302,"byte_end":35315,"line_start":267,"line_end":267,"column_start":40,"column_end":53},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":213},"to":{"krate":1,"index":9558}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":35499,"byte_end":35512,"line_start":276,"line_end":276,"column_start":37,"column_end":50},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":213},"to":{"krate":1,"index":2997}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/histbuf.rs","byte_start":35833,"byte_end":35846,"line_start":290,"line_end":290,"column_start":42,"column_end":55},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":2245},"to":{"krate":1,"index":7829}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":41553,"byte_end":41562,"line_start":53,"line_end":53,"column_start":6,"column_end":15},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":2259},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":42332,"byte_end":42335,"line_start":81,"line_end":81,"column_start":6,"column_end":9},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":2282},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":43325,"byte_end":43332,"line_start":125,"line_end":125,"column_start":28,"column_end":35},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":345},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":43543,"byte_end":43550,"line_start":136,"line_end":136,"column_start":28,"column_end":35},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":345},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":49474,"byte_end":49481,"line_start":303,"line_end":303,"column_start":38,"column_end":45},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":345},"to":{"krate":1,"index":2640}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":51736,"byte_end":51744,"line_start":368,"line_end":368,"column_start":31,"column_end":39},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":376},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":52119,"byte_end":52127,"line_start":382,"line_end":382,"column_start":31,"column_end":39},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":376},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":62222,"byte_end":62230,"line_start":730,"line_end":730,"column_start":60,"column_end":68},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":376},"to":{"krate":1,"index":3319}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":62504,"byte_end":62512,"line_start":743,"line_end":743,"column_start":63,"column_end":71},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":376},"to":{"krate":1,"index":3323}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":62758,"byte_end":62766,"line_start":754,"line_end":754,"column_start":41,"column_end":49},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":376},"to":{"krate":1,"index":2640}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":63040,"byte_end":63048,"line_start":768,"line_end":768,"column_start":46,"column_end":54},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":376},"to":{"krate":1,"index":9558}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":63305,"byte_end":63313,"line_start":779,"line_end":779,"column_start":43,"column_end":51},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":376},"to":{"krate":1,"index":2997}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":63616,"byte_end":63624,"line_start":793,"line_end":793,"column_start":9,"column_end":17},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":376},"to":{"krate":1,"index":2670}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":63982,"byte_end":63990,"line_start":808,"line_end":808,"column_start":38,"column_end":46},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":376},"to":{"krate":1,"index":2675}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":64112,"byte_end":64120,"line_start":816,"line_end":816,"column_start":50,"column_end":58},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":376},"to":{"krate":1,"index":7649}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":64434,"byte_end":64442,"line_start":831,"line_end":831,"column_start":62,"column_end":70},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":376},"to":{"krate":1,"index":7649}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":64767,"byte_end":64775,"line_start":845,"line_end":845,"column_start":56,"column_end":64},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":376},"to":{"krate":1,"index":7636}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":65676,"byte_end":65680,"line_start":890,"line_end":890,"column_start":29,"column_end":33},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":517},"to":{"krate":1,"index":7829}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":65875,"byte_end":65879,"line_start":898,"line_end":898,"column_start":26,"column_end":30},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":517},"to":{"krate":1,"index":2640}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexmap.rs","byte_start":66099,"byte_end":66106,"line_start":910,"line_end":910,"column_start":29,"column_end":36},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":534},"to":{"krate":1,"index":7829}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":70409,"byte_end":70417,"line_start":81,"line_end":81,"column_start":28,"column_end":36},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":583},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":70617,"byte_end":70625,"line_start":90,"line_end":90,"column_start":28,"column_end":36},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":583},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":81029,"byte_end":81037,"line_start":455,"line_end":455,"column_start":38,"column_end":46},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":583},"to":{"krate":1,"index":2640}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":81236,"byte_end":81244,"line_start":467,"line_end":467,"column_start":43,"column_end":51},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":583},"to":{"krate":1,"index":9558}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":81476,"byte_end":81484,"line_start":477,"line_end":477,"column_start":40,"column_end":48},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":583},"to":{"krate":1,"index":2997}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":81737,"byte_end":81745,"line_start":490,"line_end":490,"column_start":9,"column_end":17},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":583},"to":{"krate":1,"index":2670}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":81990,"byte_end":81998,"line_start":501,"line_end":501,"column_start":42,"column_end":50},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":583},"to":{"krate":1,"index":7649}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":82267,"byte_end":82275,"line_start":514,"line_end":514,"column_start":50,"column_end":58},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":583},"to":{"krate":1,"index":7649}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":82546,"byte_end":82554,"line_start":527,"line_end":527,"column_start":48,"column_end":56},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":583},"to":{"krate":1,"index":7636}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":83133,"byte_end":83137,"line_start":559,"line_end":559,"column_start":26,"column_end":30},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":688},"to":{"krate":1,"index":7829}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":83290,"byte_end":83294,"line_start":567,"line_end":567,"column_start":23,"column_end":27},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":688},"to":{"krate":1,"index":2640}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":83603,"byte_end":83613,"line_start":584,"line_end":584,"column_start":45,"column_end":55},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":702},"to":{"krate":1,"index":7829}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/indexset.rs","byte_start":84110,"byte_end":84122,"line_start":610,"line_end":610,"column_start":45,"column_end":57},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":716},"to":{"krate":1,"index":7829}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":84796,"byte_end":84805,"line_start":12,"line_end":12,"column_start":28,"column_end":37},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":753},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":85294,"byte_end":85303,"line_start":31,"line_end":31,"column_start":28,"column_end":37},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":753},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":93447,"byte_end":93456,"line_start":348,"line_end":348,"column_start":57,"column_end":66},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":753},"to":{"krate":1,"index":3319}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":93699,"byte_end":93708,"line_start":360,"line_end":360,"column_start":60,"column_end":69},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":753},"to":{"krate":1,"index":3323}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":93925,"byte_end":93934,"line_start":370,"line_end":370,"column_start":40,"column_end":49},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":753},"to":{"krate":1,"index":2997}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":94056,"byte_end":94065,"line_start":379,"line_end":379,"column_start":38,"column_end":47},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":753},"to":{"krate":1,"index":2640}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":94263,"byte_end":94272,"line_start":391,"line_end":391,"column_start":43,"column_end":52},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":753},"to":{"krate":1,"index":9558}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":94509,"byte_end":94518,"line_start":401,"line_end":401,"column_start":53,"column_end":62},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":753},"to":{"krate":1,"index":7636}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":94888,"byte_end":94896,"line_start":422,"line_end":422,"column_start":41,"column_end":49},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":834},"to":{"krate":1,"index":7829}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":95356,"byte_end":95360,"line_start":448,"line_end":448,"column_start":29,"column_end":33},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":853},"to":{"krate":1,"index":7829}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":95542,"byte_end":95546,"line_start":456,"line_end":456,"column_start":26,"column_end":30},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":853},"to":{"krate":1,"index":2640}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":95696,"byte_end":95705,"line_start":464,"line_end":464,"column_start":37,"column_end":46},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":753},"to":{"krate":1,"index":3258}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":96027,"byte_end":96034,"line_start":477,"line_end":477,"column_start":29,"column_end":36},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":875},"to":{"krate":1,"index":7829}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":96282,"byte_end":96291,"line_start":485,"line_end":485,"column_start":80,"column_end":89},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":753},"to":{"krate":1,"index":2670}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/linear_map.rs","byte_start":96599,"byte_end":96608,"line_start":498,"line_end":498,"column_start":35,"column_end":44},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":753},"to":{"krate":1,"index":2675}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":97791,"byte_end":97797,"line_start":12,"line_end":12,"column_start":22,"column_end":28},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":925},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":104572,"byte_end":104578,"line_start":286,"line_end":286,"column_start":34,"column_end":40},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":925},"to":{"krate":1,"index":2997}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":104683,"byte_end":104689,"line_start":292,"line_end":292,"column_start":44,"column_end":50},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":925},"to":{"krate":1,"index":2925}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":104859,"byte_end":104865,"line_start":300,"line_end":300,"column_start":39,"column_end":45},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":925},"to":{"krate":1,"index":12149}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":105064,"byte_end":105070,"line_start":310,"line_end":310,"column_start":32,"column_end":38},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":925},"to":{"krate":1,"index":2640}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":105211,"byte_end":105217,"line_start":318,"line_end":318,"column_start":37,"column_end":43},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":925},"to":{"krate":1,"index":9558}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":105375,"byte_end":105381,"line_start":324,"line_end":324,"column_start":39,"column_end":45},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":925},"to":{"krate":1,"index":9565}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":105539,"byte_end":105545,"line_start":330,"line_end":330,"column_start":37,"column_end":43},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":925},"to":{"krate":1,"index":9765}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":105714,"byte_end":105720,"line_start":337,"line_end":337,"column_start":39,"column_end":45},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":925},"to":{"krate":4,"index":105}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":105891,"byte_end":105897,"line_start":344,"line_end":344,"column_start":37,"column_end":43},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":925},"to":{"krate":1,"index":9509}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":106180,"byte_end":106186,"line_start":354,"line_end":354,"column_start":37,"column_end":43},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":925},"to":{"krate":1,"index":3234}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":106316,"byte_end":106322,"line_start":362,"line_end":362,"column_start":40,"column_end":46},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":925},"to":{"krate":1,"index":3247}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":106441,"byte_end":106447,"line_start":368,"line_end":368,"column_start":37,"column_end":43},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":925},"to":{"krate":1,"index":2916}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":106557,"byte_end":106563,"line_start":375,"line_end":375,"column_start":38,"column_end":44},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":925},"to":{"krate":1,"index":2916}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":106713,"byte_end":106719,"line_start":382,"line_end":382,"column_start":66,"column_end":72},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":925},"to":{"krate":1,"index":2670}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":106958,"byte_end":106964,"line_start":393,"line_end":393,"column_start":41,"column_end":47},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":925},"to":{"krate":1,"index":2670}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":107234,"byte_end":107240,"line_start":405,"line_end":405,"column_start":42,"column_end":48},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":925},"to":{"krate":1,"index":2670}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":108050,"byte_end":108056,"line_start":440,"line_end":440,"column_start":29,"column_end":35},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":925},"to":{"krate":1,"index":2675}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":108130,"byte_end":108136,"line_start":442,"line_end":442,"column_start":67,"column_end":73},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":925},"to":{"krate":1,"index":2717}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/string.rs","byte_start":108314,"byte_end":108320,"line_start":449,"line_end":449,"column_start":30,"column_end":36},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":925},"to":{"krate":1,"index":2706}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":114608,"byte_end":114611,"line_start":41,"line_end":41,"column_start":25,"column_end":28},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":1053},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":129982,"byte_end":129985,"line_start":542,"line_end":542,"column_start":37,"column_end":40},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":1053},"to":{"krate":1,"index":2997}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":130089,"byte_end":130092,"line_start":548,"line_end":548,"column_start":40,"column_end":43},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":1053},"to":{"krate":1,"index":9558}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":130276,"byte_end":130279,"line_start":557,"line_end":557,"column_start":37,"column_end":40},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":1053},"to":{"krate":1,"index":9509}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":130517,"byte_end":130520,"line_start":566,"line_end":566,"column_start":34,"column_end":37},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":1053},"to":{"krate":1,"index":3258}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":130776,"byte_end":130779,"line_start":575,"line_end":575,"column_start":57,"column_end":60},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":1053},"to":{"krate":1,"index":2932}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":130951,"byte_end":130954,"line_start":583,"line_end":583,"column_start":39,"column_end":42},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":1053},"to":{"krate":1,"index":7649}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":131132,"byte_end":131135,"line_start":592,"line_end":592,"column_start":47,"column_end":50},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":1053},"to":{"krate":1,"index":7649}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":131355,"byte_end":131358,"line_start":604,"line_end":604,"column_start":40,"column_end":43},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":1053},"to":{"krate":1,"index":9765}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":131548,"byte_end":131551,"line_start":613,"line_end":613,"column_start":42,"column_end":45},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":1053},"to":{"krate":4,"index":105}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":132153,"byte_end":132156,"line_start":640,"line_end":640,"column_start":45,"column_end":48},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":1053},"to":{"krate":1,"index":7636}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":132734,"byte_end":132742,"line_start":664,"line_end":664,"column_start":38,"column_end":46},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":1153},"to":{"krate":1,"index":7829}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":133133,"byte_end":133141,"line_start":679,"line_end":679,"column_start":35,"column_end":43},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":1153},"to":{"krate":1,"index":2640}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":133625,"byte_end":133633,"line_start":700,"line_end":700,"column_start":34,"column_end":42},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":1153},"to":{"krate":1,"index":3258}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":133972,"byte_end":133975,"line_start":711,"line_end":711,"column_start":42,"column_end":45},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":1053},"to":{"krate":1,"index":7640}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":134203,"byte_end":134206,"line_start":720,"line_end":720,"column_start":72,"column_end":75},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":1053},"to":{"krate":1,"index":2670}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":134399,"byte_end":134402,"line_start":730,"line_end":730,"column_start":47,"column_end":50},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":1053},"to":{"krate":1,"index":2670}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":134591,"byte_end":134594,"line_start":740,"line_end":740,"column_start":48,"column_end":51},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":1053},"to":{"krate":1,"index":2670}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":134792,"byte_end":134795,"line_start":750,"line_end":750,"column_start":52,"column_end":55},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":1053},"to":{"krate":1,"index":2670}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":135053,"byte_end":135056,"line_start":761,"line_end":761,"column_start":66,"column_end":69},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":1053},"to":{"krate":1,"index":2670}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":135314,"byte_end":135317,"line_start":772,"line_end":772,"column_start":67,"column_end":70},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":1053},"to":{"krate":1,"index":2670}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":135515,"byte_end":135518,"line_start":782,"line_end":782,"column_start":32,"column_end":35},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":1053},"to":{"krate":1,"index":2675}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":135610,"byte_end":135613,"line_start":784,"line_end":784,"column_start":70,"column_end":73},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":1053},"to":{"krate":1,"index":2717}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":135808,"byte_end":135811,"line_start":793,"line_end":793,"column_start":33,"column_end":36},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":1053},"to":{"krate":1,"index":2706}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":135982,"byte_end":135985,"line_start":803,"line_end":803,"column_start":40,"column_end":43},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":1053},"to":{"krate":1,"index":3234}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":136123,"byte_end":136126,"line_start":811,"line_end":811,"column_start":43,"column_end":46},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":1053},"to":{"krate":1,"index":3247}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":136259,"byte_end":136262,"line_start":817,"line_end":817,"column_start":46,"column_end":49},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":1053},"to":{"krate":1,"index":2916}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":136384,"byte_end":136387,"line_start":824,"line_end":824,"column_start":46,"column_end":49},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":1053},"to":{"krate":1,"index":2919}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":136511,"byte_end":136514,"line_start":831,"line_end":831,"column_start":40,"column_end":43},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":1053},"to":{"krate":1,"index":2916}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":136629,"byte_end":136632,"line_start":838,"line_end":838,"column_start":40,"column_end":43},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":1053},"to":{"krate":1,"index":2919}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/vec.rs","byte_start":136750,"byte_end":136753,"line_start":845,"line_end":845,"column_start":35,"column_end":38},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":1053},"to":{"krate":1,"index":2640}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":147465,"byte_end":147471,"line_start":29,"line_end":29,"column_start":26,"column_end":32},"kind":"SuperTrait","from":{"krate":0,"index":1298},"to":{"krate":0,"index":1291}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":147541,"byte_end":147544,"line_start":34,"line_end":34,"column_start":15,"column_end":18},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":1289},"to":{"krate":0,"index":1291}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":147625,"byte_end":147628,"line_start":40,"line_end":40,"column_start":15,"column_end":18},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":1290},"to":{"krate":0,"index":1291}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":147782,"byte_end":147785,"line_start":51,"line_end":51,"column_start":26,"column_end":29},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":1290},"to":{"krate":0,"index":1298}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":147814,"byte_end":147817,"line_start":52,"line_end":52,"column_start":26,"column_end":29},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":1289},"to":{"krate":0,"index":1298}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":149489,"byte_end":149499,"line_start":106,"line_end":106,"column_start":28,"column_end":38},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":1301},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":150114,"byte_end":150124,"line_start":128,"line_end":128,"column_start":28,"column_end":38},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":1301},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":157574,"byte_end":157578,"line_start":388,"line_end":388,"column_start":13,"column_end":17},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":1330},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":159476,"byte_end":159483,"line_start":455,"line_end":455,"column_start":37,"column_end":44},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":1344},"to":{"krate":1,"index":3258}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":159680,"byte_end":159687,"line_start":467,"line_end":467,"column_start":38,"column_end":45},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":1344},"to":{"krate":1,"index":3234}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":160006,"byte_end":160013,"line_start":480,"line_end":480,"column_start":41,"column_end":48},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":1344},"to":{"krate":1,"index":3247}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":160322,"byte_end":160329,"line_start":492,"line_end":492,"column_start":32,"column_end":39},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":1344},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":160610,"byte_end":160614,"line_start":505,"line_end":505,"column_start":22,"column_end":26},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":1330},"to":{"krate":1,"index":3258}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":160882,"byte_end":160892,"line_start":516,"line_end":516,"column_start":40,"column_end":50},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":1301},"to":{"krate":1,"index":2997}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":161028,"byte_end":161038,"line_start":526,"line_end":526,"column_start":38,"column_end":48},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":1301},"to":{"krate":1,"index":2640}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":161257,"byte_end":161267,"line_start":539,"line_end":539,"column_start":37,"column_end":47},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":1301},"to":{"krate":1,"index":3258}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/binary_heap.rs","byte_start":161419,"byte_end":161429,"line_start":545,"line_end":545,"column_start":43,"column_end":53},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":1301},"to":{"krate":1,"index":9558}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":169876,"byte_end":169885,"line_start":136,"line_end":136,"column_start":25,"column_end":34},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":1434},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":171336,"byte_end":171345,"line_start":186,"line_end":186,"column_start":37,"column_end":46},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":1434},"to":{"krate":1,"index":2997}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":171450,"byte_end":171459,"line_start":192,"line_end":192,"column_start":41,"column_end":50},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":1434},"to":{"krate":1,"index":3031}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/mpmc.rs","byte_start":171570,"byte_end":171574,"line_start":199,"line_end":199,"column_start":9,"column_end":13},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":1460},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":212742,"byte_end":212745,"line_start":183,"line_end":183,"column_start":9,"column_end":12},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":1623},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":214302,"byte_end":214305,"line_start":243,"line_end":243,"column_start":28,"column_end":31},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":1623},"to":{"krate":1,"index":2916}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":214495,"byte_end":214498,"line_start":254,"line_end":254,"column_start":19,"column_end":22},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":1623},"to":{"krate":1,"index":2640}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":214848,"byte_end":214851,"line_start":270,"line_end":270,"column_start":24,"column_end":27},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":1623},"to":{"krate":1,"index":9558}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":215027,"byte_end":215030,"line_start":280,"line_end":280,"column_start":19,"column_end":22},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":1623},"to":{"krate":1,"index":3234}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":215178,"byte_end":215181,"line_start":291,"line_end":291,"column_start":26,"column_end":29},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":1623},"to":{"krate":1,"index":9565}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":215435,"byte_end":215438,"line_start":302,"line_end":302,"column_start":18,"column_end":21},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":1623},"to":{"krate":1,"index":3258}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":215713,"byte_end":215716,"line_start":319,"line_end":319,"column_start":16,"column_end":19},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":1623},"to":{"krate":1,"index":2675}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":215778,"byte_end":215781,"line_start":326,"line_end":326,"column_start":18,"column_end":21},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":1623},"to":{"krate":1,"index":9765}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":215951,"byte_end":215954,"line_start":339,"line_end":339,"column_start":17,"column_end":20},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":1623},"to":{"krate":1,"index":2706}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":216110,"byte_end":216113,"line_start":349,"line_end":349,"column_start":23,"column_end":26},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":1623},"to":{"krate":1,"index":2670}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":216361,"byte_end":216364,"line_start":360,"line_end":360,"column_start":24,"column_end":27},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":1623},"to":{"krate":1,"index":2717}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":216553,"byte_end":216556,"line_start":370,"line_end":370,"column_start":25,"column_end":28},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":1623},"to":{"krate":1,"index":3019}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":216634,"byte_end":216637,"line_start":377,"line_end":377,"column_start":25,"column_end":28},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":1623},"to":{"krate":1,"index":3031}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton/arc.rs","byte_start":216709,"byte_end":216712,"line_start":384,"line_end":384,"column_start":19,"column_end":22},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":1623},"to":{"krate":1,"index":3060}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":200356,"byte_end":200359,"line_start":103,"line_end":103,"column_start":9,"column_end":12},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":1689},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":201035,"byte_end":201038,"line_start":133,"line_end":133,"column_start":9,"column_end":12},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":1689},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":202022,"byte_end":202025,"line_start":165,"line_end":165,"column_start":9,"column_end":12},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":1689},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":202799,"byte_end":202802,"line_start":193,"line_end":193,"column_start":19,"column_end":22},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":1689},"to":{"krate":1,"index":3234}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":202946,"byte_end":202949,"line_start":204,"line_end":204,"column_start":22,"column_end":25},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":1689},"to":{"krate":1,"index":3247}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":203117,"byte_end":203120,"line_start":213,"line_end":213,"column_start":58,"column_end":61},"kind":{"Impl":{"id":166}},"from":{"krate":0,"index":1689},"to":{"krate":6,"index":7}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":203151,"byte_end":203154,"line_start":215,"line_end":215,"column_start":24,"column_end":27},"kind":{"Impl":{"id":167}},"from":{"krate":0,"index":1689},"to":{"krate":1,"index":9558}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":203347,"byte_end":203350,"line_start":225,"line_end":225,"column_start":26,"column_end":29},"kind":{"Impl":{"id":168}},"from":{"krate":0,"index":1689},"to":{"krate":1,"index":9565}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":203542,"byte_end":203545,"line_start":235,"line_end":235,"column_start":21,"column_end":24},"kind":{"Impl":{"id":169}},"from":{"krate":0,"index":1689},"to":{"krate":1,"index":3258}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":204166,"byte_end":204169,"line_start":259,"line_end":259,"column_start":28,"column_end":31},"kind":{"Impl":{"id":170}},"from":{"krate":0,"index":1689},"to":{"krate":1,"index":3019}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":204246,"byte_end":204249,"line_start":266,"line_end":266,"column_start":28,"column_end":31},"kind":{"Impl":{"id":171}},"from":{"krate":0,"index":1689},"to":{"krate":1,"index":3031}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":204325,"byte_end":204328,"line_start":273,"line_end":273,"column_start":27,"column_end":30},"kind":{"Impl":{"id":172}},"from":{"krate":0,"index":1689},"to":{"krate":1,"index":2916}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":204474,"byte_end":204477,"line_start":283,"line_end":283,"column_start":27,"column_end":30},"kind":{"Impl":{"id":173}},"from":{"krate":0,"index":1689},"to":{"krate":1,"index":2919}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":204631,"byte_end":204634,"line_start":293,"line_end":293,"column_start":23,"column_end":26},"kind":{"Impl":{"id":174}},"from":{"krate":0,"index":1689},"to":{"krate":1,"index":2670}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":204794,"byte_end":204797,"line_start":303,"line_end":303,"column_start":16,"column_end":19},"kind":{"Impl":{"id":175}},"from":{"krate":0,"index":1689},"to":{"krate":1,"index":2675}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":204865,"byte_end":204868,"line_start":310,"line_end":310,"column_start":24,"column_end":27},"kind":{"Impl":{"id":176}},"from":{"krate":0,"index":1689},"to":{"krate":1,"index":2717}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":205066,"byte_end":205069,"line_start":320,"line_end":320,"column_start":17,"column_end":20},"kind":{"Impl":{"id":177}},"from":{"krate":0,"index":1689},"to":{"krate":1,"index":2706}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/singleton.rs","byte_start":205230,"byte_end":205233,"line_start":330,"line_end":330,"column_start":18,"column_end":21},"kind":{"Impl":{"id":178}},"from":{"krate":0,"index":1689},"to":{"krate":1,"index":9765}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/llsc.rs","byte_start":217421,"byte_end":217425,"line_start":19,"line_end":19,"column_start":9,"column_end":13},"kind":{"Impl":{"id":179}},"from":{"krate":0,"index":1769},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/llsc.rs","byte_start":217566,"byte_end":217571,"line_start":29,"line_end":29,"column_start":9,"column_end":14},"kind":{"Impl":{"id":180}},"from":{"krate":0,"index":1776},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":187908,"byte_end":187912,"line_start":280,"line_end":280,"column_start":25,"column_end":29},"kind":{"Impl":{"id":181}},"from":{"krate":0,"index":1784},"to":{"krate":1,"index":3031}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":187944,"byte_end":187948,"line_start":282,"line_end":282,"column_start":25,"column_end":29},"kind":{"Impl":{"id":182}},"from":{"krate":0,"index":1784},"to":{"krate":1,"index":3019}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":187964,"byte_end":187968,"line_start":284,"line_end":284,"column_start":9,"column_end":13},"kind":{"Impl":{"id":183}},"from":{"krate":0,"index":1784},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":192649,"byte_end":192652,"line_start":442,"line_end":442,"column_start":9,"column_end":12},"kind":{"Impl":{"id":184}},"from":{"krate":0,"index":1801},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":193274,"byte_end":193277,"line_start":468,"line_end":468,"column_start":28,"column_end":31},"kind":{"Impl":{"id":185}},"from":{"krate":0,"index":1801},"to":{"krate":1,"index":3019}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":193329,"byte_end":193332,"line_start":470,"line_end":470,"column_start":28,"column_end":31},"kind":{"Impl":{"id":186}},"from":{"krate":0,"index":1801},"to":{"krate":1,"index":3031}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":193408,"byte_end":193411,"line_start":472,"line_end":472,"column_start":52,"column_end":55},"kind":{"Impl":{"id":187}},"from":{"krate":0,"index":1801},"to":{"krate":6,"index":7}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":193445,"byte_end":193448,"line_start":474,"line_end":474,"column_start":27,"column_end":30},"kind":{"Impl":{"id":188}},"from":{"krate":0,"index":1801},"to":{"krate":1,"index":2916}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":193575,"byte_end":193578,"line_start":483,"line_end":483,"column_start":27,"column_end":30},"kind":{"Impl":{"id":189}},"from":{"krate":0,"index":1801},"to":{"krate":1,"index":2919}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":193709,"byte_end":193712,"line_start":492,"line_end":492,"column_start":19,"column_end":22},"kind":{"Impl":{"id":190}},"from":{"krate":0,"index":1801},"to":{"krate":1,"index":3234}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":194015,"byte_end":194018,"line_start":505,"line_end":505,"column_start":22,"column_end":25},"kind":{"Impl":{"id":191}},"from":{"krate":0,"index":1801},"to":{"krate":1,"index":3247}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":194321,"byte_end":194324,"line_start":516,"line_end":516,"column_start":24,"column_end":27},"kind":{"Impl":{"id":192}},"from":{"krate":0,"index":1801},"to":{"krate":1,"index":9558}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":194492,"byte_end":194495,"line_start":525,"line_end":525,"column_start":26,"column_end":29},"kind":{"Impl":{"id":193}},"from":{"krate":0,"index":1801},"to":{"krate":1,"index":9565}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":194664,"byte_end":194667,"line_start":534,"line_end":534,"column_start":23,"column_end":26},"kind":{"Impl":{"id":194}},"from":{"krate":0,"index":1801},"to":{"krate":1,"index":2670}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":194802,"byte_end":194805,"line_start":543,"line_end":543,"column_start":16,"column_end":19},"kind":{"Impl":{"id":195}},"from":{"krate":0,"index":1801},"to":{"krate":1,"index":2675}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":194848,"byte_end":194851,"line_start":545,"line_end":545,"column_start":24,"column_end":27},"kind":{"Impl":{"id":196}},"from":{"krate":0,"index":1801},"to":{"krate":1,"index":2717}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":195024,"byte_end":195027,"line_start":554,"line_end":554,"column_start":17,"column_end":20},"kind":{"Impl":{"id":197}},"from":{"krate":0,"index":1801},"to":{"krate":1,"index":2706}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/pool/mod.rs","byte_start":195163,"byte_end":195166,"line_start":563,"line_end":563,"column_start":18,"column_end":21},"kind":{"Impl":{"id":198}},"from":{"krate":0,"index":1801},"to":{"krate":1,"index":9765}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":220382,"byte_end":220386,"line_start":36,"line_end":36,"column_start":34,"column_end":38},"kind":"SuperTrait","from":{"krate":1,"index":3029},"to":{"krate":0,"index":1878}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":220824,"byte_end":220830,"line_start":54,"line_end":54,"column_start":26,"column_end":32},"kind":"SuperTrait","from":{"krate":0,"index":1894},"to":{"krate":0,"index":1887}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":220900,"byte_end":220903,"line_start":59,"line_end":59,"column_start":15,"column_end":18},"kind":{"Impl":{"id":199}},"from":{"krate":0,"index":1883},"to":{"krate":0,"index":1887}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":220984,"byte_end":220987,"line_start":65,"line_end":65,"column_start":15,"column_end":18},"kind":{"Impl":{"id":200}},"from":{"krate":0,"index":1885},"to":{"krate":0,"index":1887}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":221141,"byte_end":221144,"line_start":76,"line_end":76,"column_start":26,"column_end":29},"kind":{"Impl":{"id":201}},"from":{"krate":0,"index":1885},"to":{"krate":0,"index":1894}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":221173,"byte_end":221176,"line_start":77,"line_end":77,"column_start":26,"column_end":29},"kind":{"Impl":{"id":202}},"from":{"krate":0,"index":1883},"to":{"krate":0,"index":1894}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":224409,"byte_end":224425,"line_start":185,"line_end":185,"column_start":33,"column_end":49},"kind":{"Impl":{"id":203}},"from":{"krate":0,"index":1902},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":226166,"byte_end":226182,"line_start":234,"line_end":234,"column_start":33,"column_end":49},"kind":{"Impl":{"id":204}},"from":{"krate":0,"index":1902},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":234718,"byte_end":234722,"line_start":525,"line_end":525,"column_start":50,"column_end":54},"kind":{"Impl":{"id":205}},"from":{"krate":0,"index":1940},"to":{"krate":1,"index":7829}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":235391,"byte_end":235398,"line_start":557,"line_end":557,"column_start":37,"column_end":44},"kind":{"Impl":{"id":206}},"from":{"krate":0,"index":1956},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":238051,"byte_end":238058,"line_start":645,"line_end":645,"column_start":42,"column_end":49},"kind":{"Impl":{"id":207}},"from":{"krate":0,"index":1956},"to":{"krate":1,"index":3258}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":238416,"byte_end":238423,"line_start":660,"line_end":660,"column_start":43,"column_end":50},"kind":{"Impl":{"id":208}},"from":{"krate":0,"index":1956},"to":{"krate":1,"index":3234}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":238713,"byte_end":238720,"line_start":674,"line_end":674,"column_start":46,"column_end":53},"kind":{"Impl":{"id":209}},"from":{"krate":0,"index":1956},"to":{"krate":1,"index":3247}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":239877,"byte_end":239893,"line_start":712,"line_end":712,"column_start":48,"column_end":64},"kind":{"Impl":{"id":210}},"from":{"krate":0,"index":1902},"to":{"krate":1,"index":9558}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sorted_linked_list.rs","byte_start":240158,"byte_end":240174,"line_start":723,"line_end":723,"column_start":42,"column_end":58},"kind":{"Impl":{"id":211}},"from":{"krate":0,"index":1902},"to":{"krate":1,"index":3258}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":247231,"byte_end":247236,"line_start":108,"line_end":108,"column_start":25,"column_end":30},"kind":{"Impl":{"id":212}},"from":{"krate":0,"index":2031},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":253811,"byte_end":253816,"line_start":299,"line_end":299,"column_start":37,"column_end":42},"kind":{"Impl":{"id":213}},"from":{"krate":0,"index":2031},"to":{"krate":1,"index":2997}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":253915,"byte_end":253920,"line_start":305,"line_end":305,"column_start":35,"column_end":40},"kind":{"Impl":{"id":214}},"from":{"krate":0,"index":2031},"to":{"krate":1,"index":2640}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":254366,"byte_end":254371,"line_start":324,"line_end":324,"column_start":70,"column_end":75},"kind":{"Impl":{"id":215}},"from":{"krate":0,"index":2031},"to":{"krate":1,"index":2670}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":254585,"byte_end":254590,"line_start":333,"line_end":333,"column_start":32,"column_end":37},"kind":{"Impl":{"id":216}},"from":{"krate":0,"index":2031},"to":{"krate":1,"index":2675}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":254796,"byte_end":254800,"line_start":342,"line_end":342,"column_start":39,"column_end":43},"kind":{"Impl":{"id":217}},"from":{"krate":0,"index":2078},"to":{"krate":1,"index":2640}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":255160,"byte_end":255164,"line_start":359,"line_end":359,"column_start":42,"column_end":46},"kind":{"Impl":{"id":218}},"from":{"krate":0,"index":2078},"to":{"krate":1,"index":7829}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":255597,"byte_end":255604,"line_start":376,"line_end":376,"column_start":42,"column_end":49},"kind":{"Impl":{"id":219}},"from":{"krate":0,"index":2090},"to":{"krate":1,"index":7829}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":256054,"byte_end":256058,"line_start":393,"line_end":393,"column_start":53,"column_end":57},"kind":{"Impl":{"id":220}},"from":{"krate":0,"index":2078},"to":{"krate":1,"index":7684}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":256549,"byte_end":256556,"line_start":408,"line_end":408,"column_start":53,"column_end":60},"kind":{"Impl":{"id":221}},"from":{"krate":0,"index":2090},"to":{"krate":1,"index":7684}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":257030,"byte_end":257035,"line_start":423,"line_end":423,"column_start":34,"column_end":39},"kind":{"Impl":{"id":222}},"from":{"krate":0,"index":2031},"to":{"krate":1,"index":3258}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":257231,"byte_end":257236,"line_start":433,"line_end":433,"column_start":40,"column_end":45},"kind":{"Impl":{"id":223}},"from":{"krate":0,"index":2031},"to":{"krate":1,"index":9558}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":257434,"byte_end":257439,"line_start":442,"line_end":442,"column_start":40,"column_end":45},"kind":{"Impl":{"id":224}},"from":{"krate":0,"index":2031},"to":{"krate":1,"index":9765}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":257695,"byte_end":257700,"line_start":454,"line_end":454,"column_start":42,"column_end":47},"kind":{"Impl":{"id":225}},"from":{"krate":0,"index":2031},"to":{"krate":4,"index":105}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":258575,"byte_end":258583,"line_start":490,"line_end":490,"column_start":45,"column_end":53},"kind":{"Impl":{"id":226}},"from":{"krate":0,"index":2151},"to":{"krate":1,"index":3019}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":258861,"byte_end":258869,"line_start":498,"line_end":498,"column_start":45,"column_end":53},"kind":{"Impl":{"id":227}},"from":{"krate":0,"index":2160},"to":{"krate":1,"index":3019}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":258926,"byte_end":258934,"line_start":500,"line_end":500,"column_start":29,"column_end":37},"kind":{"Impl":{"id":228}},"from":{"krate":0,"index":2151},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/spsc.rs","byte_start":260568,"byte_end":260576,"line_start":556,"line_end":556,"column_start":29,"column_end":37},"kind":{"Impl":{"id":229}},"from":{"krate":0,"index":2160},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/s7rul/.cargo/registry/src/github.com-1ecc6299db9ec823/heapless-0.7.10/src/sealed.rs","byte_start":270430,"byte_end":270436,"line_start":37,"line_end":37,"column_start":38,"column_end":44},"kind":{"Impl":{"id":230}},"from":{"krate":0,"index":2205},"to":{"krate":4294967295,"index":4294967295}}]}